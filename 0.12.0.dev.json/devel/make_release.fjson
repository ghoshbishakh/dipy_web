{"sourcename": "devel/make_release.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">A guide to making a dipy release</a><ul>\n<li><a class=\"reference internal\" href=\"#release-tools\">Release tools</a></li>\n<li><a class=\"reference internal\" href=\"#release-checklist\">Release checklist</a></li>\n<li><a class=\"reference internal\" href=\"#doing-the-release\">Doing the release</a></li>\n<li><a class=\"reference internal\" href=\"#uploading-binary-builds-for-the-release\">Uploading binary builds for the release</a></li>\n<li><a class=\"reference internal\" href=\"#other-stuff-that-needs-doing-for-the-release\">Other stuff that needs doing for the release</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "current_page_name": "devel/make_release", "title": "A guide to making a dipy release", "alabaster_version": "0.7.7", "sidebars": null, "metatags": "", "next": {"title": "Commit message codes", "link": "../commit_codes/"}, "customsidebar": null, "prev": {"title": "git resources", "link": "../gitwash/git_resources/"}, "parents": [{"title": "Documentation", "link": "../../documentation/"}, {"title": "DiPy development", "link": "../"}], "body": "<div class=\"section\" id=\"a-guide-to-making-a-dipy-release\">\n<span id=\"release-guide\"></span><h1>A guide to making a dipy release<a class=\"headerlink\" href=\"#a-guide-to-making-a-dipy-release\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A guide for developers who are doing a dipy release</p>\n<div class=\"section\" id=\"release-tools\">\n<span id=\"id1\"></span><h2>Release tools<a class=\"headerlink\" href=\"#release-tools\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are some release utilities that come with <a class=\"reference external\" href=\"http://nipy.org/nibabel\">nibabel</a>.  nibabel should\ninstall these as the <code class=\"docutils literal\"><span class=\"pre\">nisext</span></code> package, and the testing stuff is understandably\nin the <code class=\"docutils literal\"><span class=\"pre\">testers</span></code> module of that package.  Dipy has Makefile targets for their\nuse.  The relevant targets are:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">version</span><span class=\"o\">-</span><span class=\"n\">info</span>\n<span class=\"n\">make</span> <span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">files</span>\n<span class=\"n\">make</span> <span class=\"n\">sdist</span><span class=\"o\">-</span><span class=\"n\">tests</span>\n</pre></div>\n</div>\n<p>The first installs the code from a git archive, from the repository, and for\nin-place use, and runs the <code class=\"docutils literal\"><span class=\"pre\">get_info()</span></code> function to confirm that installation\nis working and information parameters are set correctly.</p>\n<p>The second (<code class=\"docutils literal\"><span class=\"pre\">sdist-tests</span></code>) makes an sdist source distribution archive,\ninstalls it to a temporary directory, and runs the tests of that install.</p>\n<p>If you have a version of nibabel trunk past February 11th 2011, there will also\nbe a functional make target:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">bdist</span><span class=\"o\">-</span><span class=\"n\">egg</span><span class=\"o\">-</span><span class=\"n\">tests</span>\n</pre></div>\n</div>\n<p>This builds an egg (which is a zip file), hatches it (unzips the egg) and runs\nthe tests from the resulting directory.</p>\n</div>\n<div class=\"section\" id=\"release-checklist\">\n<span id=\"id2\"></span><h2>Release checklist<a class=\"headerlink\" href=\"#release-checklist\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">Review the open list of <a class=\"reference external\" href=\"http://github.com/nipy/dipy/issues\">dipy issues</a>.  Check whether there are\noutstanding issues that can be closed, and whether there are any issues that\nshould delay the release.  Label them !</p>\n</li>\n<li><p class=\"first\">Review and update the release notes.  Review and update the <code class=\"file docutils literal\"><span class=\"pre\">Changelog</span></code>\nfile.  Get a partial list of contributors with something like:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">shortlog</span> <span class=\"o\">-</span><span class=\"n\">ns</span> <span class=\"mf\">0.6</span><span class=\"o\">.</span><span class=\"mf\">0.</span><span class=\"o\">.</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal\"><span class=\"pre\">0.6.0</span></code> was the last release tag name.</p>\n<p>Then manually go over <code class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">shortlog</span> <span class=\"pre\">0.6.0..</span></code> to make sure the release notes\nare as complete as possible and that every contributor was recognized.</p>\n</li>\n<li><p class=\"first\">Use the opportunity to update the <code class=\"docutils literal\"><span class=\"pre\">.mailmap</span></code> file if there are any duplicate\nauthors listed from <code class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">shortlog</span> <span class=\"pre\">-ns</span></code>.</p>\n</li>\n<li><p class=\"first\">Add any new authors to the <code class=\"docutils literal\"><span class=\"pre\">AUTHORS</span></code> file.  Add any new entries to the\n<code class=\"docutils literal\"><span class=\"pre\">THANKS</span></code> file.</p>\n</li>\n<li><p class=\"first\">Check the copyright years in <code class=\"docutils literal\"><span class=\"pre\">doc/conf.py</span></code> and <code class=\"docutils literal\"><span class=\"pre\">LICENSE</span></code></p>\n</li>\n<li><p class=\"first\">Check the examples - we really need an automated check here.</p>\n</li>\n<li><p class=\"first\">Check the <code class=\"docutils literal\"><span class=\"pre\">pyx</span></code> file doctests with:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"o\">./</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">doctest_extmods</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">dipy</span>\n</pre></div>\n</div>\n<p>We really need an automated run of these using the buildbots, but we haven&#8217;t\ndone it yet.</p>\n</li>\n<li><p class=\"first\">Check the <code class=\"docutils literal\"><span class=\"pre\">long_description</span></code> in <code class=\"docutils literal\"><span class=\"pre\">dipy/info.py</span></code>.  Check it matches the\n<code class=\"docutils literal\"><span class=\"pre\">README</span></code> in the root directory, maybe with <code class=\"docutils literal\"><span class=\"pre\">vim</span></code> <code class=\"docutils literal\"><span class=\"pre\">diffthis</span></code> command.\nCheck all the links are still valid.</p>\n</li>\n<li><p class=\"first\">Check all the dipy builds are green on the <a href=\"#id4\"><span class=\"problematic\" id=\"id5\">`nipy buildbot`_</span></a></p>\n</li>\n<li><p class=\"first\">If you have <a href=\"#id6\"><span class=\"problematic\" id=\"id7\">travis-ci_</span></a> building set up you might want to push the code in its\ncurrent state to a branch that will build, e.g:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">branch</span> <span class=\"o\">-</span><span class=\"n\">D</span> <span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">release</span><span class=\"o\">-</span><span class=\"n\">test</span> <span class=\"c1\"># in case branch already exists</span>\n<span class=\"n\">git</span> <span class=\"n\">co</span> <span class=\"o\">-</span><span class=\"n\">b</span> <span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">release</span><span class=\"o\">-</span><span class=\"n\">test</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Run the builder and review the output from\n<a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/builders/dipy-release-checks\">http://nipy.bic.berkeley.edu/builders/dipy-release-checks</a>   This builder does\n<em>not</em> check the outputs - they will likely all be green - you have to check the\n<code class=\"docutils literal\"><span class=\"pre\">stdio</span></code> output for each step using the web interface.</p>\n<p>The <code class=\"docutils literal\"><span class=\"pre\">dipy-release-checks</span></code> builder runs these tests:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">distclean</span>\n<span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">compileall</span> <span class=\"o\">.</span>\n<span class=\"n\">make</span> <span class=\"n\">sdist</span><span class=\"o\">-</span><span class=\"n\">tests</span>\n<span class=\"n\">make</span> <span class=\"n\">bdist</span><span class=\"o\">-</span><span class=\"n\">egg</span><span class=\"o\">-</span><span class=\"n\">tests</span>\n<span class=\"n\">make</span> <span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">version</span><span class=\"o\">-</span><span class=\"n\">info</span>\n<span class=\"n\">make</span> <span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">files</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">make</span> <span class=\"pre\">bdist-egg-tests</span></code> may well fail because of a problem with the script\ntests; if you have a recent (&gt;= March 31 2013) nibabel <code class=\"docutils literal\"><span class=\"pre\">nisext</span></code> package, you\ncould try instead doing:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"s1\">&#39;from nisext.testers import bdist_egg_tests; bdist_egg_tests(&quot;dipy&quot;, label=&quot;not slow and not script_test&quot;)&#39;</span>\n</pre></div>\n</div>\n<p>Eventually we should update the <code class=\"docutils literal\"><span class=\"pre\">bdist-egg-tests</span></code> makefile target.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">make</span> <span class=\"pre\">check-version-info</span></code> checks how the commit hash is stored in the\ninstalled files.  You should see something like this:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"s1\">&#39;sys_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2.6.6 (r266:84374, Aug 31 2010, 11:00:51) </span><span class=\"se\">\\n</span><span class=\"s1\">[GCC 4.0.1 (Apple Inc. build 5493)]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_source&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;archive substitution&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;np_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1.5.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_hash&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;25b4125&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pkg_path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/folders/jg/jgfZ12ZXHwGSFKD85xLpLk+++TI/-Tmp-/tmpGPiD3E/pylib/dipy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_executable&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_platform&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">}</span>\n<span class=\"o\">/</span><span class=\"n\">var</span><span class=\"o\">/</span><span class=\"n\">folders</span><span class=\"o\">/</span><span class=\"n\">jg</span><span class=\"o\">/</span><span class=\"n\">jgfZ12ZXHwGSFKD85xLpLk</span><span class=\"o\">+++</span><span class=\"n\">TI</span><span class=\"o\">/-</span><span class=\"n\">Tmp</span><span class=\"o\">-/</span><span class=\"n\">tmpGPiD3E</span><span class=\"o\">/</span><span class=\"n\">pylib</span><span class=\"o\">/</span><span class=\"n\">dipy</span><span class=\"o\">/</span><span class=\"n\">__init__</span><span class=\"o\">.</span><span class=\"n\">pyc</span>\n<span class=\"p\">{</span><span class=\"s1\">&#39;sys_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2.6.6 (r266:84374, Aug 31 2010, 11:00:51) </span><span class=\"se\">\\n</span><span class=\"s1\">[GCC 4.0.1 (Apple Inc. build 5493)]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_source&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;installation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;np_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1.5.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_hash&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;25b4125&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pkg_path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/folders/jg/jgfZ12ZXHwGSFKD85xLpLk+++TI/-Tmp-/tmpGPiD3E/pylib/dipy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_executable&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_platform&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">}</span>\n<span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">mb312</span><span class=\"o\">/</span><span class=\"n\">dev_trees</span><span class=\"o\">/</span><span class=\"n\">dipy</span><span class=\"o\">/</span><span class=\"n\">dipy</span><span class=\"o\">/</span><span class=\"n\">__init__</span><span class=\"o\">.</span><span class=\"n\">pyc</span>\n<span class=\"p\">{</span><span class=\"s1\">&#39;sys_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2.6.6 (r266:84374, Aug 31 2010, 11:00:51) </span><span class=\"se\">\\n</span><span class=\"s1\">[GCC 4.0.1 (Apple Inc. build 5493)]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_source&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;repository&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;np_version&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1.5.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;commit_hash&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;25b4125&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pkg_path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/Users/mb312/dev_trees/dipy/dipy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_executable&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sys_platform&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">make</span> <span class=\"pre\">check-files</span></code> checks if the source distribution is picking up all the\nlibrary and script files.  Look for output at the end about missed files, such\nas:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">Missed</span> <span class=\"n\">script</span> <span class=\"n\">files</span><span class=\"p\">:</span>  <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">mb312</span><span class=\"o\">/</span><span class=\"n\">dev_trees</span><span class=\"o\">/</span><span class=\"n\">dipy</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">nib</span><span class=\"o\">-</span><span class=\"n\">dicomfs</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">mb312</span><span class=\"o\">/</span><span class=\"n\">dev_trees</span><span class=\"o\">/</span><span class=\"n\">dipy</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">nifti1_diagnose</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre></div>\n</div>\n<p>Fix <code class=\"docutils literal\"><span class=\"pre\">setup.py</span></code> to carry across any files that should be in the distribution.</p>\n</li>\n<li><p class=\"first\">Clean and compile:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">distclean</span>\n<span class=\"n\">git</span> <span class=\"n\">clean</span> <span class=\"o\">-</span><span class=\"n\">fxd</span>\n<span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">build_ext</span> <span class=\"o\">--</span><span class=\"n\">inplace</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Make sure all tests pass on your local machine (from the dipy root directory):</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">cd</span> <span class=\"o\">..</span>\n<span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">doctest</span> <span class=\"n\">dipy</span>\n<span class=\"n\">cd</span> <span class=\"n\">dipy</span> <span class=\"c1\"># back to the root directory</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Check the documentation doctests:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">cd</span> <span class=\"n\">doc</span>\n<span class=\"n\">make</span> <span class=\"n\">doctest</span>\n<span class=\"n\">cd</span> <span class=\"o\">..</span>\n</pre></div>\n</div>\n<p>At the moment this generates lots of errors from the autodoc documentation\nrunning the doctests in the code, where the doctests pass when run in nose -\nwe should find out why this is at some point, but leave it for now.</p>\n</li>\n<li><p class=\"first\">Trigger builds of all the binary build testers for dipy, using the web\ninterface.  You may need permissions set to do this - contact Matthew or\nEleftherios if you do.</p>\n<p>At the moment, the useful dipy binary build testers are:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/builders/dipy-bdist32-26\">http://nipy.bic.berkeley.edu/builders/dipy-bdist32-26</a></li>\n<li><a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/builders/dipy-bdist32-27\">http://nipy.bic.berkeley.edu/builders/dipy-bdist32-27</a></li>\n<li><a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/builders/dipy-bdist-mpkg-2.6\">http://nipy.bic.berkeley.edu/builders/dipy-bdist-mpkg-2.6</a></li>\n<li><a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/builders/dipy-bdist-mpkg-2.7\">http://nipy.bic.berkeley.edu/builders/dipy-bdist-mpkg-2.7</a></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p class=\"first\">The release should now be ready.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"doing-the-release\">\n<h2>Doing the release<a class=\"headerlink\" href=\"#doing-the-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The trick here is to get all the testing, pushing to upstream done <em>before</em> you\ndo the final release commit.  There should be only one commit with the release\nversion number, so you might want to make the release commit on your local\nmachine, push to <a href=\"#id8\"><span class=\"problematic\" id=\"id9\">pypi_</span></a>, review, fix, rebase, until all is good.  Then and only\nthen do you push to upstream on github.</p>\n<ul>\n<li><p class=\"first\">Make the release commit.  Edit <code class=\"file docutils literal\"><span class=\"pre\">dipy/info.py</span></code> to set <code class=\"docutils literal\"><span class=\"pre\">_version_extra</span></code>\nto <code class=\"docutils literal\"><span class=\"pre\">''</span></code>; commit</p>\n</li>\n<li><p class=\"first\">Build the release files:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">distclean</span>\n<span class=\"n\">git</span> <span class=\"n\">clean</span> <span class=\"o\">-</span><span class=\"n\">fxd</span>\n<span class=\"n\">make</span> <span class=\"n\">source</span><span class=\"o\">-</span><span class=\"n\">release</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Once everything looks good, upload the source release to PyPi.  See\n<a class=\"reference external\" href=\"http://packages.python.org/an_example_pypi_project/setuptools.html\">setuptools intro</a>:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">register</span>\n<span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">sdist</span> <span class=\"o\">--</span><span class=\"n\">formats</span><span class=\"o\">=</span><span class=\"n\">gztar</span><span class=\"p\">,</span><span class=\"nb\">zip</span> <span class=\"n\">upload</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Remember you&#8217;ll need your <code class=\"docutils literal\"><span class=\"pre\">~/.pypirc</span></code> file set up right for this to work.\nSee <a class=\"reference external\" href=\"http://packages.python.org/an_example_pypi_project/setuptools.html\">setuptools intro</a>.  The file should look something like this:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">distutils</span><span class=\"p\">]</span>\n<span class=\"n\">index</span><span class=\"o\">-</span><span class=\"n\">servers</span> <span class=\"o\">=</span>\n    <span class=\"n\">pypi</span>\n\n<span class=\"p\">[</span><span class=\"n\">pypi</span><span class=\"p\">]</span>\n<span class=\"n\">username</span><span class=\"p\">:</span><span class=\"n\">your</span><span class=\"o\">.</span><span class=\"n\">pypi</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"n\">password</span><span class=\"p\">:</span><span class=\"n\">your</span><span class=\"o\">-</span><span class=\"n\">password</span>\n\n<span class=\"p\">[</span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">login</span><span class=\"p\">]</span>\n<span class=\"n\">username</span><span class=\"p\">:</span><span class=\"n\">your</span><span class=\"o\">.</span><span class=\"n\">pypi</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"n\">password</span><span class=\"p\">:</span><span class=\"n\">your</span><span class=\"o\">-</span><span class=\"n\">password</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Check how everything looks on pypi - the description, the packages.  If\nnecessary delete the release and try again if it doesn&#8217;t look right.</p>\n</li>\n<li><p class=\"first\">Make an annotated tag for the release with tag of form <code class=\"docutils literal\"><span class=\"pre\">0.6.0</span></code>:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">tag</span> <span class=\"o\">-</span><span class=\"n\">am</span> <span class=\"s1\">&#39;Second public release&#39;</span> <span class=\"mf\">0.6</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Set up maintenance / development branches</p>\n<p>If this is this is a full release you need to set up two branches, one for\nfurther substantial development (often called &#8216;trunk&#8217;) and another for\nmaintenance releases.</p>\n<ul>\n<li><p class=\"first\">Branch to maintenance:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">co</span> <span class=\"o\">-</span><span class=\"n\">b</span> <span class=\"n\">maint</span><span class=\"o\">/</span><span class=\"mf\">0.6</span><span class=\"o\">.</span><span class=\"n\">x</span>\n</pre></div>\n</div>\n<p>Set <code class=\"docutils literal\"><span class=\"pre\">_version_extra</span></code> back to <code class=\"docutils literal\"><span class=\"pre\">.dev</span></code> and bump <code class=\"docutils literal\"><span class=\"pre\">_version_micro</span></code> by 1.\nThus the maintenance series will have version numbers like - say - &#8216;0.6.1.dev&#8217;\nuntil the next maintenance release - say &#8216;0.6.1&#8217;.  Commit.</p>\n<p>Push with something like <code class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">upstream-rw</span> <span class=\"pre\">maint/0.6.x</span> <span class=\"pre\">--set-upstream</span></code></p>\n</li>\n<li><p class=\"first\">Start next development series:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">co</span> <span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">master</span>\n</pre></div>\n</div>\n<p>then restore <code class=\"docutils literal\"><span class=\"pre\">.dev</span></code> to <code class=\"docutils literal\"><span class=\"pre\">_version_extra</span></code>, and bump <code class=\"docutils literal\"><span class=\"pre\">_version_minor</span></code> by 1.\nThus the development series (&#8216;trunk&#8217;) will have a version number here of\n&#8216;0.7.0.dev&#8217; and the next full release will be &#8216;0.7.0&#8217;.</p>\n<p>Next merge the maintenace branch with the &#8220;ours&#8221; strategy.  This just labels\nthe maintenance branch <cite>info.py</cite> edits as seen but discarded, so we can\nmerge from maintenance in future without getting spurious merge conflicts:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"o\">-</span><span class=\"n\">s</span> <span class=\"n\">ours</span> <span class=\"n\">maint</span><span class=\"o\">/</span><span class=\"mf\">0.6</span><span class=\"o\">.</span><span class=\"n\">x</span>\n</pre></div>\n</div>\n<p>Push with something like <code class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">upstream-rw</span> <span class=\"pre\">main-master:master</span></code></p>\n</li>\n</ul>\n<p>If this is just a maintenance release from <code class=\"docutils literal\"><span class=\"pre\">maint/0.6.x</span></code> or similar, just\ntag and set the version number to - say - <code class=\"docutils literal\"><span class=\"pre\">0.6.2.dev</span></code>.</p>\n</li>\n<li><p class=\"first\">Push the tag with <code class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">upstream-rw</span> <span class=\"pre\">0.6.0</span></code></p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"uploading-binary-builds-for-the-release\">\n<h2>Uploading binary builds for the release<a class=\"headerlink\" href=\"#uploading-binary-builds-for-the-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By far the easiest way to do this is via the buildbots.</p>\n<p>In order to do this, you need first to push the release commit and the release\ntag to github, so the buildbots can find the released code and build it.</p>\n<ul>\n<li><p class=\"first\">In order to trigger the binary builds for the release commit, you need to go\nto the web interface for the binary builder, go to the &#8220;Force build&#8221; section,\nenter your username and password for the buildbot web service and enter the\ncommit tag name in the <em>revision</em> field.  For example, if the tag was\n<code class=\"docutils literal\"><span class=\"pre\">0.6.0</span></code> then you would enter <code class=\"docutils literal\"><span class=\"pre\">0.6.0</span></code> in the revision field of the form.\nThis builds the exact commit labeled by the tag, which is what we want.</p>\n</li>\n<li><p class=\"first\">Trigger binary builds for Windows from the buildbots. See builders\n<code class=\"docutils literal\"><span class=\"pre\">dipy-bdist32-26</span></code>, <code class=\"docutils literal\"><span class=\"pre\">dipy-bdist32-27</span></code>.  The <code class=\"docutils literal\"><span class=\"pre\">exe</span></code> builds will appear in\n<a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/dipy-dist\">http://nipy.bic.berkeley.edu/dipy-dist</a> .  Check that the binary build version\nnumbers are release numbers (<code class=\"docutils literal\"><span class=\"pre\">dipy-0.6.0.win32.exe</span></code> rather than\n<code class=\"docutils literal\"><span class=\"pre\">dipy-0.6.0.dev.win32.exe</span></code>).</p>\n<p>Download the builds and upload to pypi.</p>\n<p>You can upload the exe files with the <em>files</em> interface for the new dipy release.\nObviously you&#8217;ll need to log in to do this, and you&#8217;ll need to be an admin for\nthe dipy pypi project.</p>\n<p>For reference, if you need to do binary exe builds by hand, use something\nlike:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">distclean</span>\n<span class=\"n\">git</span> <span class=\"n\">clean</span> <span class=\"o\">-</span><span class=\"n\">fxd</span>\n<span class=\"n\">c</span><span class=\"p\">:</span>\\<span class=\"n\">Python26</span>\\<span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">exe</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">bdist_egg</span> <span class=\"n\">upload</span>\n<span class=\"n\">c</span><span class=\"p\">:</span>\\<span class=\"n\">Python26</span>\\<span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">exe</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">bdist_wininst</span> <span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">-</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mf\">2.6</span> <span class=\"n\">register</span> <span class=\"n\">upload</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Trigger binary builds for OSX from the buildbots <code class=\"docutils literal\"><span class=\"pre\">dipy-bdist-mpkg-2.6</span></code>,\n<code class=\"docutils literal\"><span class=\"pre\">dipy-bdist-mpkg-2.7</span></code>. <code class=\"docutils literal\"><span class=\"pre\">egg</span></code> and <code class=\"docutils literal\"><span class=\"pre\">mpkg</span></code> builds will appear in\n<a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu/dipy-dist\">http://nipy.bic.berkeley.edu/dipy-dist</a> .  Download the eggs and upload to\npypi.</p>\n<p>Upload the dmg files with the <em>files</em> interface for the new dipy release.</p>\n</li>\n<li><p class=\"first\">Building OSX dmgs from the mpkg builds.</p>\n<p>The buildbot binary builders build <code class=\"docutils literal\"><span class=\"pre\">mpkg</span></code> directories, which are installers\nfor OSX.</p>\n<p>These need their permissions to be fixed because the installers should install\nthe files as the root user, group <code class=\"docutils literal\"><span class=\"pre\">admin</span></code>.  The all need to be converted to\nOSX disk images.  Use the <code class=\"docutils literal\"><span class=\"pre\">./tools/build_dmgs.py</span></code>, with something like this\ncommand line:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"o\">./</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">build_dmgs</span> <span class=\"s2\">&quot;dipy-dist/dipy-0.6.0-py*.mpkg&quot;</span>\n</pre></div>\n</div>\n<p>For this to work you&#8217;ll need several things:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>An account on a OSX box with sudo (Admin user) on which to run the script.</li>\n<li>ssh access to the buildbot server <a class=\"reference external\" href=\"http://nipy.bic.berkeley.edu\">http://nipy.bic.berkeley.edu</a> (ask\nMatthew or Eleftherios).</li>\n<li>a development version of <code class=\"docutils literal\"><span class=\"pre\">bdist_mpkg</span></code> installed from\n<a class=\"reference external\" href=\"https://github.com/matthew-brett/bdist_mpkg\">https://github.com/matthew-brett/bdist_mpkg</a>.  You need this second for the\nscript <code class=\"docutils literal\"><span class=\"pre\">reown_mpkg</span></code> that fixes the permissions.</li>\n</ul>\n</div></blockquote>\n<p>Upload the dmg files with the <em>files</em> interface for the new dipy release.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"other-stuff-that-needs-doing-for-the-release\">\n<h2>Other stuff that needs doing for the release<a class=\"headerlink\" href=\"#other-stuff-that-needs-doing-for-the-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">Checkout the tagged release, build the html docs and upload them to\nthe github pages website:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">make</span> <span class=\"n\">upload</span>\n</pre></div>\n</div>\n<p>You need to checkout the tagged version in order to get the version number\ncorrect for the doc build.  The version number gets picked up from the\n<code class=\"docutils literal\"><span class=\"pre\">info.py</span></code> version.</p>\n</li>\n<li><p class=\"first\">Announce to the mailing lists.  With fear and trembling.</p>\n</li>\n</ul>\n</div>\n</div>\n", "rellinks": [["genindex", "General Index", "I", "index"], ["devel/commit_codes", "Commit message codes", "N", "next"], ["devel/gitwash/git_resources", "git resources", "P", "previous"]], "page_source_suffix": ".rst", "meta": {}}