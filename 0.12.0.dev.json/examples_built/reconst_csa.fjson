{"metatags": "", "current_page_name": "examples_built/reconst_csa", "title": "Reconstruct with Constant Solid Angle (Q-Ball)", "parents": [], "alabaster_version": "0.7.7", "customsidebar": null, "sidebars": null, "prev": null, "page_source_suffix": ".rst", "sourcename": "examples_built/reconst_csa.txt", "meta": {}, "next": null, "display_toc": false, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Constant Solid Angle (Q-Ball)</a></li>\n</ul>\n", "rellinks": [["genindex", "General Index", "I", "index"]], "body": "<div class=\"section\" id=\"reconstruct-with-constant-solid-angle-q-ball\">\n<span id=\"example-reconst-csa\"></span><h1>Reconstruct with Constant Solid Angle (Q-Ball)<a class=\"headerlink\" href=\"#reconstruct-with-constant-solid-angle-q-ball\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to apply a Constant Solid Angle ODF (Q-Ball) model from Aganj et.\nal (MRM 2010) to your datasets.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">,</span> <span class=\"n\">normalize_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a GradientTable\nobject (gradient information e.g. b-values). For example to read the b-values\nit is possible to write print(gtab.bvals).</p>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76,</span> <span class=\"pre\">160)</span></code></p>\n<p>Remove most of the background using dipy&#8217;s mask module.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We instantiate our CSA model with spherical harmonic order of 4</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><cite>Peaks_from_model</cite> is used to calculate properties of the ODFs (Orientation\nDistribution Function) and return for\nexample the peaks and their indices, or GFA which is similar to FA but for ODF\nbased models. This function mainly needs a reconstruction model, the data and a\nsphere as input. The sphere is an object that represents the spherical discrete\ngrid where the ODF values will be evaluated.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                            <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                            <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                            <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">csapeaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GFA.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>GFA.shape <code class=\"docutils literal\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76)</span></code></p>\n<p>Apart from GFA, csapeaks also has the attributes peak_values, peak_indices and\nODF. peak_values shows the maxima values of the ODF and peak_indices gives us\ntheir position on the discrete sphere that was used to do the reconstruction of\nthe ODF. In order to obtain the full ODF, return_odf should be True. Before\nenabling this option, make sure that you have enough memory.</p>\n<p>Let&#8217;s visualize the ODFs of a small rectangular area in an axial slice of the\nsplenium of the corpus callosum (CC).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">maskdata</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">]</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n\n<span class=\"n\">csaodfs</span> <span class=\"o\">=</span> <span class=\"n\">csamodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>It is common with CSA ODFs to produce negative values, we can remove those using <code class=\"docutils literal\"><span class=\"pre\">np.clip</span></code></p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">csaodfs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">&#39;jet&#39;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as csa_odfs.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;csa_odfs.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/csa_odfs.png\" src=\"examples_built/csa_odfs.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Constant Solid Angle ODFs</strong>.</span></p>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"o\">..</span> <span class=\"n\">admonition</span><span class=\"p\">::</span> <span class=\"n\">Example</span> <span class=\"n\">source</span> <span class=\"n\">code</span>\n</pre></div>\n</div>\n<blockquote>\n<div>You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_csa.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</div></blockquote>\n</div>\n"}