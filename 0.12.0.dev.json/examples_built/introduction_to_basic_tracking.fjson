{"metatags": "", "current_page_name": "examples_built/introduction_to_basic_tracking", "title": "Introduction to Basic Tracking", "parents": [], "alabaster_version": "0.7.7", "customsidebar": null, "sidebars": null, "prev": null, "page_source_suffix": ".rst", "sourcename": "examples_built/introduction_to_basic_tracking.txt", "meta": {}, "next": null, "display_toc": false, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Introduction to Basic Tracking</a></li>\n</ul>\n", "rellinks": [["genindex", "General Index", "I", "index"]], "body": "<div class=\"section\" id=\"introduction-to-basic-tracking\">\n<span id=\"example-introduction-to-basic-tracking\"></span><h1>Introduction to Basic Tracking<a class=\"headerlink\" href=\"#introduction-to-basic-tracking\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Local fiber tracking is an approach used to model white matter fibers by\ncreating streamlines from local directional information. The idea is as\nfollows: if the local directionality of a tract/pathway segment is known, one\ncan integrate along those directions to build a complete representation of that\nstructure. Local fiber tracking is widely used in the field of diffusion MRI\nbecause it is simple and robust.</p>\n<p>In order to perform local fiber tracking, three things are needed: 1) A method\nfor getting directions from a diffusion data set. 2) A method for identifying\ndifferent tissue types within the data set. 3) A set of seeds from which to\nbegin tracking.  This example shows how to combine the 3 parts described above\nto create a tractography reconstruction from a diffusion data set.</p>\n<p>To begin, let&#8217;s load an example HARDI data set from Stanford. If you have\nnot already downloaded this data set, the first time you run this example you\nwill need to be connected to the internet and this dataset will be downloaded\nto your computer.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_stanford_labels</span>\n\n<span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">labels_img</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This dataset provides a label map in which all white matter tissues are\nlabeled either 1 or 2. Lets create a white matter mask to restrict tracking to\nthe white matter.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>1. The first thing we need to begin fiber tracking is a way of getting\ndirections from this diffusion data set. In order to do that, we can fit the\ndata to a Constant Solid Angle ODF Model. This model will estimate the\norientation distribution function (ODF) at each voxel. The ODF is the\ndistribution of water diffusion as a function of direction. The peaks of an ODF\nare good estimates for the orientation of tract segments at a point in the\nimage.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">default_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">csa_model</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csa_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">csa_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>2. Next we need some way of restricting the fiber tracking to areas with good\ndirectionality information. We&#8217;ve already created the white matter mask,\nbut we can go a step further and restrict fiber tracking to those areas where\nthe ODF shows significant restricted diffusion by thresholding on\nthe general fractional anisotropy (GFA).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local</span> <span class=\"k\">import</span> <span class=\"n\">ThresholdTissueClassifier</span>\n\n<span class=\"n\">classifier</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>3. Before we can begin tracking is to specify where to &#8220;seed&#8221; (begin) the fiber\ntracking. Generally, the seeds chosen will depend on the pathways one is\ninterested in modeling. In this example, we&#8217;ll use a 2x2x2 grid of seeds per\nvoxel, in a sagittal slice of the Corpus Callosum.  Tracking from this region\nwill give us a model of the Corpus Callosum tract.  This slice has label value\n2 in the labels image.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"k\">import</span> <span class=\"n\">utils</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, we can bring it all together using <code class=\"docutils literal\"><span class=\"pre\">LocalTracking</span></code>. We will then\ndisplay the resulting streamlines using the fvtk module.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local</span> <span class=\"k\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz.colormap</span> <span class=\"k\">import</span> <span class=\"n\">line_colors</span>\n\n<span class=\"c1\"># Initialization of LocalTracking. The computation happens in the next step.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute streamlines and store as a list.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prepare the display objects.</span>\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">have_vtk</span><span class=\"p\">:</span>\n    <span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Create the 3d display.</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n    <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Save still images for this static example. Or for interactivity use</span>\n    <span class=\"c1\"># fvtk.show</span>\n    <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;deterministic.png&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"examples_built/deterministic.png\" src=\"examples_built/deterministic.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Deterministic</strong></span></p>\n</div>\n<p>We&#8217;ve created a deterministic set of streamlines, so called because if you\nrepeat the fiber tracking (keeping all the inputs the same) you will get\nexactly the same set of streamlines. We can save the streamlines as a Trackvis\nfile so it can be loaded into other software for visualization or further\nanalysis.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.trackvis</span> <span class=\"k\">import</span> <span class=\"n\">save_trk</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;CSA_detr.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next let&#8217;s try some probabilistic fiber tracking. For this, we&#8217;ll be using the\nConstrained Spherical Deconvolution (CSD) Model. This model represents each\nvoxel in the data set as a collection of small white matter fibers with\ndifferent orientations. The density of fibers along each orientation is known\nas the Fiber Orientation Distribution (FOD). In order to perform probabilistic\nfiber tracking, we pick a fiber from the FOD at random at each new location\nalong the streamline. Note: one could use this model to perform deterministic\nfiber tracking by always tracking along the directions that have the most\nfibers.</p>\n<p>Let&#8217;s begin probabilistic fiber tracking by fitting the data to the CSD model.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">,</span>\n                                   <span class=\"n\">auto_response</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit</span> <span class=\"o\">=</span> <span class=\"n\">csd_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next we&#8217;ll need to make a <code class=\"docutils literal\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code>. Because the CSD\nmodel represents the FOD using the spherical harmonic basis, we can use the\n<code class=\"docutils literal\"><span class=\"pre\">from_shcoeff</span></code> method to create the direction getter. This direction getter\nwill randomly sample directions from the FOD each time the tracking algorithm\nneeds to take another step.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">ProbabilisticDirectionGetter</span>\n\n<span class=\"n\">prob_dg</span> <span class=\"o\">=</span> <span class=\"n\">ProbabilisticDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_shcoeff</span><span class=\"p\">(</span><span class=\"n\">csd_fit</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As with deterministic tracking, we&#8217;ll need to use a tissue classifier to\nrestrict the tracking to the white matter of the brain. One might be tempted\nto use the GFA of the CSD FODs to build a tissue classifier, however the GFA\nvalues of these FODs don&#8217;t classify gray matter and white matter well. We will\ntherefore use the GFA from the CSA model which we fit for the first section of\nthis example. Alternatively, one could fit a <code class=\"docutils literal\"><span class=\"pre\">TensorModel</span></code> to the data and use\nthe fractional anisotropy (FA) to build a tissue classifier.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">classifier</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next we can pass this direction getter, along with the <code class=\"docutils literal\"><span class=\"pre\">classifier</span></code> and\n<code class=\"docutils literal\"><span class=\"pre\">seeds</span></code>, to <code class=\"docutils literal\"><span class=\"pre\">LocalTracking</span></code> to get a probabilistic model of the corpus\ncallosum.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">prob_dg</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                            <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">max_cross</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute streamlines and store as a list.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prepare the display objects.</span>\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">have_vtk</span><span class=\"p\">:</span>\n    <span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Create the 3d display.</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n    <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Save still images for this static example.</span>\n    <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;probabilistic.png&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/probabilistic.png\" src=\"examples_built/probabilistic.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Probabilistic</strong></span></p>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;CSD_prob.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/introduction_to_basic_tracking.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n"}