{"page_source_suffix": ".rst", "prev": null, "alabaster_version": "0.7.7", "body": "<div class=\"section\" id=\"parallel-reconstruction-using-q-ball\">\n<span id=\"example-reconst-csa-parallel\"></span><h1>Parallel reconstruction using Q-Ball<a class=\"headerlink\" href=\"#parallel-reconstruction-using-q-ball\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show an example of parallel reconstruction using a Q-Ball Constant Solid\nAngle model (see Aganj et. al (MRM 2010)) and <cite>peaks_from_model</cite>.</p>\n<p>Import modules, fetch and read data, and compute the mask.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We instantiate our CSA model with spherical harmonic order of 4</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><cite>Peaks_from_model</cite> is used to calculate properties of the ODFs (Orientation\nDistribution Function) and return for\nexample the peaks and their indices, or GFA which is similar to FA but for ODF\nbased models. This function mainly needs a reconstruction model, the data and a\nsphere as input. The sphere is an object that represents the spherical discrete\ngrid where the ODF values will be evaluated.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We will first run <cite>peaks_from_model</cite> using parallelism with 2 processes. If\n<cite>nbr_processes</cite> is None (default option) then this function will find the total\nnumber of processors from the operating system and use this number as\n<cite>nbr_processes</cite>. Sometimes it makes sense to use only a few of the processes in\norder to allow resources for other applications. However, most of the times\nusing the default option will be sufficient.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">csapeaks_parallel</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                                     <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                                     <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                     <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                     <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                     <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                                     <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                     <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_parallel</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model using 2 processes ran in : &quot;</span> <span class=\"o\">+</span>\n      <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_parallel</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>peaks_from_model using 2 process ran in  : 114.333221912 seconds, using 2\nprocess</p>\n<p>If we don&#8217;t use parallelism then we need to set <cite>parallel=False</cite>:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                            <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                            <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                            <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_single</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model ran in : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>peaks_from_model ran in : 196.872478008 seconds</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Speedup factor : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span> <span class=\"o\">/</span> <span class=\"n\">time_parallel</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Speedup factor : 1.72191839533</p>\n<p>In Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal\"><span class=\"pre\">main</span></code> function and use:</p>\n<dl class=\"docutils\">\n<dt>if __name__ == &#8216;__main__&#8217;:</dt>\n<dd>import multiprocessing\nmultiprocessing.freeze_support()\nmain()</dd>\n</dl>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_csa_parallel.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "parents": [], "metatags": "", "title": "Parallel reconstruction using Q-Ball", "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parallel reconstruction using Q-Ball</a></li>\n</ul>\n", "current_page_name": "examples_built/reconst_csa_parallel", "next": null, "meta": {}, "rellinks": [["genindex", "General Index", "I", "index"]], "display_toc": false, "sourcename": "examples_built/reconst_csa_parallel.txt", "customsidebar": null}