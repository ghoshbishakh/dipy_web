{"page_source_suffix": ".rst", "prev": null, "alabaster_version": "0.7.7", "body": "<div class=\"section\" id=\"reconstruct-with-generalized-q-sampling-imaging\">\n<span id=\"example-reconst-gqi\"></span><h1>Reconstruct with Generalized Q-Sampling Imaging<a class=\"headerlink\" href=\"#reconstruct-with-generalized-q-sampling-imaging\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to apply Generalized Q-Sampling Imaging <a class=\"reference internal\" href=\"#yeh2010\" id=\"id1\">[Yeh2010]</a>\nto diffusion MRI datasets. You can think of GQI as an analytical version of\nDSI orientation distribution function (ODF) (Garyfallidis, PhD thesis, 2012).</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.gqi</span> <span class=\"k\">import</span> <span class=\"n\">GeneralizedQSamplingModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a GradientTable\nobject (gradient information e.g. b-values). For example to read the b-values\nit is possible to write print(gtab.bvals).</p>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60,</span> <span class=\"pre\">203)</span></code></p>\n<p>This dataset has anisotropic voxel sizes, therefore reslicing is necessary.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Read the voxel size from the image header.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Instantiate the Model and apply it to the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">gqmodel</span> <span class=\"o\">=</span> <span class=\"n\">GeneralizedQSamplingModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sampling_length</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The parameter <cite>sampling_length</cite> is used here to</p>\n<p>Lets just use one slice only from the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">dataslice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">dataslice</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span>\n\n<span class=\"n\">gqfit</span> <span class=\"o\">=</span> <span class=\"n\">gqmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Load an odf reconstruction sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Calculate the ODFs with this specific sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">ODF</span> <span class=\"o\">=</span> <span class=\"n\">gqfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ODF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ODF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>ODF.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">724)</span></code></p>\n<p>Using peaks_from_model we can find the main peaks of the ODFs and other\nproperties.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">gqpeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">gqmodel</span><span class=\"p\">,</span>\n                           <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">dataslice</span><span class=\"p\">,</span>\n                           <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                           <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                           <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                           <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                           <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                           <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">gqpeak_values</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span>\n</pre></div>\n</div>\n<p>gqpeak_indices show which sphere points have the maximum values.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">gqpeak_indices</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">peak_indices</span>\n</pre></div>\n</div>\n<p>It is also possible to calculate GFA.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GFA.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>With parameter <cite>return_odf=True</cite> we can obtain the ODF using gqpeaks.ODF</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">gqpeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">gqmodel</span><span class=\"p\">,</span>\n                           <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">dataslice</span><span class=\"p\">,</span>\n                           <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                           <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                           <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                           <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                           <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                           <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This ODF will be of course identical to the ODF calculated above as long as the same\ndata and mask are used.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">odf</span> <span class=\"o\">!=</span> <span class=\"n\">ODF</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>True</p>\n<p>The advantage of using peaks_from_models is that it calculates the ODF only once and\nsaves it or deletes if it is not necessary to keep.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"yeh2010\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Yeh2010]</a></td><td>Yeh, F-C et al., Generalized Q-sampling imaging, IEEE\nTransactions on Medical Imaging, vol 29, no 9, 2010.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_gqi.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "parents": [], "metatags": "", "title": "Reconstruct with Generalized Q-Sampling Imaging", "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Generalized Q-Sampling Imaging</a></li>\n</ul>\n", "current_page_name": "examples_built/reconst_gqi", "next": null, "meta": {}, "rellinks": [["genindex", "General Index", "I", "index"]], "display_toc": false, "sourcename": "examples_built/reconst_gqi.txt", "customsidebar": null}