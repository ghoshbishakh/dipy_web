{"page_source_suffix": ".rst", "prev": null, "alabaster_version": "0.7.7", "body": "<div class=\"section\" id=\"brain-segmentation-with-median-otsu\">\n<span id=\"example-brain-extraction-dwi\"></span><h1>Brain segmentation with median_otsu<a class=\"headerlink\" href=\"#brain-segmentation-with-median-otsu\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to extract brain information and mask from a b0 image using dipy&#8217;s\nsegment.mask module.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial.</p>\n<p>The scil_b0 dataset contains different data from different companies and\nmodels. For this example, the data comes from a 1.5 tesla Siemens MRI.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.data.fetcher</span> <span class=\"k\">import</span> <span class=\"n\">fetch_scil_b0</span><span class=\"p\">,</span> <span class=\"n\">read_siemens_scil_b0</span>\n<span class=\"n\">fetch_scil_b0</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">read_siemens_scil_b0</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">img</span></code> contains a nibabel Nifti1Image object. Data is the actual brain data as\na numpy ndarray.</p>\n<p>Segment the brain using dipy&#8217;s mask module.</p>\n<p><code class=\"docutils literal\"><span class=\"pre\">median_otsu</span></code> returns the segmented brain data and a binary mask of the brain.\nIt is possible to fine tune the parameters of <code class=\"docutils literal\"><span class=\"pre\">median_otsu</span></code> (<code class=\"docutils literal\"><span class=\"pre\">median_radius</span></code>\nand <code class=\"docutils literal\"><span class=\"pre\">num_pass</span></code>) if extraction yields incorrect results but the default\nparameters work well on most volumes. For this example, we used 2 as\n<code class=\"docutils literal\"><span class=\"pre\">median_radius</span></code> and 1 as <code class=\"docutils literal\"><span class=\"pre\">num_pass</span></code></p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Saving the segmentation results is very easy using nibabel. We need the b0_mask,\nand the binary mask volumes. The affine matrix which transform the image&#8217;s\ncoordinates to the world coordinates is also needed. Here, we choose to save\nboth images in float32.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">mask_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n<span class=\"n\">b0_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">b0_mask</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;se_1.5t&#39;</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_img</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_binary_mask.nii.gz&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">b0_img</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_mask.nii.gz&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Quick view of the results middle slice using matplotlib.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.histeq</span> <span class=\"k\">import</span> <span class=\"n\">histeq</span>\n\n<span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;Brain segmentation&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">histeq</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>\n           <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">histeq</span><span class=\"p\">(</span><span class=\"n\">b0_mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>\n           <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;median_otsu.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"examples_built/median_otsu.png\" src=\"examples_built/median_otsu.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>An application of median_otsu for brain segmentation</strong>.</span></p>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">median_otsu</span></code> can also automatically crop the outputs to remove the largest\npossible number of background voxels. This makes outputted data significantly\nsmaller.  auto cropping in <code class=\"docutils literal\"><span class=\"pre\">median_otsu</span></code> is activated by setting the\n<code class=\"docutils literal\"><span class=\"pre\">autocrop</span></code> parameter to True.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">b0_mask_crop</span><span class=\"p\">,</span> <span class=\"n\">mask_crop</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Saving cropped data using nibabel as demonstrated previously.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">mask_img_crop</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask_crop</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n<span class=\"n\">b0_img_crop</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span>\n    <span class=\"n\">b0_mask_crop</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_img_crop</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_binary_mask_crop.nii.gz&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">b0_img_crop</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_mask_crop.nii.gz&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/brain_extraction_dwi.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "parents": [], "metatags": "", "title": "Brain segmentation with median_otsu", "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Brain segmentation with median_otsu</a></li>\n</ul>\n", "current_page_name": "examples_built/brain_extraction_dwi", "next": null, "meta": {}, "rellinks": [["genindex", "General Index", "I", "index"]], "display_toc": false, "sourcename": "examples_built/brain_extraction_dwi.txt", "customsidebar": null}