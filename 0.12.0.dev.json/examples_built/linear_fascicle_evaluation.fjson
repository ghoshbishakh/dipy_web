{"page_source_suffix": ".rst", "prev": null, "alabaster_version": "0.7.7", "body": "<div class=\"section\" id=\"linear-fascicle-evaluation-life\">\n<span id=\"example-linear-fascicle-evaluation\"></span><h1>Linear fascicle evaluation (LiFE)<a class=\"headerlink\" href=\"#linear-fascicle-evaluation-life\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Evaluating the results of tractography algorithms is one of the biggest\nchallenges for diffusion MRI. One proposal for evaluation of tractography\nresults is to use a forward model that predicts the signal from each of a set of\nstreamlines, and then fit a linear model to these simultaneous predictions\n<a class=\"reference internal\" href=\"#pestilli2014\" id=\"id1\">[Pestilli2014]</a>.</p>\n<p>We will use streamlines generated using probabilistic tracking on CSA\npeaks. For brevity, we will include in this example only streamlines going\nthrough the corpus callosum connecting left to right superior frontal\ncortex. The process of tracking and finding these streamlines is fully\ndemonstrated in the <cite>streamline_tools.py</cite> example. If this example has been\nrun, we can read the streamlines from file. Otherwise, we&#8217;ll run that example\nfirst, by importing it. This provides us with all of the variables that were\ncreated in that example:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os.path</span> <span class=\"k\">as</span> <span class=\"nn\">op</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.core.optimize</span> <span class=\"k\">as</span> <span class=\"nn\">opt</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">&#39;lr-superiorfrontal.trk&#39;</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">streamline_tools</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># We&#39;ll need to know where the corpus callosum is from these variables:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">read_stanford_labels</span><span class=\"p\">,</span>\n                           <span class=\"n\">fetch_stanford_t1</span><span class=\"p\">,</span>\n                           <span class=\"n\">read_stanford_t1</span><span class=\"p\">)</span>\n    <span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">labels_img</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">()</span>\n    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n    <span class=\"n\">cc_slice</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"n\">fetch_stanford_t1</span><span class=\"p\">()</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_t1</span><span class=\"p\">()</span>\n    <span class=\"n\">t1_data</span> <span class=\"o\">=</span> <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"c1\"># Read the candidates from file in voxel space:</span>\n<span class=\"n\">candidate_sl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">&#39;lr-superiorfrontal.trk&#39;</span><span class=\"p\">,</span>\n                                                  <span class=\"n\">points_space</span><span class=\"o\">=</span><span class=\"s1\">&#39;voxel&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n</pre></div>\n</div>\n<p>The streamlines that are entered into the model are termed &#8216;candidate\nstreamliness&#8217; (or a &#8216;candidate connectome&#8217;):</p>\n<p>Let&#8217;s visualize the initial candidate group of streamlines in 3D, relative to the\nanatomical structure of this brain:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz.colormap</span> <span class=\"k\">import</span> <span class=\"n\">line_colors</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"n\">candidate_streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">,</span>\n                                       <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">))</span>\n<span class=\"n\">cc_ROI_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">contour</span><span class=\"p\">(</span><span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">)],</span>\n                            <span class=\"n\">opacities</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">])</span>\n\n<span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add display objects to canvas</span>\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">candidate_streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;life_candidates.png&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"examples_built/life_candidates.png\" src=\"examples_built/life_candidates.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Candidate connectome before life optimization</strong></span></p>\n</div>\n<p>Next, we initialize a LiFE model. We import the <cite>dipy.tracking.life</cite> module,\nwhich contains the classes and functions that implement the model:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">dipy.tracking.life</span> <span class=\"k\">as</span> <span class=\"nn\">life</span>\n<span class=\"n\">fiber_model</span> <span class=\"o\">=</span> <span class=\"n\">life</span><span class=\"o\">.</span><span class=\"n\">FiberModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Since we read the streamlines from a file, already in the voxel space, we do not\nneed to transform them into this space. Otherwise, if the streamline coordinates\nwere in the world space (relative to the scanner iso-center, or relative to the\nmid-point of the AC-PC-connecting line), we would use this:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">inv_affine</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>the inverse transformation from world space to the voxel space as the affine for\nthe following model fit.</p>\n<p>The next step is to fit the model, producing a <cite>FiberFit</cite> class instance, that\nstores the data, as well as the results of the fitting procedure.</p>\n<p>The LiFE model posits that the signal in the diffusion MRI volume can be\nexplained by the streamlines, by the equation</p>\n<div class=\"math\">\n\\[y = X\\beta\\]</div>\n<p>Where <span class=\"math\">\\(y\\)</span> is the diffusion MRI signal, <span class=\"math\">\\(\\beta\\)</span> are a set of weights on the\nstreamlines and <span class=\"math\">\\(X\\)</span> is a design matrix. This matrix has the dimensions <span class=\"math\">\\(m\\)</span> by\n<span class=\"math\">\\(n\\)</span>, where <span class=\"math\">\\(m=n_{voxels} \\cdot n_{directions}\\)</span>, and <span class=\"math\">\\(n_{voxels}\\)</span> is the set of\nvoxels in the ROI that contains the streamlines considered in this model. The\n<span class=\"math\">\\(i^{th}\\)</span> column of the matrix contains the expected contributions of the\n<span class=\"math\">\\(i^{th}\\)</span> streamline (arbitrarly ordered) to each of the voxels. <span class=\"math\">\\(X\\)</span> is a sparse\nmatrix, because each streamline traverses only a small percentage of the\nvoxels. The  expected contributions of the streamline are calculated using a\nforward model, where each node of the streamline is modeled as a cylindrical\nfiber compartment with Gaussian diffusion, using the diffusion tensor model. See\n<a class=\"reference internal\" href=\"#pestilli2014\" id=\"id2\">[Pestilli2014]</a> for more detail on the model, and variations of this model.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fiber_fit</span> <span class=\"o\">=</span> <span class=\"n\">fiber_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">candidate_sl</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The <cite>FiberFit</cite> class instance holds various properties of the model fit. For\nexample, it has the weights <span class=\"math\">\\(\\beta\\)</span>, that are assigned to each streamline. In\nmost cases, a tractography through some region will include redundant\nstreamlines, and these streamlines will have <span class=\"math\">\\(\\beta_i\\)</span> that are 0.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">histtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;step&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fiber weights&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;# fibers&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;beta_histogram.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"examples_built/beta_histogram.png\" src=\"examples_built/beta_histogram.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>LiFE streamline weights</strong></span></p>\n</div>\n<p>We use <span class=\"math\">\\(\\beta\\)</span> to filter out these redundant streamlines, and generate an\noptimized group of streamlines:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">optimized_sl</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">)[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">optimized_sl</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">optimized_sl</span><span class=\"p\">)))</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;life_optimized.png&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"examples_built/life_optimized.png\" src=\"examples_built/life_optimized.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Streamlines selected via LiFE optimization</strong></span></p>\n</div>\n<p>The new set of streamlines should do well in fitting the data, and redundant\nstreamlines have presumably been removed (in this case, about 50% of the\nstreamlines).</p>\n<p>But how well does the model do in explaining the diffusion data? We can\nquantify that: the <cite>FiberFit</cite> class instance has a <cite>predict</cite> method, which can\nbe used to invert the model and predict back either the data that was used to\nfit the model, or other unseen data (e.g. in cross-validation, see\n<span class=\"xref std std-ref\">kfold_xval</span>).</p>\n<p>Without arguments, the <cite>.predict()</cite> method will predict the diffusion signal\nfor the same gradient table that was used in the fit data, but <cite>gtab</cite> and <cite>S0</cite>\nkey-word arguments can be used to predict for other acquisition schemes and\nother baseline non-diffusion-weighted signals.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">model_predict</span> <span class=\"o\">=</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We will focus on the error in prediction of the diffusion-weighted data, and\ncalculate the root of the mean squared error.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">model_error</span> <span class=\"o\">=</span> <span class=\"n\">model_predict</span> <span class=\"o\">-</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">model_rmse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">model_error</span><span class=\"p\">[:,</span> <span class=\"mi\">10</span><span class=\"p\">:]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>As a baseline against which we can compare, we calculate another error term. In\nthis case, we assume that the weight for each streamline is equal\nto zero. This produces the naive prediction of the mean of the signal in each\nvoxel.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">beta_baseline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">pred_weighted</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">spdot</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">life_matrix</span><span class=\"p\">,</span> <span class=\"n\">beta_baseline</span><span class=\"p\">),</span>\n                                     <span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                                      <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">)))</span>\n<span class=\"n\">mean_pred</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvals</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">S0</span> <span class=\"o\">=</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">b0_signal</span>\n</pre></div>\n</div>\n<p>Since the fitting is done in the demeaned S/S0 domain, we need\nto add back the mean and then multiply by S0 in every voxel:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">mean_pred</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">S0</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">mean_pred</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span>\\\n        <span class=\"p\">(</span><span class=\"n\">pred_weighted</span> <span class=\"o\">+</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">mean_signal</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">S0</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">mean_error</span> <span class=\"o\">=</span> <span class=\"n\">mean_pred</span> <span class=\"o\">-</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">mean_rmse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">mean_error</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>First, we can compare the overall distribution of errors between these two\nalternative models of the ROI. We show the distribution of differences in error\n(improvement through model fitting, relative to the baseline model). Here,\npositive values denote an improvement in error with model fit, relative to\nwithout the model fit.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">mean_rmse</span> <span class=\"o\">-</span> <span class=\"n\">model_rmse</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">histtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;step&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span><span class=\"s1\">&#39;Median RMSE, mean model: </span><span class=\"si\">%.2f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">mean_rmse</span><span class=\"p\">),</span>\n     <span class=\"n\">horizontalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span>\n     <span class=\"n\">verticalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span><span class=\"s1\">&#39;Median RMSE, LiFE: </span><span class=\"si\">%.2f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">model_rmse</span><span class=\"p\">),</span>\n     <span class=\"n\">horizontalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span>\n     <span class=\"n\">verticalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;RMS Error&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;# voxels&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;error_histograms.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id7\">\n<img alt=\"examples_built/error_histograms.png\" src=\"examples_built/error_histograms.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Improvement in error with fitting of the LiFE model</strong>.</span></p>\n</div>\n<p>Second, we can show the spatial distribution of the two error terms,\nand of the improvement with the model fit:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">vol_model</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_model</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n          <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n          <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">model_rmse</span>\n<span class=\"n\">vol_mean</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_mean</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">mean_rmse</span>\n<span class=\"n\">vol_improve</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_improve</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">mean_rmse</span> <span class=\"o\">-</span> <span class=\"n\">model_rmse</span>\n<span class=\"n\">sl_idx</span> <span class=\"o\">=</span> <span class=\"mi\">49</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpl_toolkits.axes_grid1</span> <span class=\"k\">import</span> <span class=\"n\">AxesGrid</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">subplots_adjust</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">AxesGrid</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span>\n              <span class=\"n\">nrows_ncols</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n              <span class=\"n\">label_mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">share_all</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_location</span><span class=\"o\">=</span><span class=\"s2\">&quot;top&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;each&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;10%&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_pad</span><span class=\"o\">=</span><span class=\"s2\">&quot;5%&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_model</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">hot</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_mean</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">hot</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_improve</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">RdBu</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">lax</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">lax</span><span class=\"o\">.</span><span class=\"n\">set_xticks</span><span class=\"p\">([])</span>\n    <span class=\"n\">lax</span><span class=\"o\">.</span><span class=\"n\">set_yticks</span><span class=\"p\">([])</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;spatial_errors.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id8\">\n<img alt=\"examples_built/spatial_errors.png\" src=\"examples_built/spatial_errors.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Spatial distribution of error and improvement</strong></span></p>\n</div>\n<p>This image demonstrates that in many places, fitting the LiFE model results in\nsubstantial reduction of the error.</p>\n<p>Note that for full-brain tractographies <em>LiFE</em> can require large amounts of\nmemory. For detailed memory profiling of the algorithm, based on the\nstreamlines generated in <a class=\"reference internal\" href=\"../probabilistic_fiber_tracking/#example-probabilistic-fiber-tracking\"><span class=\"std std-ref\">An introduction to the Probabilistic Direction Getter</span></a>, see <a class=\"reference external\" href=\"http://nbviewer.ipython.org/gist/arokem/bc29f34ebc97510d9def\">this\nIPython notebook</a>.</p>\n<p>For the Matlab implementation of LiFE, head over to <a class=\"reference external\" href=\"http://francopestilli.github.io/life/\">Franco Pestilli&#8217;s github\nwebpage</a>.</p>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"docutils citation\" frame=\"void\" id=\"pestilli2014\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Pestilli2014]</td><td><em>(<a class=\"fn-backref\" href=\"#id1\">1</a>, <a class=\"fn-backref\" href=\"#id2\">2</a>)</em> Pestilli, F., Yeatman, J, Rokem, A. Kay, K. and Wandell\nB.A. (2014). Validation and statistical inference in living\nconnectomes. Nature Methods 11:\n1058-1063. doi:10.1038/nmeth.3098</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/linear_fascicle_evaluation.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n</div>\n", "parents": [], "metatags": "", "title": "Linear fascicle evaluation (LiFE)", "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Linear fascicle evaluation (LiFE)</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "current_page_name": "examples_built/linear_fascicle_evaluation", "next": null, "meta": {}, "rellinks": [["genindex", "General Index", "I", "index"]], "display_toc": true, "sourcename": "examples_built/linear_fascicle_evaluation.txt", "customsidebar": null}