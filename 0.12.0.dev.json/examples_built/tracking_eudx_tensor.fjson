{"page_source_suffix": ".rst", "prev": null, "alabaster_version": "0.7.7", "body": "<div class=\"section\" id=\"deterministic-tracking-with-eudx-on-tensor-fields\">\n<span id=\"example-tracking-eudx-tensor\"></span><h1>Deterministic Tracking with EuDX on Tensor Fields<a class=\"headerlink\" href=\"#deterministic-tracking-with-eudx-on-tensor-fields\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In this example we do deterministic fiber tracking on Tensor fields with EuDX\n<a class=\"reference internal\" href=\"../../reference/dipy.segment/#id23\" id=\"id1\">[Garyfallidis12]</a>.</p>\n<p>This example requires to import example <cite>reconst_dti.py</cite> to run. EuDX was\nprimarily made with cpu efficiency in mind. Therefore, it should be useful to\ngive you a quick overview of your reconstruction results with the help of\ntracking.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_fa.nii.gz&#39;</span><span class=\"p\">):</span>\n      <span class=\"kn\">import</span> <span class=\"nn\">reconst_dti</span>\n</pre></div>\n</div>\n<p>EuDX will use the directions (eigen vectors) of the Tensors to propagate\nstreamlines from voxel to voxel and fractional anisotropy to stop tracking.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fa_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_fa.nii.gz&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">FA</span> <span class=\"o\">=</span> <span class=\"n\">fa_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">evecs_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_evecs.nii.gz&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">evecs</span> <span class=\"o\">=</span> <span class=\"n\">evecs_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>In the background of the image the fitting will not be accurate because there all\nmeasured signal is mostly noise and possibly we will find FA values with nans\n(not a number). We can easily remove these in the following way.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">FA</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>EuDX takes as input discretized voxel directions on a unit sphere. Therefore,\nit is necessary to discretize the eigen vectors before feeding them in EuDX.</p>\n<p>For the discretization procedure we use an evenly distributed sphere of 724\npoints which we can access using the get_sphere function.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We use quantize_evecs (evecs here stands for eigen vectors) to apply the\ndiscretization.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">import</span> <span class=\"n\">quantize_evecs</span>\n\n<span class=\"n\">peak_indices</span> <span class=\"o\">=</span> <span class=\"n\">quantize_evecs</span><span class=\"p\">(</span><span class=\"n\">evecs</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>EuDX is the fiber tracking algorithm that we use in this example.\nThe most important parameters are the first one which represents the\nmagnitude of the peak of a scalar anisotropic function, the\nsecond which represents the indices of the discretized directions of\nthe peaks and odf_vertices are the vertices of the input sphere.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.eudx</span> <span class=\"k\">import</span> <span class=\"n\">EuDX</span>\n\n<span class=\"n\">eu</span> <span class=\"o\">=</span> <span class=\"n\">EuDX</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;f8&#39;</span><span class=\"p\">),</span> <span class=\"n\">peak_indices</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"o\">=</span><span class=\"mi\">50000</span><span class=\"p\">,</span> <span class=\"n\">odf_vertices</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">a_low</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">tensor_streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span> <span class=\"k\">for</span> <span class=\"n\">streamline</span> <span class=\"ow\">in</span> <span class=\"n\">eu</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We can now save the results in the disk. For this purpose we can use the\nTrackVis format (<code class=\"docutils literal\"><span class=\"pre\">*.trk</span></code>). First, we need to create a header.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">hdr</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">empty_header</span><span class=\"p\">()</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa_img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_order&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAS&#39;</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre></div>\n</div>\n<p>Then we need to input the streamlines in the way that Trackvis format expects them.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">tensor_streamlines_trk</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">sl</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">sl</span> <span class=\"ow\">in</span> <span class=\"n\">tensor_streamlines</span><span class=\"p\">)</span>\n\n<span class=\"n\">ten_sl_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tensor_streamlines.trk&#39;</span>\n</pre></div>\n</div>\n<p>Save the streamlines.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ten_sl_fname</span><span class=\"p\">,</span> <span class=\"n\">tensor_streamlines_trk</span><span class=\"p\">,</span> <span class=\"n\">hdr</span><span class=\"p\">,</span> <span class=\"n\">points_space</span><span class=\"o\">=</span><span class=\"s1\">&#39;voxel&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you don&#8217;t want to use Trackvis to visualize the file you can use our\nlightweight <cite>fvtk</cite> module.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"k\">try</span><span class=\"p\">:</span>\n      <span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Python vtk module is not installed&#39;</span><span class=\"p\">)</span>\n      <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Create a scene.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Every streamline will be coloured according to its orientation</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz.colormap</span> <span class=\"k\">import</span> <span class=\"n\">line_colors</span>\n</pre></div>\n</div>\n<p>fvtk.line adds a streamline actor for streamline visualization\nand fvtk.add adds this actor in the scene</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">tensor_streamlines</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">tensor_streamlines</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as tensor_tracks.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">ren</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tensor_tracks.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"examples_built/tensor_tracks.png\" src=\"examples_built/tensor_tracks.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Deterministic streamlines with EuDX on a Tensor Field</strong>.</span></p>\n</div>\n<table class=\"docutils citation\" frame=\"void\" id=\"garyfallidis12\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Garyfallidis12]</a></td><td>Garyfallidis E., &#8220;Towards an accurate brain tractography&#8221;, PhD thesis, University of Cambridge, 2012.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/tracking_eudx_tensor.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "parents": [], "metatags": "", "title": "Deterministic Tracking with EuDX on Tensor Fields", "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Deterministic Tracking with EuDX on Tensor Fields</a></li>\n</ul>\n", "current_page_name": "examples_built/tracking_eudx_tensor", "next": null, "meta": {}, "rellinks": [["genindex", "General Index", "I", "index"]], "display_toc": false, "sourcename": "examples_built/tracking_eudx_tensor.txt", "customsidebar": null}