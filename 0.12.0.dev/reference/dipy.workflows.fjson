{"body": "<div class=\"section\" id=\"module-dipy.workflows\">\n<span id=\"workflows\"></span><h1><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.workflows.base\">\n<span id=\"module-workflows-base\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.base</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.base\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.combined_workflow\">\n<span id=\"module-workflows-combined-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.combined_workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.combined_workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">CombinedWorkflow</span></code></a>([output_strategy,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"dipy.workflows.combined_workflow.iteritems\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.denoise\">\n<span id=\"module-workflows-denoise\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.denoise\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">NLMeansFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"dipy.workflows.denoise.estimate_sigma\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,&nbsp;...])</td>\n<td>Standard deviation estimation from local patches</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"dipy.workflows.denoise.nlmeans\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">nlmeans</span></code></a>(arr,&nbsp;sigma[,&nbsp;mask,&nbsp;patch_radius,&nbsp;...])</td>\n<td>Non-local means for denoising 3D and 4D images</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.docstring_parser\">\n<span id=\"module-workflows-docstring-parser\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.docstring_parser</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.docstring_parser\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This was taken directly from the file docscrape.py of numpydoc package.</p>\n<p>Copyright (C) 2008 Stefan van der Walt &lt;<a class=\"reference external\" href=\"mailto:stefan&#37;&#52;&#48;mentat&#46;za&#46;net\">stefan<span>&#64;</span>mentat<span>&#46;</span>za<span>&#46;</span>net</a>&gt;,\nPauli Virtanen &lt;<a class=\"reference external\" href=\"mailto:pav&#37;&#52;&#48;iki&#46;fi\">pav<span>&#64;</span>iki<span>&#46;</span>fi</a>&gt;</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">``</span></a>AS IS&#8217;&#8217; AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Reader</span></code></a>(data)</td>\n<td>A line-based string reader.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"dipy.workflows.docstring_parser.dedent_lines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">dedent_lines</span></code></a>(lines)</td>\n<td>Deindent a list of lines maximally</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"dipy.workflows.docstring_parser.warn\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.flow_runner\">\n<span id=\"module-workflows-flow-runner\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.flow_runner</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.flow_runner\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"dipy.workflows.flow_runner.get_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_level</span></code></a>(lvl)</td>\n<td>Transforms the loggin level passed on the commandline into a proper logging level name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"dipy.workflows.flow_runner.iteritems\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"dipy.workflows.flow_runner.run_flow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run_flow</span></code></a>(flow)</td>\n<td>Wraps the process of building an argparser that reflects the workflow that we want to run along with some generic parameters like logging, force and output strategies.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.multi_io\">\n<span id=\"module-workflows-multi-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.multi_io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.multi_io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IOIterator</span></code></a>([output_strategy,&nbsp;mix_names])</td>\n<td>Create output filenames that work nicely with multiple input files from</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"dipy.workflows.multi_io.basename_without_extension\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">basename_without_extension</span></code></a>(fname)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.common_start\" title=\"dipy.workflows.multi_io.common_start\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">common_start</span></code></a>(sa,&nbsp;sb)</td>\n<td>Returns the longest common substring from the beginning of sa and sb</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"dipy.workflows.multi_io.concatenate_inputs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">concatenate_inputs</span></code></a>(multi_inputs)</td>\n<td>Concatenate list of inputs</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"dipy.workflows.multi_io.connect_output_paths\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">connect_output_paths</span></code></a>(inputs,&nbsp;out_dir,&nbsp;out_files)</td>\n<td>Generates a list of output files paths based on input files and output strategies.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.glob\" title=\"dipy.workflows.multi_io.glob\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">glob</span></code></a>(pathname)</td>\n<td>Return a list of paths matching a pathname pattern.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"dipy.workflows.multi_io.io_iterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">io_iterator</span></code></a>(inputs,&nbsp;out_dir,&nbsp;fnames[,&nbsp;...])</td>\n<td>Creates an IOIterator from the parameters.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"dipy.workflows.multi_io.io_iterator_\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;...])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"dipy.workflows.multi_io.slash_to_under\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">slash_to_under</span></code></a>(dir_str)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.segment\">\n<span id=\"module-workflows-segment\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.segment</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.segment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">MedianOtsuFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_nifti\" title=\"dipy.workflows.segment.load_nifti\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;return_voxsize])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.median_otsu\" title=\"dipy.workflows.segment.median_otsu\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,&nbsp;median_radius,&nbsp;...])</td>\n<td>Simple brain extraction tool method for images from DWI data.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.save_nifti\" title=\"dipy.workflows.segment.save_nifti\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.workflow\">\n<span id=\"module-workflows-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">workflows.workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"dipy.workflows.workflow.io_iterator_\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;...])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"introspectiveargumentparser\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#introspectiveargumentparser\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>version=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'dipy.fixes.argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.fixes.argparse.ArgumentParser</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;...[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_argument_group</span></code>(*args,&nbsp;**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_description\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_description\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_description</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_epilogue</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_mutually_exclusive_group</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">error</span></code>(message:&nbsp;string)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_help</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_version</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow&#8217;s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_outputs\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.get_outputs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_outputs</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">parse_known_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_help</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_version</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.show_argument\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.show_argument\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">show_argument</span></code></a>(dest)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.update_argument\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.update_argument\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_argument</span></code></a>(*args,&nbsp;**kargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>version=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'dipy.fixes.argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>prog</strong> : None</p>\n<blockquote>\n<div><p>The name of the program (default: sys.argv[0])</p>\n</div></blockquote>\n<p><strong>usage</strong> : None</p>\n<blockquote>\n<div><p>A usage message (default: auto-generated from arguments)</p>\n</div></blockquote>\n<p><strong>description</strong> : str</p>\n<blockquote>\n<div><p>A description of what the program does</p>\n</div></blockquote>\n<p><strong>epilog</strong> : str</p>\n<blockquote>\n<div><p>Text following the argument descriptions</p>\n</div></blockquote>\n<p><strong>version</strong> : None</p>\n<blockquote>\n<div><p>Add a -v/&#8211;version option with the given version string</p>\n</div></blockquote>\n<p><strong>parents</strong> : list</p>\n<blockquote>\n<div><p>Parsers whose arguments should be copied into this one</p>\n</div></blockquote>\n<p><strong>formatter_class</strong> : obj</p>\n<blockquote>\n<div><p>HelpFormatter class for printing help messages</p>\n</div></blockquote>\n<p><strong>prefix_chars</strong> : str</p>\n<blockquote>\n<div><p>Characters that prefix optional arguments</p>\n</div></blockquote>\n<p><strong>fromfile_prefix_chars</strong> : None</p>\n<blockquote>\n<div><p>Characters that prefix files containing additional arguments</p>\n</div></blockquote>\n<p><strong>argument_default</strong> : None</p>\n<blockquote>\n<div><p>The default value for all arguments</p>\n</div></blockquote>\n<p><strong>conflict_handler</strong> : str</p>\n<blockquote>\n<div><p>String indicating how to handle conflicts</p>\n</div></blockquote>\n<p><strong>add_help</strong> : bool</p>\n<blockquote class=\"last\">\n<div><p>Add a -h/-help option</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated as\nsub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>sub_flows</strong> : array of dipy.workflows.workflow.Workflow</p>\n<blockquote>\n<div><p>Workflows to inspect.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>sub_flow_optionals</strong> : dictionary of all sub workflow optional parameters</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser&#8217;s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>workflow</strong> : dipy.workflows.workflow.Workflow</p>\n<blockquote>\n<div><p>Workflow from which to infer parameters.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>sub_flow_optionals</strong> : dictionary of all sub workflow optional parameters</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow&#8217;s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.get_outputs\">\n<code class=\"descname\">get_outputs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"numpydocstring\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#numpydocstring\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"combinedworkflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">CombinedWorkflow</span></code></a><a class=\"headerlink\" href=\"#combinedworkflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">CombinedWorkflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_optionals</span></code></a>(flow,&nbsp;**kwargs)</td>\n<td>Returns the sub flow&#8217;s optional arguments merged with those passed as params in kwargs.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>The short name is used by CombinedWorkflows and the argparser to subdivide the commandline parameters avoiding the trouble of having subworkflows parameters with the same name.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Returns a list of tuples (sub flow name, sub flow run method, sub flow short name) to be used in the sub flow parameters extraction.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code>()</td>\n<td>Since this is an abstract class, raise exception if this code is</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run_sub_flow</span></code></a>(flow,&nbsp;*args,&nbsp;**kwargs)</td>\n<td>Runs the sub flow with the optional parameters passed via the command line.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>Sets the self._optionals variable with all sub flow arguments that were passed in the commandline.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow that combines multiple workflows.\nThe workflow combined together are referred as sub flows in this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\">\n<code class=\"descname\">get_optionals</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the sub flow&#8217;s optional arguments merged with those passed\nas params in kwargs.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of tuples\n(sub flow name, sub flow run method, sub flow short name)\nto be used in the sub flow parameters extraction.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\">\n<code class=\"descname\">run_sub_flow</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the sub flow with the optional parameters passed via the\ncommand line. This is a convenience method to make sub flow running\nmore intuitive on the concrete CombinedWorkflow side.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the self._optionals variable with all sub flow arguments\nthat were passed in the commandline.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"workflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"dipy.workflows.combined_workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>The short name is used by CombinedWorkflows and the argparser to subdivide the commandline parameters avoiding the trouble of having subworkflows parameters with the same name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"dipy.workflows.combined_workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>()</td>\n<td>Since this is an abstract class, raise exception if this code is</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.set_sub_flows_optionals\" title=\"dipy.workflows.combined_workflow.Workflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame(values of local variables and other contextuals) and the\nrun method&#8217;s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name. Ex: A combined workflow with\ndti reconstruction and csd reconstruction might en up with the\nb0_threshold parameter. Using short names, we will have dti.b0_threshold\nand csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.\nIf it is bound to happen, an action is taken depending on\nself._force_overwrite (or &#8211;force via command line). A log message is\noutput independently of the outcome to tell the user something happened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This code shouldnt be reached. Raise exception.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"iteritems\">\n<h3>iteritems<a class=\"headerlink\" href=\"#iteritems\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.combined_workflow.iteritems\">\n<code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeansflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">NLMeansFlow</span></code></a><a class=\"headerlink\" href=\"#nlmeansflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">NLMeansFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"dipy.workflows.denoise.NLMeansFlow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;sigma,&nbsp;out_dir,&nbsp;out_denoised])</td>\n<td>Workflow wrapping the nlmeans denoising method.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>sigma=0</em>, <em>out_dir=''</em>, <em>out_denoised='dwi_nlmeans.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the nlmeans denoising method.</p>\n<p>It applies nlmeans denoise on each file found by &#8216;globing&#8217;\n<code class=\"docutils literal\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input_files</strong> : string</p>\n<blockquote>\n<div><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</div></blockquote>\n<p><strong>sigma</strong> : float, optional</p>\n<blockquote>\n<div><p>Sigma parameter to pass to the nlmeans algorithm\n(default: auto estimation).</p>\n</div></blockquote>\n<p><strong>out_dir</strong> : string, optional</p>\n<blockquote>\n<div><p>Output directory (default input file directory)</p>\n</div></blockquote>\n<p><strong>out_denoised</strong> : string, optional</p>\n<blockquote class=\"last\">\n<div><p>Name of the resuting denoised volume (default: dwi_nlmeans.nii.gz)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"dipy.workflows.denoise.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"dipy.workflows.denoise.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>The short name is used by CombinedWorkflows and the argparser to subdivide the commandline parameters avoiding the trouble of having subworkflows parameters with the same name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"dipy.workflows.denoise.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"dipy.workflows.denoise.Workflow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>()</td>\n<td>Since this is an abstract class, raise exception if this code is</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.set_sub_flows_optionals\" title=\"dipy.workflows.denoise.Workflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame(values of local variables and other contextuals) and the\nrun method&#8217;s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name. Ex: A combined workflow with\ndti reconstruction and csd reconstruction might en up with the\nb0_threshold parameter. Using short names, we will have dti.b0_threshold\nand csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.\nIf it is bound to happen, an action is taken depending on\nself._force_overwrite (or &#8211;force via command line). A log message is\noutput independently of the outcome to tell the user something happened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This code shouldnt be reached. Raise exception.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.estimate_sigma\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>disable_background_masking=False</em>, <em>N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be estimated</p>\n</div></blockquote>\n<p><strong>disable_background_masking</strong> : bool, default False</p>\n<blockquote>\n<div><p>If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</div></blockquote>\n<p><strong>N</strong> : int, default 0</p>\n<blockquote>\n<div><p>Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>sigma</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>standard deviation of the noise, one estimation per volume.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.nlmeans\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">nlmeans</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>sigma</em>, <em>mask=None</em>, <em>patch_radius=1</em>, <em>block_radius=5</em>, <em>rician=True</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be denoised</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<p><strong>sigma</strong> : float or 3D array</p>\n<blockquote>\n<div><p>standard deviation of the noise estimated from the data</p>\n</div></blockquote>\n<p><strong>patch_radius</strong> : int</p>\n<blockquote>\n<div><p>patch size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</div></blockquote>\n<p><strong>block_radius</strong> : int</p>\n<blockquote>\n<div><p>block size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</div></blockquote>\n<p><strong>rician</strong> : boolean</p>\n<blockquote>\n<div><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>denoised_arr</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>the denoised <code class=\"docutils literal\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal\"><span class=\"pre\">arr</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"descoteaux08\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[Descoteaux08]</a></td><td>Descoteaux, Maxim and Wiest-Daessle`, Nicolas and Prima,\nSylvain and Barillot, Christian and Deriche, Rachid\nImpact of Rician Adapted Non-Local Means Filtering on\nHARDI, MICCAI 2008</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reader\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Reader</span></code></a><a class=\"headerlink\" href=\"#reader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.Reader\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">Reader</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p>A line-based string reader.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.eof\" title=\"dipy.workflows.docstring_parser.Reader.eof\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">eof</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.is_empty\" title=\"dipy.workflows.docstring_parser.Reader.is_empty\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">is_empty</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.peek\" title=\"dipy.workflows.docstring_parser.Reader.peek\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">peek</span></code></a>([n])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.read\" title=\"dipy.workflows.docstring_parser.Reader.read\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">read</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_condition\" title=\"dipy.workflows.docstring_parser.Reader.read_to_condition\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">read_to_condition</span></code></a>(condition_func)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\" title=\"dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">read_to_next_empty_line</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\" title=\"dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">read_to_next_unindented_line</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.reset\" title=\"dipy.workflows.docstring_parser.Reader.reset\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">reset</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\" title=\"dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">seek_next_non_empty_line</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>data</strong> : str</p>\n<blockquote>\n<div><p>String with lines separated by &#8216;</p>\n</div></blockquote>\n<p class=\"last\"><strong>&#8216;.</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.eof\">\n<code class=\"descname\">eof</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.eof\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.is_empty\">\n<code class=\"descname\">is_empty</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.is_empty\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.peek\">\n<code class=\"descname\">peek</code><span class=\"sig-paren\">(</span><em>n=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read\">\n<code class=\"descname\">read</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_condition\">\n<code class=\"descname\">read_to_condition</code><span class=\"sig-paren\">(</span><em>condition_func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\">\n<code class=\"descname\">read_to_next_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\">\n<code class=\"descname\">read_to_next_unindented_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.reset\">\n<code class=\"descname\">reset</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\">\n<code class=\"descname\">seek_next_non_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dedent-lines\">\n<h3>dedent_lines<a class=\"headerlink\" href=\"#dedent-lines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.dedent_lines\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">dedent_lines</code><span class=\"sig-paren\">(</span><em>lines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deindent a list of lines maximally</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.warn\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id6\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>version=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'dipy.fixes.argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.fixes.argparse.ArgumentParser</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;...[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_argument_group</span></code>(*args,&nbsp;**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_description</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_epilogue</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_mutually_exclusive_group</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">error</span></code>(message:&nbsp;string)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_help</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">format_version</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow&#8217;s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_outputs\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_outputs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_outputs</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">parse_known_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_help</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_version</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">show_argument</span></code></a>(dest)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_argument</span></code></a>(*args,&nbsp;**kargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>version=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'dipy.fixes.argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>prog</strong> : None</p>\n<blockquote>\n<div><p>The name of the program (default: sys.argv[0])</p>\n</div></blockquote>\n<p><strong>usage</strong> : None</p>\n<blockquote>\n<div><p>A usage message (default: auto-generated from arguments)</p>\n</div></blockquote>\n<p><strong>description</strong> : str</p>\n<blockquote>\n<div><p>A description of what the program does</p>\n</div></blockquote>\n<p><strong>epilog</strong> : str</p>\n<blockquote>\n<div><p>Text following the argument descriptions</p>\n</div></blockquote>\n<p><strong>version</strong> : None</p>\n<blockquote>\n<div><p>Add a -v/&#8211;version option with the given version string</p>\n</div></blockquote>\n<p><strong>parents</strong> : list</p>\n<blockquote>\n<div><p>Parsers whose arguments should be copied into this one</p>\n</div></blockquote>\n<p><strong>formatter_class</strong> : obj</p>\n<blockquote>\n<div><p>HelpFormatter class for printing help messages</p>\n</div></blockquote>\n<p><strong>prefix_chars</strong> : str</p>\n<blockquote>\n<div><p>Characters that prefix optional arguments</p>\n</div></blockquote>\n<p><strong>fromfile_prefix_chars</strong> : None</p>\n<blockquote>\n<div><p>Characters that prefix files containing additional arguments</p>\n</div></blockquote>\n<p><strong>argument_default</strong> : None</p>\n<blockquote>\n<div><p>The default value for all arguments</p>\n</div></blockquote>\n<p><strong>conflict_handler</strong> : str</p>\n<blockquote>\n<div><p>String indicating how to handle conflicts</p>\n</div></blockquote>\n<p><strong>add_help</strong> : bool</p>\n<blockquote class=\"last\">\n<div><p>Add a -h/-help option</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated as\nsub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>sub_flows</strong> : array of dipy.workflows.workflow.Workflow</p>\n<blockquote>\n<div><p>Workflows to inspect.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>sub_flow_optionals</strong> : dictionary of all sub workflow optional parameters</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser&#8217;s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>workflow</strong> : dipy.workflows.workflow.Workflow</p>\n<blockquote>\n<div><p>Workflow from which to infer parameters.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>sub_flow_optionals</strong> : dictionary of all sub workflow optional parameters</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow&#8217;s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_outputs\">\n<code class=\"descname\">get_outputs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-level\">\n<h3>get_level<a class=\"headerlink\" href=\"#get-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.get_level\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">get_level</code><span class=\"sig-paren\">(</span><em>lvl</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the loggin level passed on the commandline into a proper\nlogging level name.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id7\">\n<h3>iteritems<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.iteritems\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"run-flow\">\n<h3>run_flow<a class=\"headerlink\" href=\"#run-flow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.run_flow\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">run_flow</code><span class=\"sig-paren\">(</span><em>flow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wraps the process of building an argparser that reflects the workflow\nthat we want to run along with some generic parameters like logging,\nforce and output strategies. The resulting parameters are then fed to\nthe workflow&#8217;s run method.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioiterator\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IOIterator</span></code></a><a class=\"headerlink\" href=\"#ioiterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.multi_io.IOIterator\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">IOIterator</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p>Create output filenames that work nicely with multiple input files from\nmultiple directories (processing multiple subjects with one command)</p>\n<p>Use information from input files, out_dir and out_fnames to generate correct\noutputs which can come from long lists of multiple or single inputs.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.create_directories\" title=\"dipy.workflows.multi_io.IOIterator.create_directories\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">create_directories</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.create_outputs\" title=\"dipy.workflows.multi_io.IOIterator.create_outputs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">create_outputs</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.set_inputs\" title=\"dipy.workflows.multi_io.IOIterator.set_inputs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_inputs</span></code></a>(*args)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_dir\" title=\"dipy.workflows.multi_io.IOIterator.set_out_dir\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_out_dir</span></code></a>(out_dir)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_fnames\" title=\"dipy.workflows.multi_io.IOIterator.set_out_fnames\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_out_fnames</span></code></a>(*args)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator.set_output_keys\" title=\"dipy.workflows.multi_io.IOIterator.set_output_keys\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_output_keys</span></code></a>(*args)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_directories\">\n<code class=\"descname\">create_directories</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_directories\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_outputs\">\n<code class=\"descname\">create_outputs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_inputs\">\n<code class=\"descname\">set_inputs</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_dir\">\n<code class=\"descname\">set_out_dir</code><span class=\"sig-paren\">(</span><em>out_dir</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_dir\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_fnames\">\n<code class=\"descname\">set_out_fnames</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_fnames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_output_keys\">\n<code class=\"descname\">set_output_keys</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_output_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"basename-without-extension\">\n<h3>basename_without_extension<a class=\"headerlink\" href=\"#basename-without-extension\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.basename_without_extension\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">basename_without_extension</code><span class=\"sig-paren\">(</span><em>fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"common-start\">\n<h3>common_start<a class=\"headerlink\" href=\"#common-start\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.common_start\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">common_start</code><span class=\"sig-paren\">(</span><em>sa</em>, <em>sb</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.common_start\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the longest common substring from the beginning of sa and sb</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"concatenate-inputs\">\n<h3>concatenate_inputs<a class=\"headerlink\" href=\"#concatenate-inputs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.concatenate_inputs\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">concatenate_inputs</code><span class=\"sig-paren\">(</span><em>multi_inputs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Concatenate list of inputs</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"connect-output-paths\">\n<h3>connect_output_paths<a class=\"headerlink\" href=\"#connect-output-paths\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.connect_output_paths\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">connect_output_paths</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>out_files</em>, <em>output_strategy='append'</em>, <em>mix_names=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates a list of output files paths based on input files and\noutput strategies.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>inputs</strong> : array</p>\n<blockquote>\n<div><blockquote>\n<div><p>List of input paths.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>out_dir</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><p class=\"first last\">The output directory.</p>\n</dd>\n<dt>out_files</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span><dd><p class=\"first last\">List of output files.</p>\n</dd>\n<dt>output_strategy</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><dl class=\"first last docutils\">\n<dt>Which strategy to use to generate the output paths.</dt>\n<dd><p class=\"first last\">&#8216;append&#8217;: Add out_dir to the path of the input.\n&#8216;prepend&#8217;: Add the input path directory tree to out_dir.\n&#8216;absolute&#8217;: Put directly in out_dir.</p>\n</dd>\n</dl>\n</dd>\n<dt>mix_names</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Whether or not prepend a string composed of a mix of the input names\nto the final output name.</p>\n</dd>\n</dl>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>A list of output file paths.</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"glob\">\n<h3>glob<a class=\"headerlink\" href=\"#glob\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.glob\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">glob</code><span class=\"sig-paren\">(</span><em>pathname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.glob\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of paths matching a pathname pattern.</p>\n<p>The pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by &#8216;*&#8217; and &#8216;?&#8217;\npatterns.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"io-iterator\">\n<h3>io_iterator<a class=\"headerlink\" href=\"#io-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>fnames</em>, <em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>out_keys=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator from the parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>inputs</strong> : array</p>\n<blockquote>\n<div><blockquote>\n<div><p>List of input files.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>out_dir</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><p class=\"first last\">Output directory.</p>\n</dd>\n<dt>fnames</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span><dd><p class=\"first last\">File names of all outputs to be created.</p>\n</dd>\n<dt>output_strategy</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Whether or not to append a mix of input names at the begining.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<blockquote class=\"last\">\n<div><p>Properly instanciated IOIterator object.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id8\">\n<h3><a href=\"#id14\"><span class=\"problematic\" id=\"id15\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='append'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>frame</strong> : frameobject</p>\n<blockquote>\n<div><blockquote>\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>fnc</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span><dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Whether or not to append a mix of input names at the begining.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<blockquote class=\"last\">\n<div><p>Properly instanciated IOIterator object.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slash-to-under\">\n<h3>slash_to_under<a class=\"headerlink\" href=\"#slash-to-under\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.slash_to_under\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">slash_to_under</code><span class=\"sig-paren\">(</span><em>dir_str</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"medianotsuflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">MedianOtsuFlow</span></code></a><a class=\"headerlink\" href=\"#medianotsuflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">MedianOtsuFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"dipy.workflows.segment.MedianOtsuFlow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;save_masked,&nbsp;...])</td>\n<td>Workflow wrapping the median_otsu segmentation method.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>save_masked=False</em>, <em>median_radius=2</em>, <em>numpass=5</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em>, <em>out_dir=''</em>, <em>out_mask='brain_mask.nii.gz'</em>, <em>out_masked='dwi_masked.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the median_otsu segmentation method.</p>\n<p>Applies median_otsu segmentation on each file found by &#8216;globing&#8217;\n<code class=\"docutils literal\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input_files</strong> : string</p>\n<blockquote>\n<div><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</div></blockquote>\n<p><strong>save_masked</strong> : bool</p>\n<blockquote>\n<div><p>Save mask</p>\n</div></blockquote>\n<p><strong>median_radius</strong> : int, optional</p>\n<blockquote>\n<div><p>Radius (in voxels) of the applied median filter (default 2)</p>\n</div></blockquote>\n<p><strong>numpass</strong> : int, optional</p>\n<blockquote>\n<div><p>Number of pass of the median filter (default 5)</p>\n</div></blockquote>\n<p><strong>autocrop</strong> : bool, optional</p>\n<blockquote>\n<div><p>If True, the masked input_volumes will also be cropped using the\nbounding box defined by the masked data. For example, if diffusion\nimages are of 1x1x1 (mm^3) or higher resolution auto-cropping could\nreduce their size in memory and speed up some of the analysis.\n(default False)</p>\n</div></blockquote>\n<p><strong>vol_idx</strong> : string, optional</p>\n<blockquote>\n<div><p>1D array representing indices of <code class=\"docutils literal\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>\n&#8216;None&#8217; (the default) corresponds to <code class=\"docutils literal\"><span class=\"pre\">(0,)</span></code> (assumes first volume\nin 4D array)</p>\n</div></blockquote>\n<p><strong>dilate</strong> : string, optional</p>\n<blockquote>\n<div><p>number of iterations for binary dilation (default &#8216;None&#8217;)</p>\n</div></blockquote>\n<p><strong>out_dir</strong> : string, optional</p>\n<blockquote>\n<div><p>Output directory (default input file directory)</p>\n</div></blockquote>\n<p><strong>out_mask</strong> : string, optional</p>\n<blockquote>\n<div><p>Name of the mask volume to be saved (default &#8216;brain_mask.nii.gz&#8217;)</p>\n</div></blockquote>\n<p><strong>out_masked</strong> : string, optional</p>\n<blockquote class=\"last\">\n<div><p>Name of the masked volume to be saved (default &#8216;dwi_masked.nii.gz&#8217;)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"dipy.workflows.segment.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"dipy.workflows.segment.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>The short name is used by CombinedWorkflows and the argparser to subdivide the commandline parameters avoiding the trouble of having subworkflows parameters with the same name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"dipy.workflows.segment.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"dipy.workflows.segment.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"dipy.workflows.segment.Workflow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>()</td>\n<td>Since this is an abstract class, raise exception if this code is</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.set_sub_flows_optionals\" title=\"dipy.workflows.segment.Workflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame(values of local variables and other contextuals) and the\nrun method&#8217;s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name. Ex: A combined workflow with\ndti reconstruction and csd reconstruction might en up with the\nb0_threshold parameter. Using short names, we will have dti.b0_threshold\nand csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.\nIf it is bound to happen, an action is taken depending on\nself._force_overwrite (or &#8211;force via command line). A log message is\noutput independently of the outcome to tell the user something happened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This code shouldnt be reached. Raise exception.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"median-otsu\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#median-otsu\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.median_otsu\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">median_otsu</code><span class=\"sig-paren\">(</span><em>input_volume</em>, <em>median_radius=4</em>, <em>numpass=4</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix&#8217;s bet which has default values\n<code class=\"docutils literal\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal\"><span class=\"pre\">numpass=4</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input_volume</strong> : ndarray</p>\n<blockquote>\n<div><p>ndarray of the brain volume</p>\n</div></blockquote>\n<p><strong>median_radius</strong> : int</p>\n<blockquote>\n<div><p>Radius (in voxels) of the applied median filter (default: 4).</p>\n</div></blockquote>\n<p><strong>numpass: int</strong> :</p>\n<blockquote>\n<div><p>Number of pass of the median filter (default: 4).</p>\n</div></blockquote>\n<p><strong>autocrop: bool, optional</strong> :</p>\n<blockquote>\n<div><p>if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</div></blockquote>\n<p><strong>vol_idx</strong> : None or array, optional</p>\n<blockquote>\n<div><p>1D array representing indices of <code class=\"docutils literal\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite> None\n(the default) corresponds to <code class=\"docutils literal\"><span class=\"pre\">(0,)</span></code> (assumes first volume in\n4D array).</p>\n</div></blockquote>\n<p><strong>dilate</strong> : None or int, optional</p>\n<blockquote>\n<div><p>number of iterations for binary dilation</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>maskedvolume</strong> : ndarray</p>\n<blockquote>\n<div><p>Masked input_volume</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<blockquote class=\"last\">\n<div><p>The binary brain mask</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n<li>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id10\"><span class=\"problematic\" id=\"id11\">``</span></a>AS IS&#8217;&#8217; AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id12\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Use a couple of inspection tricks to build an IOIterator using the previous frame(values of local variables and other contextuals) and the run method&#8217;s docstring.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"dipy.workflows.workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>The short name is used by CombinedWorkflows and the argparser to subdivide the commandline parameters avoiding the trouble of having subworkflows parameters with the same name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"dipy.workflows.workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">run</span></code></a>()</td>\n<td>Since this is an abstract class, raise exception if this code is</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.set_sub_flows_optionals\" title=\"dipy.workflows.workflow.Workflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>This code shouldnt be reached.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The basic workflow object, it takes care of any workflow operation that\nis common. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame(values of local variables and other contextuals) and the\nrun method&#8217;s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name. Ex: A combined workflow with\ndti reconstruction and csd reconstruction might en up with the\nb0_threshold parameter. Using short names, we will have dti.b0_threshold\nand csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.\nIf it is bound to happen, an action is taken depending on\nself._force_overwrite (or &#8211;force via command line). A log message is\noutput independently of the outcome to tell the user something happened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This code shouldnt be reached. Raise exception.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id13\">\n<h3><a href=\"#id16\"><span class=\"problematic\" id=\"id17\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.workflow.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='append'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>frame</strong> : frameobject</p>\n<blockquote>\n<div><blockquote>\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>fnc</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span><dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span><dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Whether or not to append a mix of input names at the begining.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<blockquote class=\"last\">\n<div><p>Properly instanciated IOIterator object.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": true, "title": "<code class=\"docutils literal\"><span class=\"pre\">workflows</span></code>", "sourcename": "reference/dipy.workflows.txt", "customsidebar": null, "metatags": "", "current_page_name": "reference/dipy.workflows", "next": null, "rellinks": [["genindex", "General Index", "I", "index"]], "meta": {}, "parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal\"><span class=\"pre\">workflows</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.base\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.base</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.combined_workflow\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.combined_workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.denoise\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.denoise</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.docstring_parser\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.docstring_parser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.flow_runner\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.flow_runner</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.multi_io\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.multi_io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.segment\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.segment</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.workflow\">Module: <code class=\"docutils literal\"><span class=\"pre\">workflows.workflow</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#introspectiveargumentparser\"><code class=\"docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#numpydocstring\"><code class=\"docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#combinedworkflow\"><code class=\"docutils literal\"><span class=\"pre\">CombinedWorkflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#workflow\"><code class=\"docutils literal\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iteritems\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeansflow\"><code class=\"docutils literal\"><span class=\"pre\">NLMeansFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id3\"><code class=\"docutils literal\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#id5\"><code class=\"docutils literal\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reader\"><code class=\"docutils literal\"><span class=\"pre\">Reader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dedent-lines\">dedent_lines</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id6\"><code class=\"docutils literal\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-level\">get_level</a></li>\n<li><a class=\"reference internal\" href=\"#id7\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#run-flow\">run_flow</a></li>\n<li><a class=\"reference internal\" href=\"#ioiterator\"><code class=\"docutils literal\"><span class=\"pre\">IOIterator</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#basename-without-extension\">basename_without_extension</a></li>\n<li><a class=\"reference internal\" href=\"#common-start\">common_start</a></li>\n<li><a class=\"reference internal\" href=\"#concatenate-inputs\">concatenate_inputs</a></li>\n<li><a class=\"reference internal\" href=\"#connect-output-paths\">connect_output_paths</a></li>\n<li><a class=\"reference internal\" href=\"#glob\">glob</a></li>\n<li><a class=\"reference internal\" href=\"#io-iterator\">io_iterator</a></li>\n<li><a class=\"reference internal\" href=\"#id8\">io_iterator_</a></li>\n<li><a class=\"reference internal\" href=\"#slash-to-under\">slash_to_under</a></li>\n<li><a class=\"reference internal\" href=\"#medianotsuflow\"><code class=\"docutils literal\"><span class=\"pre\">MedianOtsuFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id9\"><code class=\"docutils literal\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#median-otsu\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id12\"><code class=\"docutils literal\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id13\">io_iterator_</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}