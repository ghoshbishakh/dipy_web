<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"module-dipy.align\">\n<span id=\"align\"></span><h1><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align</span></code><a class=\"headerlink\" href=\"#module-dipy.align\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.align.imaffine\">\n<span id=\"module-align-imaffine\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.imaffine</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imaffine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Affine image registration module consisting of the following classes:</p>\n<dl class=\"docutils\">\n<dt>AffineMap: encapsulates the necessary information to perform affine</dt>\n<dd>transforms between two domains, defined by a <cite>static</cite> and a <cite>moving</cite>\nimage. The <cite>domain</cite> of the transform is the set of points in the\n<cite>static</cite> image&#8217;s grid, and the <cite>codomain</cite> is the set of points in\nthe <cite>moving</cite> image. When we call the <cite>transform</cite> method, <cite>AffineMap</cite>\nmaps each point <cite>x</cite> of the domain (<cite>static</cite> grid) to the codomain\n(<cite>moving</cite> grid) and interpolates the <cite>moving</cite> image at that point\nto obtain the intensity value to be placed at <cite>x</cite> in the resulting\ngrid. The <cite>transform_inverse</cite> method performs the opposite operation\nmapping points in the codomain to points in the domain.</dd>\n<dt>ParzenJointHistogram: computes the marginal and joint distributions of</dt>\n<dd>intensities of a pair of images, using Parzen windows [Parzen62]\nwith a cubic spline kernel, as proposed by Mattes et al. [Mattes03].\nIt also computes the gradient of the joint histogram w.r.t. the\nparameters of a given transform.</dd>\n<dt>MutualInformationMetric: computes the value and gradient of the mutual</dt>\n<dd>information metric the way <cite>Optimizer</cite> needs them. That is, given\na set of transform parameters, it will use <cite>ParzenJointHistogram</cite>\nto compute the value and gradient of the joint intensity histogram\nevaluated at the given parameters, and evaluate the the value and\ngradient of the histogram&#8217;s mutual information.</dd>\n<dt>AffineRegistration: it runs the multi-resolution registration, putting</dt>\n<dd>all the pieces together. It needs to create the scale space of the\nimages and run the multi-resolution registration by using the Metric\nand the Optimizer at each level of the Gaussian pyramid. At each\nlevel, it will setup the metric to compute value and gradient of the\nmetric with the input images with different levels of smoothing.</dd>\n</dl>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"docutils\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt>\n<dd>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt>\n<dd>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</dd>\n</dl>\n</div>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineMap</span></code></a>(affine[,&nbsp;domain_grid_shape,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,&nbsp;level_iters,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,&nbsp;factors,&nbsp;sigmas)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Optimizer</span></code></a>(fun,&nbsp;x0[,&nbsp;args,&nbsp;method,&nbsp;jac,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a></td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_centers_of_mass\" title=\"dipy.align.imaffine.align_centers_of_mass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_centers_of_mass</span></code></a>(static,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_geometric_centers\" title=\"dipy.align.imaffine.align_geometric_centers\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_geometric_centers</span></code></a>(static,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_origins\" title=\"dipy.align.imaffine.align_origins\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_origins</span></code></a>(static,&nbsp;static_grid2world,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"dipy.align.imaffine.compute_parzen_mi\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_parzen_mi</span></code></a></td>\n<td>Computes the mutual information and its gradient (if requested)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"dipy.align.imaffine.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,&nbsp;dim)</td>\n<td>Extracts the rotational and spacing components from a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"dipy.align.imaffine.sample_domain_regular\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">sample_domain_regular</span></code></a></td>\n<td>Take floor(total_voxels/k) samples from a (2D or 3D) grid</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"dipy.align.imaffine.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,&nbsp;...)</td>\n<td>Transformation to align the center of mass of the input images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"dipy.align.imaffine.transform_geometric_centers\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_geometric_centers</span></code></a>(static,&nbsp;...)</td>\n<td>Transformation to align the geometric center of the input images</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_origins\" title=\"dipy.align.imaffine.transform_origins\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_origins</span></code></a>(static,&nbsp;static_grid2world,&nbsp;...)</td>\n<td>Transformation to align the origins of the input images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.warn\" title=\"dipy.align.imaffine.warn\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.imwarp\">\n<span id=\"module-align-imwarp\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.imwarp</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imwarp\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Classes and functions for Symmetric Diffeomorphic Registration</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,&nbsp;disp_shape[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a>([metric])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"dipy.align.imwarp.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,&nbsp;dim)</td>\n<td>Extracts the rotational and spacing components from a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.mult_aff\" title=\"dipy.align.imwarp.mult_aff\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">mult_aff</span></code></a>(A,&nbsp;B)</td>\n<td>Returns the matrix product A.dot(B) considering None as the identity</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.with_metaclass\" title=\"dipy.align.imwarp.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.metrics\">\n<span id=\"module-align-metrics\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.metrics</span></code><a class=\"headerlink\" href=\"#module-dipy.align.metrics\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Metrics for Symmetric Diffeomorphic Registration</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">CCMetric</span></code></a>(dim[,&nbsp;sigma_diff,&nbsp;radius])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">EMMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;step_type])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a>(dim)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.gradient\" title=\"dipy.align.metrics.gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">gradient</span></code></a>(f,&nbsp;*varargs,&nbsp;**kwargs)</td>\n<td>Return the gradient of an N-dimensional array.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"dipy.align.metrics.v_cycle_2d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">v_cycle_2d</span></code></a>(n,&nbsp;k,&nbsp;delta_field,&nbsp;...[,&nbsp;depth])</td>\n<td>Multi-resolution Gauss-Seidel solver using V-type cycles</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"dipy.align.metrics.v_cycle_3d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">v_cycle_3d</span></code></a>(n,&nbsp;k,&nbsp;delta_field,&nbsp;...[,&nbsp;depth])</td>\n<td>Multi-resolution Gauss-Seidel solver using V-type cycles</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.with_metaclass\" title=\"dipy.align.metrics.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.reslice\">\n<span id=\"module-align-reslice\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.reslice</span></code><a class=\"headerlink\" href=\"#module-dipy.align.reslice\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.Pool\" title=\"dipy.align.reslice.Pool\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Pool</span></code></a>([processes,&nbsp;initializer,&nbsp;initargs,&nbsp;...])</td>\n<td>Returns a process pool object</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.affine_transform\" title=\"dipy.align.reslice.affine_transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">affine_transform</span></code></a>(input,&nbsp;matrix[,&nbsp;offset,&nbsp;...])</td>\n<td>Apply an affine transformation.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.cpu_count\" title=\"dipy.align.reslice.cpu_count\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">cpu_count</span></code></a>()</td>\n<td>Returns the number of CPUs in the system</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.reslice\" title=\"dipy.align.reslice.reslice\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">reslice</span></code></a>(data,&nbsp;affine,&nbsp;zooms,&nbsp;new_zooms[,&nbsp;...])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal\"><span class=\"pre\">new_zooms</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.scalespace\">\n<span id=\"module-align-scalespace\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.scalespace</span></code><a class=\"headerlink\" href=\"#module-dipy.align.scalespace\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,&nbsp;factors,&nbsp;sigmas)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.streamlinear\">\n<span id=\"module-align-streamlinear\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.streamlinear</span></code><a class=\"headerlink\" href=\"#module-dipy.align.streamlinear\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Minimum Distance aka BMD</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Minimum Distance aka BMD</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Sum Distance aka BMD</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Optimizer</span></code></a>(fun,&nbsp;x0[,&nbsp;args,&nbsp;method,&nbsp;jac,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a>([num_threads])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,&nbsp;x0,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a>(matopt,&nbsp;xopt,&nbsp;...)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"dipy.align.streamlinear.bundle_min_distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_min_distance</span></code></a>(t,&nbsp;static,&nbsp;moving)</td>\n<td>MDF-based pairwise distance optimization function (MIN)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_fast\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_min_distance_fast</span></code></a>(t,&nbsp;static,&nbsp;moving,&nbsp;...)</td>\n<td>MDF-based pairwise distance optimization function (MIN)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"dipy.align.streamlinear.bundle_sum_distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_sum_distance</span></code></a>(t,&nbsp;static,&nbsp;moving[,&nbsp;...])</td>\n<td>MDF distance optimization function (SUM)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"dipy.align.streamlinear.center_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">center_streamlines</span></code></a>(streamlines)</td>\n<td>Move streamlines to the origin</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"dipy.align.streamlinear.compose_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_matrix</span></code></a>([scale,&nbsp;shear,&nbsp;angles,&nbsp;...])</td>\n<td>Return 4x4 transformation matrix from sequence of transformations.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"dipy.align.streamlinear.compose_matrix44\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_matrix44</span></code></a>(t[,&nbsp;dtype])</td>\n<td>Compose a 4x4 transformation matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"dipy.align.streamlinear.compose_transformations\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_transformations</span></code></a>(*mats)</td>\n<td>Compose multiple 4x4 affine transformations in one 4x4 matrix</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"dipy.align.streamlinear.decompose_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">decompose_matrix</span></code></a>(matrix)</td>\n<td>Return sequence of transformations from transformation matrix.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"dipy.align.streamlinear.decompose_matrix44\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">decompose_matrix44</span></code></a>(mat[,&nbsp;size])</td>\n<td>Given a 4x4 homogeneous matrix return the parameter vector</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"dipy.align.streamlinear.distance_matrix_mdf\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance_matrix_mdf</span></code></a></td>\n<td>Minimum direct flipped distance matrix between two streamline sets</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"dipy.align.streamlinear.transform_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,&nbsp;mat)</td>\n<td>Apply affine transformation to streamlines</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"dipy.align.streamlinear.unlist_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">unlist_streamlines</span></code></a>(streamlines)</td>\n<td>Return the streamlines not as a list but as an array and an offset</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.with_metaclass\" title=\"dipy.align.streamlinear.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bunch\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#bunch\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.Bunch\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.</code><code class=\"descname\">Bunch</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.Bunch.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A &#8216;bunch&#8217; of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"floating\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#floating\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.floating\">\n<code class=\"descclassname\">dipy.align.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineinversionerror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a><a class=\"headerlink\" href=\"#affineinversionerror\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineInversionError\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineInversionError</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.Exception\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">exceptions.Exception</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineInversionError.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>x.__init__(...) initializes x; see help(type(x)) for signature</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineMap</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"dipy.align.imaffine.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_affine</span></code></a>(affine)</td>\n<td>Sets the affine transform (operating in physical space)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"dipy.align.imaffine.AffineMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interp,&nbsp;image_grid2world,&nbsp;...])</td>\n<td>Transforms the input image from co-domain to domain space</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"dipy.align.imaffine.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interp,&nbsp;...])</td>\n<td>Transforms the input image from domain to co-domain space</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x&#8217;, y&#8217;, z&#8217;)\nin moving image&#8217;s world coordinates. Finally, (x&#8217;, y&#8217;, z&#8217;) is mapped\nto voxel coordinates (i&#8217;, j&#8217;, k&#8217;) in the moving image by multiplying\n(x&#8217;, y&#8217;, z&#8217;) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote>\n<div><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</div></blockquote>\n<p><strong>domain_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</div></blockquote>\n<p><strong>domain_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>codomain_grid_shape</strong> : sequence of integers, shape (dim,)</p>\n<blockquote>\n<div><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</div></blockquote>\n<p><strong>codomain_grid2world</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote class=\"last\">\n<div><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.set_affine\">\n<code class=\"descname\">set_affine</code><span class=\"sig-paren\">(</span><em>affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the affine transform (operating in physical space)</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote class=\"last\">\n<div><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from co-domain to domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (X, Y) or (X, Y, Z)</p>\n<blockquote>\n<div><p>the image to be transformed</p>\n</div></blockquote>\n<p><strong>interp</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>sampling_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</div></blockquote>\n<p><strong>sampling_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</div></blockquote>\n<p><strong>resample_only</strong> : Boolean, optional</p>\n<blockquote>\n<div><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<p><strong>transformed</strong> : array, shape <cite>sampling_grid_shape</cite> or</p>\n<blockquote class=\"last\">\n<div><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from domain to co-domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (X, Y) or (X, Y, Z)</p>\n<blockquote>\n<div><p>the image to be transformed</p>\n</div></blockquote>\n<p><strong>interp</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>sampling_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</div></blockquote>\n<p><strong>sampling_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</div></blockquote>\n<p><strong>resample_only</strong> : Boolean, optional</p>\n<blockquote>\n<div><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<p><strong>transformed</strong> : array, shape <cite>sampling_grid_shape</cite> or</p>\n<blockquote class=\"last\">\n<div><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"dipy.align.imaffine.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving,&nbsp;transform,&nbsp;params0)</td>\n<td>Starts the optimization process</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the AffineRegistration class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : None or object, optional</p>\n<blockquote>\n<div><p>an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</div></blockquote>\n<p><strong>level_iters</strong> : sequence, optional</p>\n<blockquote>\n<div><p>the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : sequence of floats, optional</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</div></blockquote>\n<p><strong>factors</strong> : sequence of floats, optional</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</div></blockquote>\n<p><strong>method</strong> : string, optional</p>\n<blockquote>\n<div><p>optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is &#8216;L-BFGS-B&#8217;.</p>\n</div></blockquote>\n<p><strong>ss_sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</div></blockquote>\n<p><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong> :</p>\n<blockquote class=\"last\">\n<div><p>Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>3</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">print as much information as possible to isolate the cause</span><dd><p class=\"first last\">of a bug.</p>\n</dd>\n</dl>\n<p>Default: 1</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.docstring_addendum\">\n<code class=\"descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>transform</em>, <em>params0</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as reference during optimization.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S&#8217;, R&#8217;, C&#8217;) or (R&#8217;, C&#8217;)</p>\n<blockquote>\n<div><p>the image to be used as &#8220;moving&#8221; during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by &#8220;pre-aligning&#8221; the moving image towards the\nstatic using an affine transformation given by the\n&#8216;starting_affine&#8217; matrix</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>params0</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</div></blockquote>\n<p><strong>starting_affine</strong> : string, or matrix, or None, optional</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>If string:</dt>\n<dd><p class=\"first last\">&#8216;mass&#8217;: align centers of gravity\n&#8216;voxel-origin&#8217;: align physical coordinates of voxel (0,0,0)\n&#8216;centers&#8217;: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt>\n<dd><p class=\"first last\">array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt>\n<dd><p class=\"first last\">Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine resulting affine transformation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"isotropicscalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#isotropicscalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>factors</strong> : list of floats</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : list of floats</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"dipy.align.imaffine.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance</span></code></a>(params)</td>\n<td>Numeric value of the negative Mutual Information</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance_and_gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric and its gradient at given parameters</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric&#8217;s gradient at the given parameters</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"dipy.align.imaffine.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a>(transform,&nbsp;static,&nbsp;moving[,&nbsp;...])</td>\n<td>Prepares the metric to compute intensity densities and gradients</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the Mutual Information metric</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>nbins</strong> : int, optional</p>\n<blockquote>\n<div><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</div></blockquote>\n<p><strong>sampling_proportion</strong> : None or float in interval (0, 1], optional</p>\n<blockquote class=\"last\">\n<div><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>neg_mi</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\">\n<code class=\"descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>neg_mi</strong> : float</p>\n<blockquote>\n<div><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</div></blockquote>\n<p><strong>neg_mi_grad</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the negative Mutual Information</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.gradient\">\n<code class=\"descname\">gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric&#8217;s gradient at the given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>grad</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the negative Mutual Information</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>transform</em>, <em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute intensity densities and gradients</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>transform: instance of Transform</strong> :</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S&#8217;, R&#8217;, C&#8217;) or (R&#8217;, C&#8217;)</p>\n<blockquote>\n<div><p>moving image. The dimensions of the static (S, R, C) and moving\n(S&#8217;, R&#8217;, C&#8217;) images do not need to be the same.</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</div></blockquote>\n<p><strong>starting_affine</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote class=\"last\">\n<div><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optimizer\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#optimizer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.Optimizer\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">Optimizer</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer.print_summary\" title=\"dipy.align.imaffine.Optimizer.print_summary\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_summary</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>fun</strong> : callable</p>\n<blockquote>\n<div><p>Objective function.</p>\n</div></blockquote>\n<p><strong>x0</strong> : ndarray</p>\n<blockquote>\n<div><p>Initial guess.</p>\n</div></blockquote>\n<p><strong>args</strong> : tuple, optional</p>\n<blockquote>\n<div><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</div></blockquote>\n<p><strong>method</strong> : str, optional</p>\n<blockquote>\n<div><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8216;Nelder-Mead&#8217;</li>\n<li>&#8216;Powell&#8217;</li>\n<li>&#8216;CG&#8217;</li>\n<li>&#8216;BFGS&#8217;</li>\n<li>&#8216;Newton-CG&#8217;</li>\n<li>&#8216;Anneal&#8217;</li>\n<li>&#8216;L-BFGS-B&#8217;</li>\n<li>&#8216;TNC&#8217;</li>\n<li>&#8216;COBYLA&#8217;</li>\n<li>&#8216;SLSQP&#8217;</li>\n<li>&#8216;dogleg&#8217;</li>\n<li>&#8216;trust-ncg&#8217;</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n<p><strong>jac</strong> : bool or callable, optional</p>\n<blockquote>\n<div><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</div></blockquote>\n<p><strong>hess, hessp</strong> : callable, optional</p>\n<blockquote>\n<div><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : sequence, optional</p>\n<blockquote>\n<div><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</div></blockquote>\n<p><strong>constraints</strong> : dict or sequence of dict, optional</p>\n<blockquote>\n<div><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>type</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span><dd><p class=\"first last\">Constraint type: &#8216;eq&#8217; for equality, &#8216;ineq&#8217; for inequality.</p>\n</dd>\n<dt>fun</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span><dd><p class=\"first last\">The function defining the constraint.</p>\n</dd>\n<dt>jac</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable, optional</span><dd><p class=\"first last\">The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, optional</span><dd><p class=\"first last\">Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</div></blockquote>\n<p><strong>tol</strong> : float, optional</p>\n<blockquote>\n<div><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</div></blockquote>\n<p><strong>callback</strong> : callable, optional</p>\n<blockquote>\n<div><p>Called after each iteration, as <code class=\"docutils literal\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>maxiter</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span><dd><p class=\"first last\">Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(&#8216;minimize&#8217;, method)</cite>.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : bool, optional</p>\n<blockquote class=\"last\">\n<div><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">scipy.optimize.minimize</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.evolution\">\n<code class=\"descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.fopt\">\n<code class=\"descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.message\">\n<code class=\"descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.nfev\">\n<code class=\"descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.nit\">\n<code class=\"descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.print_summary\">\n<code class=\"descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.xopt\">\n<code class=\"descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"parzenjointhistogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a><a class=\"headerlink\" href=\"#parzenjointhistogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">ParzenJointHistogram</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_index</span></code></a></td>\n<td>Bin index associated with the given normalized intensity</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_normalize_moving</span></code></a></td>\n<td>Maps intensity x to the range covered by the moving histogram</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_normalize_static</span></code></a></td>\n<td>Maps intensity x to the range covered by the static histogram</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"dipy.align.imaffine.ParzenJointHistogram.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a></td>\n<td>Compute histogram settings to store the PDF of input images</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_gradient_dense</span></code></a></td>\n<td>Computes the Gradient of the joint PDF w.r.t.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_gradient_sparse</span></code></a></td>\n<td>Computes the Gradient of the joint PDF w.r.t.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_pdfs_dense</span></code></a></td>\n<td>Computes the Probability Density Functions of two images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_pdfs_sparse</span></code></a></td>\n<td>Computes the Probability Density Functions from a set of samples</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes joint histogram and derivatives with Parzen windows</p>\n<p>Base class to compute joint and marginal probability density\nfunctions and their derivatives with respect to a transform&#8217;s\nparameters. The smooth histograms are computed by using Parzen\nwindows [Parzen62] with a cubic spline kernel, as proposed by\nMattes et al. [Mattes03]. This implementation is not tied to any\noptimization (registration) method, the idea is that\ninformation-theoretic matching functionals (such as Mutual\nInformation) can inherit from this class to perform the low-level\ncomputations of the joint intensity distributions and its gradient\nw.r.t. the transform parameters. The derived class can then compute\nthe similarity/dissimilarity measure and gradient, and finally\ncommunicate the results to the appropriate optimizer.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>nbins</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of bins of the joint and marginal probability density\nfunctions (the actual number of bins of the joint PDF is nbins**2)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>We need this class in cython to allow _joint_pdf_gradient_dense_2d and\n_joint_pdf_gradient_dense_3d to use a nogil Jacobian function (obtained\nfrom an instance of the Transform class), which allows us to evaluate\nJacobians at all the sampling points (maybe the full grid) inside a\nnogil loop.</p>\n<p>The reason we need a class is to encapsulate all the parameters related\nto the joint and marginal distributions.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt>\n<dd>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt>\n<dd>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\">\n<code class=\"descname\">bin_index</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bin index associated with the given normalized intensity</p>\n<p>The return value is an integer in [padding, nbins - 1 - padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote>\n<div><p>intensity value normalized to the range covered by the histogram</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>bin</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the bin index associated with the given normalized intensity</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\">\n<code class=\"descname\">bin_normalize_moving</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the moving histogram</p>\n<p>If the input intensity is in [self.mmin, self.mmax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>x</strong> : float</p>\n<blockquote>\n<div><p>the intensity to be normalized</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>normalized intensity to the range covered by the moving histogram</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\">\n<code class=\"descname\">bin_normalize_static</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the static histogram</p>\n<p>If the input intensity is in [self.smin, self.smax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>x</strong> : float</p>\n<blockquote>\n<div><p>the intensity to be normalized</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>normalized intensity to the range covered by the static histogram</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute histogram settings to store the PDF of input images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, the behaviour is equivalent to smask=ones_like(static)</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, the behaviour is equivalent to mmask=ones_like(static)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\">\n<code class=\"descname\">update_gradient_dense</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>theta</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters of the transformation to compute the gradient from</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>grid2world</strong> : array, shape (4, 4)</p>\n<blockquote>\n<div><p>we assume that both images have already been sampled at a common\ngrid. This transform must map voxel coordinates of this common grid\nto physical coordinates of its corresponding voxel in the moving\nimage. For example, if the moving image was sampled on the static\nimage&#8217;s grid (this is the typical setting) using an aligning\nmatrix A, then</p>\n<ol class=\"arabic simple\">\n<li>grid2world = A.dot(static_affine)</li>\n</ol>\n<p>where static_affine is the transformation mapping static image&#8217;s\ngrid coordinates to physical space.</p>\n</div></blockquote>\n<p><strong>mgradient</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array, shape (S, R, C), optional</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array, shape (S, R, C), optional</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\">\n<code class=\"descname\">update_gradient_sparse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  gradient\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>theta</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters to compute the gradient at</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>sval</strong> : array, shape (m,)</p>\n<blockquote>\n<div><p>sampled intensities from the static image at sampled_points</p>\n</div></blockquote>\n<p><strong>mval</strong> : array, shape (m,)</p>\n<blockquote>\n<div><p>sampled intensities from the moving image at sampled_points</p>\n</div></blockquote>\n<p><strong>sample_points</strong> : array, shape (m, 3)</p>\n<blockquote>\n<div><p>coordinates (in physical space) of the points the images were\nsampled at</p>\n</div></blockquote>\n<p><strong>mgradient</strong> : array, shape (m, 3)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the moving image at the sample points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\">\n<code class=\"descname\">update_pdfs_dense</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions of two images</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, ones_like(static) is used as mask.</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array, shape (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, ones_like(moving) is used as mask.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\">\n<code class=\"descname\">update_pdfs_sparse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions from a set of samples</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  distributions\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>sval</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>sampled intensities from the static image at sampled_points</p>\n</div></blockquote>\n<p><strong>mval</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>sampled intensities from the moving image at sampled_points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"scalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#scalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"dipy.align.imaffine.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"dipy.align.imaffine.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"dipy.align.imaffine.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"dipy.align.imaffine.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"dipy.align.imaffine.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"dipy.align.imaffine.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-centers-of-mass\">\n<h3>align_centers_of_mass<a class=\"headerlink\" href=\"#align-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_centers_of_mass\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_centers_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-geometric-centers\">\n<h3>align_geometric_centers<a class=\"headerlink\" href=\"#align-geometric-centers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_geometric_centers\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_geometric_centers</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-origins\">\n<h3>align_origins<a class=\"headerlink\" href=\"#align-origins\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_origins\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_origins</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"compute-parzen-mi\">\n<h3>compute_parzen_mi<a class=\"headerlink\" href=\"#compute-parzen-mi\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.compute_parzen_mi\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">compute_parzen_mi</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the mutual information and its gradient (if requested)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>joint</strong> : array, shape (nbins, nbins)</p>\n<blockquote>\n<div><p>the joint intensity distribution</p>\n</div></blockquote>\n<p><strong>joint_gradient</strong> : array, shape (nbins, nbins, n)</p>\n<blockquote>\n<div><p>the gradient of the joint distribution w.r.t. the transformation\nparameters</p>\n</div></blockquote>\n<p><strong>smarginal</strong> : array, shape (nbins,)</p>\n<blockquote>\n<div><p>the marginal intensity distribution of the static image</p>\n</div></blockquote>\n<p><strong>mmarginal</strong> : array, shape (nbins,)</p>\n<blockquote>\n<div><p>the marginal intensity distribution of the moving image</p>\n</div></blockquote>\n<p><strong>mi_gradient</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the buffer in which to write the gradient of the mutual information.\nIf None, the gradient is not computed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-direction-and-spacings\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#get-direction-and-spacings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.get_direction_and_spacings\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image&#8217;s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient&#8217;s component by the voxel size along the corresponding\naxis, that&#8217;s what the spacings are used for. Since the image&#8217;s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (k, k), k = 3, 4</p>\n<blockquote>\n<div><p>the matrix transforming grid coordinates to physical space.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>direction</strong> : array, shape (k-1, k-1)</p>\n<blockquote>\n<div><p>the rotational component of the input matrix</p>\n</div></blockquote>\n<p><strong>spacings</strong> : array, shape (k-1,)</p>\n<blockquote class=\"last\">\n<div><p>the scaling component (voxel size) of the matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sample-domain-regular\">\n<h3>sample_domain_regular<a class=\"headerlink\" href=\"#sample-domain-regular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.sample_domain_regular\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">sample_domain_regular</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take floor(total_voxels/k) samples from a (2D or 3D) grid</p>\n<p>The sampling is made by taking all pixels whose index (in lexicographical\norder) is a multiple of k. Each selected point is slightly perturbed by\nadding a realization of a normally distributed random variable and then\nmapped to physical space by the given grid-to-space transform.</p>\n<p>The lexicographical order of a pixels in a grid of shape (a, b, c) is\ndefined by assigning to each voxel position (i, j, k) the integer index</p>\n<p>F((i, j, k)) = i * (b * c) + j * (c) + k</p>\n<p>and sorting increasingly by this index.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the sampling rate, as described before</p>\n</div></blockquote>\n<p><strong>shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the shape of the grid to be sampled</p>\n</div></blockquote>\n<p><strong>grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the grid-to-space transform</p>\n</div></blockquote>\n<p><strong>sigma</strong> : float</p>\n<blockquote>\n<div><p>the standard deviation of the Normal random distortion to be applied\nto the sampled points</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>samples</strong> : array, shape (total_pixels//k, dim)</p>\n<blockquote class=\"last\">\n<div><p>the matrix whose rows are the sampled points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_centers_of_mass\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-geometric-centers\">\n<h3>transform_geometric_centers<a class=\"headerlink\" href=\"#transform-geometric-centers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_geometric_centers\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_geometric_centers</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the geometric center of the input images</p>\n<p>With &#8220;geometric center&#8221; of a volume we mean the physical coordinates of\nits central voxel</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe geometric center of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-origins\">\n<h3>transform_origins<a class=\"headerlink\" href=\"#transform-origins\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_origins\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_origins</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the origins of the input images</p>\n<p>With &#8220;origin&#8221; of a volume we mean the physical coordinates of\nvoxel (0,0,0)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe origin of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.warn\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id1\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.Bunch\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">Bunch</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.Bunch.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A &#8216;bunch&#8217; of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"dipy.align.imwarp.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">allocate</span></code></a>()</td>\n<td>Creates a zero displacement field</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_inversion_error</span></code></a>()</td>\n<td>Inversion error of the displacement fields</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">expand_fields</span></code></a>(expand_factors,&nbsp;new_shape)</td>\n<td>Expands the displacement fields from current shape to new_shape</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_backward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the backward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_forward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the forward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_simplified_transform</span></code></a>()</td>\n<td>Constructs a simplified version of this Diffeomorhic Map</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">interpret_matrix</span></code></a>(obj)</td>\n<td>Try to interpret <cite>obj</cite> as a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">inverse</span></code></a>()</td>\n<td>Inverse of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">shallow_copy</span></code></a>()</td>\n<td>Shallow copy of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interpolation,&nbsp;...])</td>\n<td>Warps an image in the forward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interpolation,&nbsp;...])</td>\n<td>Warps an image in the backward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">warp_endomorphism</span></code></a>(phi)</td>\n<td>Composition of this DiffeomorphicMap with a given endomorphism</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int, 2 or 3</p>\n<blockquote>\n<div><p>the transformation&#8217;s dimension</p>\n</div></blockquote>\n<p><strong>disp_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the deformation\nfield&#8217;s discretization</p>\n</div></blockquote>\n<p><strong>disp_grid2world</strong> : the voxel-to-space transform between the def. fields</p>\n<blockquote>\n<div><p>grid and space</p>\n</div></blockquote>\n<p><strong>domain_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the default\ndiscretizatio of this map&#8217;s domain</p>\n</div></blockquote>\n<p><strong>domain_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the default voxel-to-space transformation between this map&#8217;s\ndiscretization and physical space</p>\n</div></blockquote>\n<p><strong>codomain_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the images that\nare &#8216;normally&#8217; warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is &#8216;normally&#8217; used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</div></blockquote>\n<p><strong>codomain_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of images that are &#8216;normally&#8217;\nwarped using this transformation (in the forward direction).</p>\n</div></blockquote>\n<p><strong>prealign</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote class=\"last\">\n<div><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.allocate\">\n<code class=\"descname\">allocate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>residual</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</div></blockquote>\n<p><strong>stats</strong> : array, shape (3,)</p>\n<blockquote class=\"last\">\n<div><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\">\n<code class=\"descname\">expand_fields</code><span class=\"sig-paren\">(</span><em>expand_factors</em>, <em>new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>expand_factors</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</div></blockquote>\n<p><strong>new_shape</strong> : array, shape (dim,)</p>\n<blockquote class=\"last\">\n<div><p>the shape of the arrays holding the up-sampled discretization</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\">\n<code class=\"descname\">get_backward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the &#8216;is_inverse&#8217;\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\">\n<code class=\"descname\">get_forward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the &#8216;is_inverse&#8217;\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\">\n<code class=\"descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em>obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the &#8216;identity&#8217; string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>obj</strong> : object</p>\n<blockquote>\n<div><p>any object</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>obj</strong> : object</p>\n<blockquote class=\"last\">\n<div><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the &#8216;identity&#8217; string.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.inverse\">\n<code class=\"descname\">inverse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>inv</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the inverse of this diffeomorphic map.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\">\n<code class=\"descname\">shallow_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_map</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the shallow copy of this diffeomorphic map</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the &#8220;is_inverse&#8221; flag to switch between &#8220;forward&#8221;\nand &#8220;backward&#8221; (if is_inverse is False, then transform(...) warps the\nimage forwards, else it warps the image backwards).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</p>\n<blockquote>\n<div><p>the image to be warped under this transformation in the forward\ndirection</p>\n</div></blockquote>\n<p><strong>interpolation</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used for warping, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</div></blockquote>\n<p><strong>out_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices, rows and columns of the desired warped image</p>\n</div></blockquote>\n<p><strong>out_grid2world</strong> : the transformation bringing voxel coordinates of the</p>\n<blockquote>\n<div><p>warped image to physical space</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>warped</strong> : array, shape = out_shape or self.codomain_shape if None</p>\n<blockquote class=\"last\">\n<div><p>the warped image under this transformation in the forward direction</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the &#8220;is_inverse&#8221; flag to switch between &#8220;forward&#8221;\nand &#8220;backward&#8221; (if is_inverse is False, then transform_inverse(...)\nwarps the image backwards, else it warps the image forwards)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</p>\n<blockquote>\n<div><p>the image to be warped under this transformation in the forward\ndirection</p>\n</div></blockquote>\n<p><strong>interpolation</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used for warping, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</div></blockquote>\n<p><strong>out_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices, rows and columns of the desired warped image</p>\n</div></blockquote>\n<p><strong>out_grid2world</strong> : the transformation bringing voxel coordinates of the</p>\n<blockquote>\n<div><p>warped image to physical space</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>warped</strong> : array, shape = out_shape or self.codomain_shape if None</p>\n<blockquote class=\"last\">\n<div><p>warped image under this transformation in the backward direction</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em>phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi&#8217;s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self&#8217;s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>phi</strong> : DiffeomorphicMap object</p>\n<blockquote>\n<div><p>the endomorphism to be warped by this diffeomorphic map</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>composition</strong> : the composition of this diffeomorphic map with the</p>\n<blockquote class=\"last\">\n<div><p>endomorphism given as input</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants&#8217; mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">DiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_map</span></code></a>()</td>\n<td>Returns the resulting diffeomorphic map after optimization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>()</td>\n<td>Starts the metric optimization</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_level_iters</span></code></a>(level_iters)</td>\n<td>Sets the number of iterations at each pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffeomorphic Registration</p>\n<p>This abstract class defines the interface to be implemented by any\noptimization algorithm for diffeomorphic registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : SimilarityMetric object</p>\n<blockquote class=\"last\">\n<div><p>the object measuring the similarity of the two images. The\nregistration algorithm will minimize (or maximize) the provided\nsimilarity.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\">\n<code class=\"descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map after optimization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the metric optimization</p>\n<p>This is the main function each specialized class derived from this must\nimplement. Upon completion, the deformation field must be available\nfrom the forward transformation model.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\">\n<code class=\"descname\">set_level_iters</code><span class=\"sig-paren\">(</span><em>level_iters</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the number of iterations at each pyramid level</p>\n<p>Establishes the maximum number of iterations to be performed at each\nlevel of the Gaussian pyramid, similar to ANTS.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level_iters</strong> : list</p>\n<blockquote class=\"last\">\n<div><p>the number of iterations at each level of the Gaussian pyramid.\nlevel_iters[0] corresponds to the finest level, level_iters[n-1]\nthe coarsest, where n is the length of the list</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id2\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"dipy.align.imwarp.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"dipy.align.imwarp.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"dipy.align.imwarp.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"dipy.align.imwarp.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"dipy.align.imwarp.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"dipy.align.imwarp.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_map</span></code></a>()</td>\n<td>Returns the resulting diffeomorphic map Returns the DiffeomorphicMap registering the moving image towards the static image.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving[,&nbsp;...])</td>\n<td>Starts the optimization</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_level_iters</span></code>(level_iters)</td>\n<td>Sets the number of iterations at each pyramid level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update</span></code></a>(current_displacement,&nbsp;...)</td>\n<td>Composition of the current displacement field with the given field</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : SimilarityMetric object</p>\n<blockquote>\n<div><p>the metric to be optimized</p>\n</div></blockquote>\n<p><strong>level_iters</strong> : list of int</p>\n<blockquote>\n<div><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</div></blockquote>\n<p><strong>opt_tol</strong> : float</p>\n<blockquote>\n<div><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</div></blockquote>\n<p><strong>inv_iter</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</div></blockquote>\n<p><strong>step_length</strong> : float</p>\n<blockquote>\n<div><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</div></blockquote>\n<p><strong>ss_sigma_factor</strong> : float</p>\n<blockquote>\n<div><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, ..., n_scales is the scale</p>\n</div></blockquote>\n<p><strong>inv_tol</strong> : float</p>\n<blockquote>\n<div><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</div></blockquote>\n<p><strong>callback</strong> : function(SymmetricDiffeomorphicRegistration)</p>\n<blockquote class=\"last\">\n<div><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map\nReturns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as &#8220;moving&#8221; during optimization. Since the\ndeformation fields&#8217; discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by &#8220;pre-aligning&#8221; the moving image towards the\nstatic using an affine transformation given by the &#8216;prealign&#8217;\nmatrix</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated to the static image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated to the moving image</p>\n</div></blockquote>\n<p><strong>prealign</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>static_to_ref</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"descname\">update</code><span class=\"sig-paren\">(</span><em>current_displacement</em>, <em>new_displacement</em>, <em>disp_world2grid</em>, <em>time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>current_displacement</strong> : array, shape (R&#8217;, C&#8217;, 2) or (S&#8217;, R&#8217;, C&#8217;, 3)</p>\n<blockquote>\n<div><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</div></blockquote>\n<p><strong>new_displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote>\n<div><p>the displacement field to be warped by current_displacement</p>\n</div></blockquote>\n<p><strong>disp_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the space-to-grid transform associated with the displacements&#8217;\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</div></blockquote>\n<p><strong>time_scaling</strong> : float</p>\n<blockquote>\n<div><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>updated</strong> : array, shape (the same as new_displacement)</p>\n<blockquote>\n<div><p>the warped displacement field</p>\n</div></blockquote>\n<p class=\"last\"><strong>mean_norm</strong> : the mean norm of all vectors in current_displacement</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imwarp.floating\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.imwarp.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id4\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.get_direction_and_spacings\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image&#8217;s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient&#8217;s component by the voxel size along the corresponding\naxis, that&#8217;s what the spacings are used for. Since the image&#8217;s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (k, k), k = 3, 4</p>\n<blockquote>\n<div><p>the matrix transforming grid coordinates to physical space.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>direction</strong> : array, shape (k-1, k-1)</p>\n<blockquote>\n<div><p>the rotational component of the input matrix</p>\n</div></blockquote>\n<p><strong>spacings</strong> : array, shape (k-1,)</p>\n<blockquote class=\"last\">\n<div><p>the scaling component (voxel size) of the matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mult-aff\">\n<h3>mult_aff<a class=\"headerlink\" href=\"#mult-aff\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.mult_aff\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">mult_aff</code><span class=\"sig-paren\">(</span><em>A</em>, <em>B</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.mult_aff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the matrix product A.dot(B) considering None as the identity</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>A</strong> : array, shape (n,k)</p>\n<p><strong>B</strong> : array, shape (k,m)</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>The matrix product A.dot(B). If any of the input matrices is None, it is</strong> :</p>\n<p class=\"last\"><strong>treated as the identity matrix. If both matrices are None, None is returned</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"with-metaclass\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#with-metaclass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.with_metaclass\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.CCMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">CCMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"dipy.align.metrics.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"dipy.align.metrics.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the moving image towards the static.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"dipy.align.metrics.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"dipy.align.metrics.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>Numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"dipy.align.metrics.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>sigma_diff</strong> : the standard deviation of the Gaussian smoothing kernel to</p>\n<blockquote>\n<div><p>be applied to the update field at each iteration</p>\n</div></blockquote>\n<p><strong>radius</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.EMMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">EMMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"dipy.align.metrics.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"dipy.align.metrics.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for EM metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"dipy.align.metrics.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"dipy.align.metrics.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"dipy.align.metrics.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"dipy.align.metrics.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the moving image.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>smooth</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</div></blockquote>\n<p><strong>inner_iter</strong> : int</p>\n<blockquote>\n<div><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</div></blockquote>\n<p><strong>q_levels</strong> : number of quantization levels (equal to the number of hidden</p>\n<blockquote>\n<div><p>variables in the EM algorithm)</p>\n</div></blockquote>\n<p><strong>double_gradient</strong> : boolean</p>\n<blockquote>\n<div><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</div></blockquote>\n<p><strong>step_type</strong> : string (&#8216;gauss_newton&#8217;, &#8216;demons&#8217;)</p>\n<blockquote class=\"last\">\n<div><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Demons step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Newton step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion</dt>\n<dd>estimation: combining highest accuracy with real-time\nperformance&#8221;, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\">\n<code class=\"descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_moving_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia &#8216;set_moving_image(...)&#8217;, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\">\n<code class=\"descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_static_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia &#8216;set_static_image(...)&#8217;, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SSDMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"dipy.align.metrics.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"dipy.align.metrics.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for SSD metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"dipy.align.metrics.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"dipy.align.metrics.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Nothing to free for the SSD metric</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"dipy.align.metrics.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"dipy.align.metrics.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>smooth</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</div></blockquote>\n<p><strong>inner_iter</strong> : int</p>\n<blockquote>\n<div><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</div></blockquote>\n<p><strong>step_type</strong> : string</p>\n<blockquote class=\"last\">\n<div><p>the displacement field step to be computed when &#8216;compute_forward&#8217;\nand &#8216;compute_backward&#8217; are called. Either &#8216;demons&#8217; or\n&#8216;gauss_newton&#8217;</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Demons step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt>\n<dd>Nicholas Ayache, &#8220;Diffeomorphic Demons: Efficient\nNon-parametric Image Registration&#8221;, Neuroimage 2009</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape = static_image.shape + (3,)</p>\n<blockquote class=\"last\">\n<div><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"similaritymetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a><a class=\"headerlink\" href=\"#similaritymetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SimilarityMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">SimilarityMetric</code><span class=\"sig-paren\">(</span><em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"dipy.align.metrics.SimilarityMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"dipy.align.metrics.SimilarityMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"dipy.align.metrics.SimilarityMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Releases the resources no longer needed by the metric</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"dipy.align.metrics.SimilarityMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>Numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_above\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code></a>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_below\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code></a>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"dipy.align.metrics.SimilarityMetric.set_moving_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code></a>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"dipy.align.metrics.SimilarityMetric.set_static_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code></a>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Similarity Metric abstract class</p>\n<p>A similarity metric is in charge of keeping track of the numerical\nvalue of the similarity (or distance) between the two given images. It\nalso computes the update field for the forward and inverse displacement\nfields to be used in a gradient-based optimization algorithm. Note that\nthis metric does not depend on any transformation (affine or\nnon-linear) so it assumes the static and moving images are already\nwarped</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote class=\"last\">\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the backward update field to register the static image towards\nthe moving image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Releases the resources no longer needed by the metric</p>\n<p>This method is called by the RegistrationOptimizer after the required\niterations have been computed (forward and / or backward) so that the\nSimilarityMetric can safely delete any data it computed as part of the\ninitialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Must return the numeric value of the similarity between the given\nstatic and moving images</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>This method will be called before any compute_forward or\ncompute_backward call, this allows the Metric to pre-compute any useful\ninformation for speeding up the update computations. This\ninitialization was needed in ANTS because the updates are called once\nper voxel. In Python this is unpractical, though.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_above\">\n<code class=\"descname\">set_levels_above</code><span class=\"sig-paren\">(</span><em>levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are above the current one</p>\n<p>Informs this metric the number of pyramid levels above the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>levels</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of levels above the current Gaussian Pyramid level</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_below\">\n<code class=\"descname\">set_levels_below</code><span class=\"sig-paren\">(</span><em>levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are below the current one</p>\n<p>Informs this metric the number of pyramid levels below the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>levels</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of levels below the current Gaussian Pyramid level</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_moving_image\">\n<code class=\"descname\">set_moving_image</code><span class=\"sig-paren\">(</span><em>moving_image</em>, <em>moving_affine</em>, <em>moving_spacing</em>, <em>moving_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the moving image being compared against the static one.</p>\n<p>Sets the moving image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_static_image\">\n<code class=\"descname\">set_static_image</code><span class=\"sig-paren\">(</span><em>static_image</em>, <em>static_affine</em>, <em>static_spacing</em>, <em>static_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the static image being compared against the moving one.</p>\n<p>Sets the static image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>the static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\">\n<code class=\"descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_moving_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None if\nthe original_moving_image equals self.moving_image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>original image from which the current moving image was generated</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to original image to generate\nthe current moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\">\n<code class=\"descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_static_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None\nif the original_static_image equals self.moving_image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>original image from which the current static image was generated</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to original image to generate\nthe current static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.metrics.floating\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.metrics.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient\">\n<h3>gradient<a class=\"headerlink\" href=\"#gradient\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.gradient\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">gradient</code><span class=\"sig-paren\">(</span><em>f</em>, <em>*varargs</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the gradient of an N-dimensional array.</p>\n<p>The gradient is computed using second order accurate central differences\nin the interior and either first differences or second order accurate\none-sides (forward or backwards) differences at the boundaries. The\nreturned gradient hence has the same shape as the input array.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>f</strong> : array_like</p>\n<blockquote>\n<div><p>An N-dimensional array containing samples of a scalar function.</p>\n</div></blockquote>\n<p><strong>varargs</strong> : scalar or list of scalar, optional</p>\n<blockquote>\n<div><p>N scalars specifying the sample distances for each dimension,\ni.e. <cite>dx</cite>, <cite>dy</cite>, <cite>dz</cite>, ... Default distance: 1.\nsingle scalar specifies sample distance for all dimensions.\nif <cite>axis</cite> is given, the number of varargs must equal the number of axes.</p>\n</div></blockquote>\n<p><strong>edge_order</strong> : {1, 2}, optional</p>\n<blockquote>\n<div><p>Gradient is calculated using N<sup>th</sup> order accurate differences\nat the boundaries. Default: 1.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified\">New in version 1.9.1.</span></p>\n</div>\n</div></blockquote>\n<p><strong>axis</strong> : None or int or tuple of ints, optional</p>\n<blockquote>\n<div><p>Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes of the input array.\naxis may be negative, in which case it counts from the last to the first axis.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified\">New in version 1.11.0.</span></p>\n</div>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>gradient</strong> : list of ndarray</p>\n<blockquote class=\"last\">\n<div><p>Each element of <cite>list</cite> has the same shape as <cite>f</cite> giving the derivative\nof <cite>f</cite> with respect to each dimension.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])</span>\n</pre></div>\n</div>\n<p>For two dimensional arrays, the return will be two arrays ordered by\naxis. In this example the first array stands for the gradient in\nrows and the second one in columns direction:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">))</span>\n<span class=\"go\">[array([[ 2.,  2., -1.],</span>\n<span class=\"go\">        [ 2.,  2., -1.]]), array([[ 1. ,  2.5,  4. ],</span>\n<span class=\"go\">        [ 1. ,  1. ,  1. ]])]</span>\n</pre></div>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">edge_order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([-0.,  2.,  4.,  6.,  8.])</span>\n</pre></div>\n</div>\n<p>The axis keyword can be used to specify a subset of axes of which the gradient is calculated\n&gt;&gt;&gt; np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float), axis=0)\narray([[ 2.,  2., -1.],</p>\n<blockquote>\n<div>[ 2.,  2., -1.]])</div></blockquote>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-2d\">\n<h3>v_cycle_2d<a class=\"headerlink\" href=\"#v-cycle-2d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_2d\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">v_cycle_2d</code><span class=\"sig-paren\">(</span><em>n</em>, <em>k</em>, <em>delta_field</em>, <em>sigma_sq_field</em>, <em>gradient_field</em>, <em>target</em>, <em>lambda_param</em>, <em>displacement</em>, <em>depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the Gauss-Newton linear system\nby first filtering (GS-iterate) the current level, then solves for the\nresidual at a coarser resolution and finally refines the solution at the\ncurrent resolution. This scheme corresponds to the V-cycle proposed by\nBruhn and Weickert[Bruhn05].</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>n</strong> : int</p>\n<blockquote>\n<div><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</div></blockquote>\n<p><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations at each multi-resolution level</p>\n</div></blockquote>\n<p><strong>delta_field</strong> : array, shape (R, C)</p>\n<blockquote>\n<div><p>the difference between the static and moving image (the &#8216;derivative\nw.r.t. time&#8217; in the optical flow model)</p>\n</div></blockquote>\n<p><strong>sigma_sq_field</strong> : array, shape (R, C)</p>\n<blockquote>\n<div><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</div></blockquote>\n<p><strong>gradient_field</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>target</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>right-hand side of the linear system to be solved in the Weickert&#8217;s\nmulti-resolution algorithm</p>\n</div></blockquote>\n<p><strong>lambda_param</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</div></blockquote>\n<p><strong>displacement</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>the displacement field to start the optimization from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>energy</strong> : the energy of the EM (or SSD if sigmafield[...]==1) metric at this</p>\n<blockquote class=\"last\">\n<div><p>iteration</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion</dt>\n<dd>estimation: combining highest accuracy with real-time\nperformance&#8221;, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-3d\">\n<h3>v_cycle_3d<a class=\"headerlink\" href=\"#v-cycle-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_3d\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">v_cycle_3d</code><span class=\"sig-paren\">(</span><em>n</em>, <em>k</em>, <em>delta_field</em>, <em>sigma_sq_field</em>, <em>gradient_field</em>, <em>target</em>, <em>lambda_param</em>, <em>displacement</em>, <em>depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the linear system by first\nfiltering (GS-iterate) the current level, then solves for the residual\nat a coarser resolution and finally refines the solution at the current\nresolution. This scheme corresponds to the V-cycle proposed by Bruhn and\nWeickert[1].\n[1] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion estimation:</p>\n<blockquote>\n<div>combining highest accuracy with real-time performance&#8221;,\n10th IEEE International Conference on Computer Vision, 2005.\nICCV 2005.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>n</strong> : int</p>\n<blockquote>\n<div><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</div></blockquote>\n<p><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations at each multi-resolution level</p>\n</div></blockquote>\n<p><strong>delta_field</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>the difference between the static and moving image (the &#8216;derivative\nw.r.t. time&#8217; in the optical flow model)</p>\n</div></blockquote>\n<p><strong>sigma_sq_field</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</div></blockquote>\n<p><strong>gradient_field</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>target</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>right-hand side of the linear system to be solved in the Weickert&#8217;s\nmulti-resolution algorithm</p>\n</div></blockquote>\n<p><strong>lambda_param</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</div></blockquote>\n<p><strong>displacement</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the displacement field to start the optimization from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>energy</strong> : the energy of the EM (or SSD if sigmafield[...]==1) metric at this</p>\n<blockquote class=\"last\">\n<div><p>iteration</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id6\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.with_metaclass\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pool\">\n<h3>Pool<a class=\"headerlink\" href=\"#pool\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.Pool\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">Pool</code><span class=\"sig-paren\">(</span><em>processes=None</em>, <em>initializer=None</em>, <em>initargs=()</em>, <em>maxtasksperchild=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.Pool\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a process pool object</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affine-transform\">\n<h3>affine_transform<a class=\"headerlink\" href=\"#affine-transform\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.affine_transform\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">affine_transform</code><span class=\"sig-paren\">(</span><em>input</em>, <em>matrix</em>, <em>offset=0.0</em>, <em>output_shape=None</em>, <em>output=None</em>, <em>order=3</em>, <em>mode='constant'</em>, <em>cval=0.0</em>, <em>prefilter=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.affine_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply an affine transformation.</p>\n<p>The given matrix and offset are used to find for each point in the\noutput the corresponding coordinates in the input by an affine\ntransformation. The value of the input at those coordinates is\ndetermined by spline interpolation of the requested order. Points\noutside the boundaries of the input are filled according to the given\nmode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input</strong> : ndarray</p>\n<blockquote>\n<div><p>The input array.</p>\n</div></blockquote>\n<p><strong>matrix</strong> : ndarray</p>\n<blockquote>\n<div><p>The matrix must be two-dimensional or can also be given as a\none-dimensional sequence or array. In the latter case, it is assumed\nthat the matrix is diagonal. A more efficient algorithms is then\napplied that exploits the separability of the problem.</p>\n</div></blockquote>\n<p><strong>offset</strong> : float or sequence, optional</p>\n<blockquote>\n<div><p>The offset into the array where the transform is applied. If a float,\n<cite>offset</cite> is the same for each axis. If a sequence, <cite>offset</cite> should\ncontain one value for each axis.</p>\n</div></blockquote>\n<p><strong>output_shape</strong> : tuple of ints, optional</p>\n<blockquote>\n<div><p>Shape tuple.</p>\n</div></blockquote>\n<p><strong>output</strong> : ndarray or dtype, optional</p>\n<blockquote>\n<div><p>The array in which to place the output, or the dtype of the returned\narray.</p>\n</div></blockquote>\n<p><strong>order</strong> : int, optional</p>\n<blockquote>\n<div><p>The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.</p>\n</div></blockquote>\n<p><strong>mode</strong> : str, optional</p>\n<blockquote>\n<div><p>Points outside the boundaries of the input are filled according\nto the given mode (&#8216;constant&#8217;, &#8216;nearest&#8217;, &#8216;reflect&#8217; or &#8216;wrap&#8217;).\nDefault is &#8216;constant&#8217;.</p>\n</div></blockquote>\n<p><strong>cval</strong> : scalar, optional</p>\n<blockquote>\n<div><p>Value used for points outside the boundaries of the input if\n<code class=\"docutils literal\"><span class=\"pre\">mode='constant'</span></code>. Default is 0.0</p>\n</div></blockquote>\n<p><strong>prefilter</strong> : bool, optional</p>\n<blockquote>\n<div><p>The parameter prefilter determines if the input is pre-filtered with\n<cite>spline_filter</cite> before interpolation (necessary for spline\ninterpolation of order &gt; 1).  If False, it is assumed that the input is\nalready filtered. Default is True.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_transform</strong> : ndarray or None</p>\n<blockquote class=\"last\">\n<div><p>The transformed input. If <cite>output</cite> is given as a parameter, None is\nreturned.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cpu-count\">\n<h3>cpu_count<a class=\"headerlink\" href=\"#cpu-count\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.cpu_count\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">cpu_count</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.cpu_count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the number of CPUs in the system</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.reslice\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">reslice</code><span class=\"sig-paren\">(</span><em>data</em>, <em>affine</em>, <em>zooms</em>, <em>new_zooms</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal\"><span class=\"pre\">new_zooms</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>data</strong> : array, shape (I,J,K) or (I,J,K,N)</p>\n<blockquote>\n<div><p>3d volume or 4d volume with datasets</p>\n</div></blockquote>\n<p><strong>affine</strong> : array, shape (4,4)</p>\n<blockquote>\n<div><p>mapping from voxel coordinates to world coordinates</p>\n</div></blockquote>\n<p><strong>zooms</strong> : tuple, shape (3,)</p>\n<blockquote>\n<div><p>voxel size for (i,j,k) dimensions</p>\n</div></blockquote>\n<p><strong>new_zooms</strong> : tuple, shape (3,)</p>\n<blockquote>\n<div><p>new voxel size for (i,j,k) after resampling</p>\n</div></blockquote>\n<p><strong>order</strong> : int, from 0 to 5</p>\n<blockquote>\n<div><p>order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don&#8217;t want any smoothing 0 is the option you need.</p>\n</div></blockquote>\n<p><strong>mode</strong> : string (&#8216;constant&#8217;, &#8216;nearest&#8217;, &#8216;reflect&#8217; or &#8216;wrap&#8217;)</p>\n<blockquote>\n<div><p>Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</div></blockquote>\n<p><strong>cval</strong> : float</p>\n<blockquote>\n<div><p>Value used for points outside the boundaries of the input if\nmode=&#8217;constant&#8217;.</p>\n</div></blockquote>\n<p><strong>num_processes</strong> : int</p>\n<blockquote>\n<div><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>data2</strong> : array, shape (I,J,K) or (I,J,K,N)</p>\n<blockquote>\n<div><p>datasets resampled into isotropic voxel size</p>\n</div></blockquote>\n<p><strong>affine2</strong> : array, shape (4,4)</p>\n<blockquote class=\"last\">\n<div><p>new affine for the resampled image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fimg</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fimg</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id7\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>factors</strong> : list of floats</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : list of floats</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id8\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"dipy.align.scalespace.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"dipy.align.scalespace.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"dipy.align.scalespace.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"dipy.align.scalespace.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"dipy.align.scalespace.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"dipy.align.scalespace.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.scalespace.floating\">\n<code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.scalespace.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleMinDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMetric is that this creates\nthe entire distance matrix and therefore requires more memory.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Fixed or reference set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote class=\"last\">\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n<p>Num_threads is not used in this class. Use <code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code>\nfor a faster, threaded and less memory hungry metric</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleMinDistanceMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"garyfallidis14\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis14]</td><td>Garyfallidis et al., &#8220;Direct native-space fiber\nbundle alignment for group comparisons&#8221;, ISMRM,\n2014.</td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector,</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Fixed or reference set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote>\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlesumdistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlesumdistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleSumDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.BundleMinDistanceMatrixMetric</span></code></a></p>\n<p>Bundle-based Sum Distance aka BMD</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMatrixMetric is that it uses\nuses the sum of the distance matrix and not the sum of mins.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id11\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.Optimizer\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">Optimizer</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer.print_summary\" title=\"dipy.align.streamlinear.Optimizer.print_summary\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_summary</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>fun</strong> : callable</p>\n<blockquote>\n<div><p>Objective function.</p>\n</div></blockquote>\n<p><strong>x0</strong> : ndarray</p>\n<blockquote>\n<div><p>Initial guess.</p>\n</div></blockquote>\n<p><strong>args</strong> : tuple, optional</p>\n<blockquote>\n<div><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</div></blockquote>\n<p><strong>method</strong> : str, optional</p>\n<blockquote>\n<div><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8216;Nelder-Mead&#8217;</li>\n<li>&#8216;Powell&#8217;</li>\n<li>&#8216;CG&#8217;</li>\n<li>&#8216;BFGS&#8217;</li>\n<li>&#8216;Newton-CG&#8217;</li>\n<li>&#8216;Anneal&#8217;</li>\n<li>&#8216;L-BFGS-B&#8217;</li>\n<li>&#8216;TNC&#8217;</li>\n<li>&#8216;COBYLA&#8217;</li>\n<li>&#8216;SLSQP&#8217;</li>\n<li>&#8216;dogleg&#8217;</li>\n<li>&#8216;trust-ncg&#8217;</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n<p><strong>jac</strong> : bool or callable, optional</p>\n<blockquote>\n<div><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</div></blockquote>\n<p><strong>hess, hessp</strong> : callable, optional</p>\n<blockquote>\n<div><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : sequence, optional</p>\n<blockquote>\n<div><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</div></blockquote>\n<p><strong>constraints</strong> : dict or sequence of dict, optional</p>\n<blockquote>\n<div><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>type</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span><dd><p class=\"first last\">Constraint type: &#8216;eq&#8217; for equality, &#8216;ineq&#8217; for inequality.</p>\n</dd>\n<dt>fun</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span><dd><p class=\"first last\">The function defining the constraint.</p>\n</dd>\n<dt>jac</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable, optional</span><dd><p class=\"first last\">The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, optional</span><dd><p class=\"first last\">Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</div></blockquote>\n<p><strong>tol</strong> : float, optional</p>\n<blockquote>\n<div><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</div></blockquote>\n<p><strong>callback</strong> : callable, optional</p>\n<blockquote>\n<div><p>Called after each iteration, as <code class=\"docutils literal\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>maxiter</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span><dd><p class=\"first last\">Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(&#8216;minimize&#8217;, method)</cite>.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : bool, optional</p>\n<blockquote class=\"last\">\n<div><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">scipy.optimize.minimize</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.evolution\">\n<code class=\"descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.fopt\">\n<code class=\"descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.message\">\n<code class=\"descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nfev\">\n<code class=\"descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nit\">\n<code class=\"descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.print_summary\">\n<code class=\"descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.xopt\">\n<code class=\"descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinedistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#streamlinedistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineDistanceMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance</span></code></a>(xopt)</td>\n<td>calculate distance for current set of parameters</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a>(static,&nbsp;moving)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>calculate distance for current set of parameters</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinelinearregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#streamlinelinearregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineLinearRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>x0='rigid'</em>, <em>method='L-BFGS-B'</em>, <em>bounds=None</em>, <em>verbose=False</em>, <em>options=None</em>, <em>evolution=False</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving[,&nbsp;mat])</td>\n<td>Find the minimum of the provided metric.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>x0='rigid'</em>, <em>method='L-BFGS-B'</em>, <em>bounds=None</em>, <em>verbose=False</em>, <em>options=None</em>, <em>evolution=False</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"#id13\" id=\"id12\">[Garyfallidis14]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : StreamlineDistanceMetric,</p>\n<blockquote>\n<div><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</div></blockquote>\n<p><strong>x0</strong> : array or int or str</p>\n<blockquote>\n<div><p>Initial parametrization for the optimization.</p>\n<dl class=\"docutils\">\n<dt>If 1D array with:</dt>\n<dd><p class=\"first\">a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p class=\"last\">This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt>\n<dd><ol class=\"first last loweralpha\">\n<li><dl class=\"first docutils\">\n<dt>6</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>7</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>12</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt>\n<dd><ol class=\"first last loweralpha\">\n<li><dl class=\"first docutils\">\n<dt>&#8220;rigid&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&#8220;similarity&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&#8220;affine&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</div></blockquote>\n<p><strong>method</strong> : str,</p>\n<blockquote>\n<div><p>&#8216;L_BFGS_B&#8217; or &#8216;Powell&#8217; optimizers can be used. Default is\n&#8216;L_BFGS_B&#8217;.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : list of tuples or None,</p>\n<blockquote>\n<div><p>If method == &#8216;L_BFGS_B&#8217; then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</div></blockquote>\n<p><strong>verbose</strong> : bool,</p>\n<blockquote>\n<div><p>If True then information about the optimization is shown.</p>\n</div></blockquote>\n<p><strong>options</strong> : None or dict,</p>\n<blockquote>\n<div><p>Extra options to be used with the selected method.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : boolean</p>\n<blockquote>\n<div><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"id13\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis14]</td><td>Garyfallidis et al., &#8220;Direct native-space fiber\nbundle alignment for group comparisons&#8221;, ISMRM,\n2014.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>mat=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Reference or fixed set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote>\n<div><p>Moving set of streamlines.</p>\n</div></blockquote>\n<p><strong>mat</strong> : array</p>\n<blockquote>\n<div><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>map</strong> : StreamlineRegistrationMap</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlineregistrationmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><a class=\"headerlink\" href=\"#streamlineregistrationmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineRegistrationMap</code><span class=\"sig-paren\">(</span><em>matopt</em>, <em>xopt</em>, <em>fopt</em>, <em>matopt_history</em>, <em>funcs</em>, <em>iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(moving)</td>\n<td>Transform moving streamlines to the static.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>matopt</em>, <em>xopt</em>, <em>fopt</em>, <em>matopt_history</em>, <em>funcs</em>, <em>iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A map holding the optimum affine matrix and some other parameters\nof the optimization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>matrix</strong> : array,</p>\n<blockquote>\n<div><p>4x4 affine matrix which transforms the moving to the static\nstreamlines</p>\n</div></blockquote>\n<p><strong>xopt</strong> : array,</p>\n<blockquote>\n<div><p>1d array with the parameters of the transformation after centering</p>\n</div></blockquote>\n<p><strong>fopt</strong> : float,</p>\n<blockquote>\n<div><p>final value of the metric</p>\n</div></blockquote>\n<p><strong>matrix_history</strong> : array</p>\n<blockquote>\n<div><p>All transformation matrices created during the optimization</p>\n</div></blockquote>\n<p><strong>funcs</strong> : int,</p>\n<blockquote>\n<div><p>Number of function evaluations of the optimizer</p>\n</div></blockquote>\n<p><strong>iterations</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of iterations of the optimizer</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform moving streamlines to the static.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>moving</strong> : streamlines</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>moved</strong> : streamlines</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>All this does is apply <code class=\"docutils literal\"><span class=\"pre\">self.matrix</span></code> to the input streamlines.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance\">\n<h3>bundle_min_distance<a class=\"headerlink\" href=\"#bundle-min-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_min_distance</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : list</p>\n<blockquote>\n<div><p>Static streamlines</p>\n</div></blockquote>\n<p><strong>moving</strong> : list</p>\n<blockquote>\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance-fast\">\n<h3>bundle_min_distance_fast<a class=\"headerlink\" href=\"#bundle-min-distance-fast\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance_fast\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_min_distance_fast</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em>, <em>block_size</em>, <em>num_threads</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : array</p>\n<blockquote>\n<div><p>1D array. t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : array</p>\n<blockquote>\n<div><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array</p>\n<blockquote>\n<div><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</div></blockquote>\n<p><strong>block_size</strong> : int</p>\n<blockquote>\n<div><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>This is a faster implementation of <code class=\"docutils literal\"><span class=\"pre\">bundle_min_distance</span></code>, which requires\nthat all the points of each streamline are allocated into an ndarray\n(of shape N*M by 3, with N the number of points per streamline and M the\nnumber of streamlines). This can be done by calling\n<cite>dipy.tracking.streamlines.unlist_streamlines</cite>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-sum-distance\">\n<h3>bundle_sum_distance<a class=\"headerlink\" href=\"#bundle-sum-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_sum_distance\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_sum_distance</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF distance optimization function (SUM)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : list</p>\n<blockquote>\n<div><p>Static streamlines</p>\n</div></blockquote>\n<p><strong>moving</strong> : list</p>\n<blockquote>\n<div><p>Moving streamlines. These will be transform to align with\nthe static streamlines</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"center-streamlines\">\n<h3>center_streamlines<a class=\"headerlink\" href=\"#center-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.center_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">center_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Move streamlines to the origin</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n<p><strong>inv_shift</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>Translation in x,y,z to go back in the initial position</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix\">\n<h3>compose_matrix<a class=\"headerlink\" href=\"#compose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_matrix</code><span class=\"sig-paren\">(</span><em>scale=None</em>, <em>shear=None</em>, <em>angles=None</em>, <em>translate=None</em>, <em>perspective=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return 4x4 transformation matrix from sequence of\ntransformations.</p>\n<p>Code modified from the work of Christoph Gohlke link provided here\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<p>This is the inverse of the <code class=\"docutils literal\"><span class=\"pre\">decompose_matrix</span></code> function.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>scale</strong> : (3,) array_like</p>\n<blockquote>\n<div><p>Scaling factors.</p>\n</div></blockquote>\n<p><strong>shear</strong> : array_like</p>\n<blockquote>\n<div><p>Shear factors for x-y, x-z, y-z axes.</p>\n</div></blockquote>\n<p><strong>angles</strong> : array_like</p>\n<blockquote>\n<div><p>Euler angles about static x, y, z axes.</p>\n</div></blockquote>\n<p><strong>translate</strong> : array_like</p>\n<blockquote>\n<div><p>Translation vector along x, y, z axes.</p>\n</div></blockquote>\n<p><strong>perspective</strong> : array_like</p>\n<blockquote>\n<div><p>Perspective partition of matrix.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>matrix</strong> : 4x4 array</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">as</span> <span class=\"nn\">gm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shear</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M0</span> <span class=\"o\">=</span> <span class=\"n\">gm</span><span class=\"o\">.</span><span class=\"n\">compose_matrix</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix44\">\n<h3>compose_matrix44<a class=\"headerlink\" href=\"#compose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix44\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_matrix44</code><span class=\"sig-paren\">(</span><em>t</em>, <em>dtype=&lt;type 'numpy.float64'&gt;</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose a 4x4 transformation matrix</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>This is a 1D vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>T</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>Homogeneous transformation matrix of size 4x4.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-transformations\">\n<h3>compose_transformations<a class=\"headerlink\" href=\"#compose-transformations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_transformations\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_transformations</code><span class=\"sig-paren\">(</span><em>*mats</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>mat1</strong> : array, (4, 4)</p>\n<p><strong>mat2</strong> : array, (4, 4)</p>\n<p><strong>...</strong> :</p>\n<p><strong>matN</strong> : array, (4, 4)</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>matN x ... x mat2 x mat1</strong> : array, (4, 4)</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix\">\n<h3>decompose_matrix<a class=\"headerlink\" href=\"#decompose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">decompose_matrix</code><span class=\"sig-paren\">(</span><em>matrix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return sequence of transformations from transformation matrix.</p>\n<p>Code modified from the excellent work of Christoph Gohlke link provided\nhere: <a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>matrix</strong> : array_like</p>\n<blockquote>\n<div><p>Non-degenerative homogeneous transformation matrix</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>scale</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Three scaling factors.</p>\n</div></blockquote>\n<p><strong>shear</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Shear factors for x-y, x-z, y-z axes.</p>\n</div></blockquote>\n<p><strong>angles</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Euler angles about static x, y, z axes.</p>\n</div></blockquote>\n<p><strong>translate</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Translation vector along x, y, z axes.</p>\n</div></blockquote>\n<p><strong>perspective</strong> : ndarray</p>\n<blockquote>\n<div><p>Perspective partition of matrix.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><p class=\"first\"><strong>ValueError</strong> :</p>\n<blockquote class=\"last\">\n<div><p>If matrix is of wrong type or degenerative.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T0</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">decompose_matrix</span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix44\">\n<h3>decompose_matrix44<a class=\"headerlink\" href=\"#decompose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix44\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">decompose_matrix44</code><span class=\"sig-paren\">(</span><em>mat</em>, <em>size=12</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a 4x4 homogeneous matrix return the parameter vector</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>mat</strong> : array</p>\n<blockquote>\n<div><p>Homogeneous 4x4 transformation matrix</p>\n</div></blockquote>\n<p><strong>size</strong> : int</p>\n<blockquote>\n<div><p>Size of output vector. 6 for rigid, 7 for similarity and 12\nfor affine. Default is 12.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>One dimensional ndarray of 6, 7 or 12 affine parameters.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"distance-matrix-mdf\">\n<h3>distance_matrix_mdf<a class=\"headerlink\" href=\"#distance-matrix-mdf\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.distance_matrix_mdf\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">distance_matrix_mdf</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Minimum direct flipped distance matrix between two streamline sets</p>\n<p>All streamlines need to have the same number of points</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines_a</strong> : sequence</p>\n<blockquote>\n<div><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</div></blockquote>\n<p><strong>streamlines_b</strong> : sequence</p>\n<blockquote>\n<div><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>DM</strong> : array, shape (len(streamlines_a), len(streamlines_b))</p>\n<blockquote class=\"last\">\n<div><p>distance matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.transform_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>mat</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n<p><strong>mat</strong> : array, (4, 4)</p>\n<blockquote>\n<div><p>transformation matrix</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_streamlines</strong> : list</p>\n<blockquote class=\"last\">\n<div><p>List of the transformed 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unlist-streamlines\">\n<h3>unlist_streamlines<a class=\"headerlink\" href=\"#unlist-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.unlist_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">unlist_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the streamlines not as a list but as an array and an offset</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines: sequence</strong> :</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>points</strong> : array</p>\n<p class=\"last\"><strong>offsets</strong> : array</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id15\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.with_metaclass\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": true, "title": "<code class=\"docutils literal\"><span class=\"pre\">align</span></code>", "sourcename": "reference/dipy.align.txt", "customsidebar": null, "metatags": "", "current_page_name": "reference/dipy.align", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"], ["reference/dipy.__config__", "<code class=\"docutils literal\"><span class=\"pre\">__config__</span></code>", "P", "previous"]], "meta": {}, "parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal\"><span class=\"pre\">align</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imaffine\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.imaffine</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imwarp\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.imwarp</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.metrics\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.metrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.reslice\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.reslice</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.scalespace\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.scalespace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.streamlinear\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.streamlinear</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bunch\"><code class=\"docutils literal\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#floating\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineinversionerror\"><code class=\"docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"docutils literal\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#isotropicscalespace\"><code class=\"docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optimizer\"><code class=\"docutils literal\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#parzenjointhistogram\"><code class=\"docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#scalespace\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#align-centers-of-mass\">align_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#align-geometric-centers\">align_geometric_centers</a></li>\n<li><a class=\"reference internal\" href=\"#align-origins\">align_origins</a></li>\n<li><a class=\"reference internal\" href=\"#compute-parzen-mi\">compute_parzen_mi</a></li>\n<li><a class=\"reference internal\" href=\"#get-direction-and-spacings\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#sample-domain-regular\">sample_domain_regular</a></li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-geometric-centers\">transform_geometric_centers</a></li>\n<li><a class=\"reference internal\" href=\"#transform-origins\">transform_origins</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id1\"><code class=\"docutils literal\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicregistration\"><code class=\"docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id2\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id3\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id4\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#mult-aff\">mult_aff</a></li>\n<li><a class=\"reference internal\" href=\"#with-metaclass\">with_metaclass</a></li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"docutils literal\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"docutils literal\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"docutils literal\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#similaritymetric\"><code class=\"docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id5\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gradient\">gradient</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-2d\">v_cycle_2d</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-3d\">v_cycle_3d</a></li>\n<li><a class=\"reference internal\" href=\"#id6\">with_metaclass</a></li>\n<li><a class=\"reference internal\" href=\"#pool\">Pool</a></li>\n<li><a class=\"reference internal\" href=\"#affine-transform\">affine_transform</a></li>\n<li><a class=\"reference internal\" href=\"#cpu-count\">cpu_count</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#id7\"><code class=\"docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id8\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id9\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancematrixmetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancemetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlesumdistancematrixmetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id11\"><code class=\"docutils literal\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinedistancemetric\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinelinearregistration\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlineregistrationmap\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance\">bundle_min_distance</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-fast\">bundle_min_distance_fast</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-sum-distance\">bundle_sum_distance</a></li>\n<li><a class=\"reference internal\" href=\"#center-streamlines\">center_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix\">compose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix44\">compose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#compose-transformations\">compose_transformations</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix\">decompose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix44\">decompose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#distance-matrix-mdf\">distance_matrix_mdf</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#unlist-streamlines\">unlist_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#id15\">with_metaclass</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../dipy.__config__/", "title": "<code class=\"docutils literal\"><span class=\"pre\">__config__</span></code>"}, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"module-dipy.align\">\n<span id=\"align\"></span><h1><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align</span></code><a class=\"headerlink\" href=\"#module-dipy.align\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.align.imaffine\">\n<span id=\"module-align-imaffine\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.imaffine</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imaffine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Affine image registration module consisting of the following classes:</p>\n<dl class=\"docutils\">\n<dt>AffineMap: encapsulates the necessary information to perform affine</dt>\n<dd>transforms between two domains, defined by a <cite>static</cite> and a <cite>moving</cite>\nimage. The <cite>domain</cite> of the transform is the set of points in the\n<cite>static</cite> image&#8217;s grid, and the <cite>codomain</cite> is the set of points in\nthe <cite>moving</cite> image. When we call the <cite>transform</cite> method, <cite>AffineMap</cite>\nmaps each point <cite>x</cite> of the domain (<cite>static</cite> grid) to the codomain\n(<cite>moving</cite> grid) and interpolates the <cite>moving</cite> image at that point\nto obtain the intensity value to be placed at <cite>x</cite> in the resulting\ngrid. The <cite>transform_inverse</cite> method performs the opposite operation\nmapping points in the codomain to points in the domain.</dd>\n<dt>ParzenJointHistogram: computes the marginal and joint distributions of</dt>\n<dd>intensities of a pair of images, using Parzen windows [Parzen62]\nwith a cubic spline kernel, as proposed by Mattes et al. [Mattes03].\nIt also computes the gradient of the joint histogram w.r.t. the\nparameters of a given transform.</dd>\n<dt>MutualInformationMetric: computes the value and gradient of the mutual</dt>\n<dd>information metric the way <cite>Optimizer</cite> needs them. That is, given\na set of transform parameters, it will use <cite>ParzenJointHistogram</cite>\nto compute the value and gradient of the joint intensity histogram\nevaluated at the given parameters, and evaluate the the value and\ngradient of the histogram&#8217;s mutual information.</dd>\n<dt>AffineRegistration: it runs the multi-resolution registration, putting</dt>\n<dd>all the pieces together. It needs to create the scale space of the\nimages and run the multi-resolution registration by using the Metric\nand the Optimizer at each level of the Gaussian pyramid. At each\nlevel, it will setup the metric to compute value and gradient of the\nmetric with the input images with different levels of smoothing.</dd>\n</dl>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"docutils\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt>\n<dd>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt>\n<dd>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</dd>\n</dl>\n</div>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineMap</span></code></a>(affine[,&nbsp;domain_grid_shape,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,&nbsp;level_iters,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,&nbsp;factors,&nbsp;sigmas)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Optimizer</span></code></a>(fun,&nbsp;x0[,&nbsp;args,&nbsp;method,&nbsp;jac,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a></td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_centers_of_mass\" title=\"dipy.align.imaffine.align_centers_of_mass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_centers_of_mass</span></code></a>(static,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_geometric_centers\" title=\"dipy.align.imaffine.align_geometric_centers\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_geometric_centers</span></code></a>(static,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.align_origins\" title=\"dipy.align.imaffine.align_origins\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">align_origins</span></code></a>(static,&nbsp;static_grid2world,&nbsp;...)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"dipy.align.imaffine.compute_parzen_mi\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_parzen_mi</span></code></a></td>\n<td>Computes the mutual information and its gradient (if requested)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"dipy.align.imaffine.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,&nbsp;dim)</td>\n<td>Extracts the rotational and spacing components from a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"dipy.align.imaffine.sample_domain_regular\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">sample_domain_regular</span></code></a></td>\n<td>Take floor(total_voxels/k) samples from a (2D or 3D) grid</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"dipy.align.imaffine.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,&nbsp;...)</td>\n<td>Transformation to align the center of mass of the input images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"dipy.align.imaffine.transform_geometric_centers\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_geometric_centers</span></code></a>(static,&nbsp;...)</td>\n<td>Transformation to align the geometric center of the input images</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_origins\" title=\"dipy.align.imaffine.transform_origins\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_origins</span></code></a>(static,&nbsp;static_grid2world,&nbsp;...)</td>\n<td>Transformation to align the origins of the input images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.warn\" title=\"dipy.align.imaffine.warn\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.imwarp\">\n<span id=\"module-align-imwarp\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.imwarp</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imwarp\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Classes and functions for Symmetric Diffeomorphic Registration</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,&nbsp;disp_shape[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a>([metric])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"dipy.align.imwarp.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,&nbsp;dim)</td>\n<td>Extracts the rotational and spacing components from a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.mult_aff\" title=\"dipy.align.imwarp.mult_aff\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">mult_aff</span></code></a>(A,&nbsp;B)</td>\n<td>Returns the matrix product A.dot(B) considering None as the identity</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.with_metaclass\" title=\"dipy.align.imwarp.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.metrics\">\n<span id=\"module-align-metrics\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.metrics</span></code><a class=\"headerlink\" href=\"#module-dipy.align.metrics\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Metrics for Symmetric Diffeomorphic Registration</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">CCMetric</span></code></a>(dim[,&nbsp;sigma_diff,&nbsp;radius])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">EMMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;step_type])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a>(dim)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.gradient\" title=\"dipy.align.metrics.gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">gradient</span></code></a>(f,&nbsp;*varargs,&nbsp;**kwargs)</td>\n<td>Return the gradient of an N-dimensional array.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"dipy.align.metrics.v_cycle_2d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">v_cycle_2d</span></code></a>(n,&nbsp;k,&nbsp;delta_field,&nbsp;...[,&nbsp;depth])</td>\n<td>Multi-resolution Gauss-Seidel solver using V-type cycles</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"dipy.align.metrics.v_cycle_3d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">v_cycle_3d</span></code></a>(n,&nbsp;k,&nbsp;delta_field,&nbsp;...[,&nbsp;depth])</td>\n<td>Multi-resolution Gauss-Seidel solver using V-type cycles</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.with_metaclass\" title=\"dipy.align.metrics.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.reslice\">\n<span id=\"module-align-reslice\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.reslice</span></code><a class=\"headerlink\" href=\"#module-dipy.align.reslice\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.Pool\" title=\"dipy.align.reslice.Pool\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Pool</span></code></a>([processes,&nbsp;initializer,&nbsp;initargs,&nbsp;...])</td>\n<td>Returns a process pool object</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.affine_transform\" title=\"dipy.align.reslice.affine_transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">affine_transform</span></code></a>(input,&nbsp;matrix[,&nbsp;offset,&nbsp;...])</td>\n<td>Apply an affine transformation.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.cpu_count\" title=\"dipy.align.reslice.cpu_count\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">cpu_count</span></code></a>()</td>\n<td>Returns the number of CPUs in the system</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.reslice.reslice\" title=\"dipy.align.reslice.reslice\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">reslice</span></code></a>(data,&nbsp;affine,&nbsp;zooms,&nbsp;new_zooms[,&nbsp;...])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal\"><span class=\"pre\">new_zooms</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.scalespace\">\n<span id=\"module-align-scalespace\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.scalespace</span></code><a class=\"headerlink\" href=\"#module-dipy.align.scalespace\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,&nbsp;factors,&nbsp;sigmas)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a>(image,&nbsp;num_levels[,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">floating</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.streamlinear\">\n<span id=\"module-align-streamlinear\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">align.streamlinear</span></code><a class=\"headerlink\" href=\"#module-dipy.align.streamlinear\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Minimum Distance aka BMD</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Minimum Distance aka BMD</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a>([num_threads])</td>\n<td>Bundle-based Sum Distance aka BMD</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">Optimizer</span></code></a>(fun,&nbsp;x0[,&nbsp;args,&nbsp;method,&nbsp;jac,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a>([num_threads])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,&nbsp;x0,&nbsp;...])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a>(matopt,&nbsp;xopt,&nbsp;...)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"dipy.align.streamlinear.bundle_min_distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_min_distance</span></code></a>(t,&nbsp;static,&nbsp;moving)</td>\n<td>MDF-based pairwise distance optimization function (MIN)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_fast\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_min_distance_fast</span></code></a>(t,&nbsp;static,&nbsp;moving,&nbsp;...)</td>\n<td>MDF-based pairwise distance optimization function (MIN)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"dipy.align.streamlinear.bundle_sum_distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bundle_sum_distance</span></code></a>(t,&nbsp;static,&nbsp;moving[,&nbsp;...])</td>\n<td>MDF distance optimization function (SUM)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"dipy.align.streamlinear.center_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">center_streamlines</span></code></a>(streamlines)</td>\n<td>Move streamlines to the origin</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"dipy.align.streamlinear.compose_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_matrix</span></code></a>([scale,&nbsp;shear,&nbsp;angles,&nbsp;...])</td>\n<td>Return 4x4 transformation matrix from sequence of transformations.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"dipy.align.streamlinear.compose_matrix44\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_matrix44</span></code></a>(t[,&nbsp;dtype])</td>\n<td>Compose a 4x4 transformation matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"dipy.align.streamlinear.compose_transformations\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compose_transformations</span></code></a>(*mats)</td>\n<td>Compose multiple 4x4 affine transformations in one 4x4 matrix</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"dipy.align.streamlinear.decompose_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">decompose_matrix</span></code></a>(matrix)</td>\n<td>Return sequence of transformations from transformation matrix.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"dipy.align.streamlinear.decompose_matrix44\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">decompose_matrix44</span></code></a>(mat[,&nbsp;size])</td>\n<td>Given a 4x4 homogeneous matrix return the parameter vector</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"dipy.align.streamlinear.distance_matrix_mdf\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance_matrix_mdf</span></code></a></td>\n<td>Minimum direct flipped distance matrix between two streamline sets</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"dipy.align.streamlinear.transform_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,&nbsp;mat)</td>\n<td>Apply affine transformation to streamlines</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"dipy.align.streamlinear.unlist_streamlines\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">unlist_streamlines</span></code></a>(streamlines)</td>\n<td>Return the streamlines not as a list but as an array and an offset</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.with_metaclass\" title=\"dipy.align.streamlinear.with_metaclass\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">with_metaclass</span></code></a>(meta,&nbsp;*bases)</td>\n<td>Create a base class with a metaclass.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bunch\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#bunch\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.Bunch\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.</code><code class=\"descname\">Bunch</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.Bunch.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A &#8216;bunch&#8217; of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"floating\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#floating\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.floating\">\n<code class=\"descclassname\">dipy.align.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineinversionerror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a><a class=\"headerlink\" href=\"#affineinversionerror\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineInversionError\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineInversionError</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.Exception\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">exceptions.Exception</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineInversionError.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>x.__init__(...) initializes x; see help(type(x)) for signature</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineMap</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"dipy.align.imaffine.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_affine</span></code></a>(affine)</td>\n<td>Sets the affine transform (operating in physical space)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"dipy.align.imaffine.AffineMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interp,&nbsp;image_grid2world,&nbsp;...])</td>\n<td>Transforms the input image from co-domain to domain space</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"dipy.align.imaffine.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interp,&nbsp;...])</td>\n<td>Transforms the input image from domain to co-domain space</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x&#8217;, y&#8217;, z&#8217;)\nin moving image&#8217;s world coordinates. Finally, (x&#8217;, y&#8217;, z&#8217;) is mapped\nto voxel coordinates (i&#8217;, j&#8217;, k&#8217;) in the moving image by multiplying\n(x&#8217;, y&#8217;, z&#8217;) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote>\n<div><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</div></blockquote>\n<p><strong>domain_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</div></blockquote>\n<p><strong>domain_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>codomain_grid_shape</strong> : sequence of integers, shape (dim,)</p>\n<blockquote>\n<div><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</div></blockquote>\n<p><strong>codomain_grid2world</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote class=\"last\">\n<div><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.set_affine\">\n<code class=\"descname\">set_affine</code><span class=\"sig-paren\">(</span><em>affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the affine transform (operating in physical space)</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (dim + 1, dim + 1)</p>\n<blockquote class=\"last\">\n<div><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from co-domain to domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (X, Y) or (X, Y, Z)</p>\n<blockquote>\n<div><p>the image to be transformed</p>\n</div></blockquote>\n<p><strong>interp</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>sampling_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</div></blockquote>\n<p><strong>sampling_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</div></blockquote>\n<p><strong>resample_only</strong> : Boolean, optional</p>\n<blockquote>\n<div><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<p><strong>transformed</strong> : array, shape <cite>sampling_grid_shape</cite> or</p>\n<blockquote class=\"last\">\n<div><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from domain to co-domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (X, Y) or (X, Y, Z)</p>\n<blockquote>\n<div><p>the image to be transformed</p>\n</div></blockquote>\n<p><strong>interp</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</div></blockquote>\n<p><strong>sampling_grid_shape</strong> : sequence, shape (dim,), optional</p>\n<blockquote>\n<div><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</div></blockquote>\n<p><strong>sampling_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</div></blockquote>\n<p><strong>resample_only</strong> : Boolean, optional</p>\n<blockquote>\n<div><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</div></blockquote>\n<p><strong>Returns</strong> :</p>\n<p><strong>&#8212;&#8212;-</strong> :</p>\n<p><strong>transformed</strong> : array, shape <cite>sampling_grid_shape</cite> or</p>\n<blockquote class=\"last\">\n<div><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"dipy.align.imaffine.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving,&nbsp;transform,&nbsp;params0)</td>\n<td>Starts the optimization process</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the AffineRegistration class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : None or object, optional</p>\n<blockquote>\n<div><p>an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</div></blockquote>\n<p><strong>level_iters</strong> : sequence, optional</p>\n<blockquote>\n<div><p>the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : sequence of floats, optional</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</div></blockquote>\n<p><strong>factors</strong> : sequence of floats, optional</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</div></blockquote>\n<p><strong>method</strong> : string, optional</p>\n<blockquote>\n<div><p>optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is &#8216;L-BFGS-B&#8217;.</p>\n</div></blockquote>\n<p><strong>ss_sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</div></blockquote>\n<p><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong> :</p>\n<blockquote class=\"last\">\n<div><p>Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>3</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">print as much information as possible to isolate the cause</span><dd><p class=\"first last\">of a bug.</p>\n</dd>\n</dl>\n<p>Default: 1</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.docstring_addendum\">\n<code class=\"descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>transform</em>, <em>params0</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as reference during optimization.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S&#8217;, R&#8217;, C&#8217;) or (R&#8217;, C&#8217;)</p>\n<blockquote>\n<div><p>the image to be used as &#8220;moving&#8221; during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by &#8220;pre-aligning&#8221; the moving image towards the\nstatic using an affine transformation given by the\n&#8216;starting_affine&#8217; matrix</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>params0</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</div></blockquote>\n<p><strong>starting_affine</strong> : string, or matrix, or None, optional</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>If string:</dt>\n<dd><p class=\"first last\">&#8216;mass&#8217;: align centers of gravity\n&#8216;voxel-origin&#8217;: align physical coordinates of voxel (0,0,0)\n&#8216;centers&#8217;: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt>\n<dd><p class=\"first last\">array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt>\n<dd><p class=\"first last\">Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine resulting affine transformation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"isotropicscalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#isotropicscalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>factors</strong> : list of floats</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : list of floats</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"dipy.align.imaffine.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance</span></code></a>(params)</td>\n<td>Numeric value of the negative Mutual Information</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance_and_gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric and its gradient at given parameters</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric&#8217;s gradient at the given parameters</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"dipy.align.imaffine.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a>(transform,&nbsp;static,&nbsp;moving[,&nbsp;...])</td>\n<td>Prepares the metric to compute intensity densities and gradients</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the Mutual Information metric</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>nbins</strong> : int, optional</p>\n<blockquote>\n<div><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</div></blockquote>\n<p><strong>sampling_proportion</strong> : None or float in interval (0, 1], optional</p>\n<blockquote class=\"last\">\n<div><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>neg_mi</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\">\n<code class=\"descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>neg_mi</strong> : float</p>\n<blockquote>\n<div><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</div></blockquote>\n<p><strong>neg_mi_grad</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the negative Mutual Information</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.gradient\">\n<code class=\"descname\">gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric&#8217;s gradient at the given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>params</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>grad</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the negative Mutual Information</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>transform</em>, <em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute intensity densities and gradients</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>transform: instance of Transform</strong> :</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S&#8217;, R&#8217;, C&#8217;) or (R&#8217;, C&#8217;)</p>\n<blockquote>\n<div><p>moving image. The dimensions of the static (S, R, C) and moving\n(S&#8217;, R&#8217;, C&#8217;) images do not need to be the same.</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array (dim+1, dim+1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</div></blockquote>\n<p><strong>starting_affine</strong> : array, shape (dim+1, dim+1), optional</p>\n<blockquote class=\"last\">\n<div><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optimizer\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#optimizer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.Optimizer\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">Optimizer</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer.print_summary\" title=\"dipy.align.imaffine.Optimizer.print_summary\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_summary</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>fun</strong> : callable</p>\n<blockquote>\n<div><p>Objective function.</p>\n</div></blockquote>\n<p><strong>x0</strong> : ndarray</p>\n<blockquote>\n<div><p>Initial guess.</p>\n</div></blockquote>\n<p><strong>args</strong> : tuple, optional</p>\n<blockquote>\n<div><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</div></blockquote>\n<p><strong>method</strong> : str, optional</p>\n<blockquote>\n<div><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8216;Nelder-Mead&#8217;</li>\n<li>&#8216;Powell&#8217;</li>\n<li>&#8216;CG&#8217;</li>\n<li>&#8216;BFGS&#8217;</li>\n<li>&#8216;Newton-CG&#8217;</li>\n<li>&#8216;Anneal&#8217;</li>\n<li>&#8216;L-BFGS-B&#8217;</li>\n<li>&#8216;TNC&#8217;</li>\n<li>&#8216;COBYLA&#8217;</li>\n<li>&#8216;SLSQP&#8217;</li>\n<li>&#8216;dogleg&#8217;</li>\n<li>&#8216;trust-ncg&#8217;</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n<p><strong>jac</strong> : bool or callable, optional</p>\n<blockquote>\n<div><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</div></blockquote>\n<p><strong>hess, hessp</strong> : callable, optional</p>\n<blockquote>\n<div><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : sequence, optional</p>\n<blockquote>\n<div><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</div></blockquote>\n<p><strong>constraints</strong> : dict or sequence of dict, optional</p>\n<blockquote>\n<div><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>type</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span><dd><p class=\"first last\">Constraint type: &#8216;eq&#8217; for equality, &#8216;ineq&#8217; for inequality.</p>\n</dd>\n<dt>fun</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span><dd><p class=\"first last\">The function defining the constraint.</p>\n</dd>\n<dt>jac</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable, optional</span><dd><p class=\"first last\">The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, optional</span><dd><p class=\"first last\">Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</div></blockquote>\n<p><strong>tol</strong> : float, optional</p>\n<blockquote>\n<div><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</div></blockquote>\n<p><strong>callback</strong> : callable, optional</p>\n<blockquote>\n<div><p>Called after each iteration, as <code class=\"docutils literal\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>maxiter</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span><dd><p class=\"first last\">Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(&#8216;minimize&#8217;, method)</cite>.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : bool, optional</p>\n<blockquote class=\"last\">\n<div><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">scipy.optimize.minimize</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.evolution\">\n<code class=\"descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.fopt\">\n<code class=\"descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.message\">\n<code class=\"descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.nfev\">\n<code class=\"descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.nit\">\n<code class=\"descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.print_summary\">\n<code class=\"descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.Optimizer.xopt\">\n<code class=\"descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"parzenjointhistogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a><a class=\"headerlink\" href=\"#parzenjointhistogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">ParzenJointHistogram</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_index</span></code></a></td>\n<td>Bin index associated with the given normalized intensity</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_normalize_moving</span></code></a></td>\n<td>Maps intensity x to the range covered by the moving histogram</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bin_normalize_static</span></code></a></td>\n<td>Maps intensity x to the range covered by the static histogram</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"dipy.align.imaffine.ParzenJointHistogram.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a></td>\n<td>Compute histogram settings to store the PDF of input images</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_gradient_dense</span></code></a></td>\n<td>Computes the Gradient of the joint PDF w.r.t.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_gradient_sparse</span></code></a></td>\n<td>Computes the Gradient of the joint PDF w.r.t.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_pdfs_dense</span></code></a></td>\n<td>Computes the Probability Density Functions of two images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update_pdfs_sparse</span></code></a></td>\n<td>Computes the Probability Density Functions from a set of samples</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes joint histogram and derivatives with Parzen windows</p>\n<p>Base class to compute joint and marginal probability density\nfunctions and their derivatives with respect to a transform&#8217;s\nparameters. The smooth histograms are computed by using Parzen\nwindows [Parzen62] with a cubic spline kernel, as proposed by\nMattes et al. [Mattes03]. This implementation is not tied to any\noptimization (registration) method, the idea is that\ninformation-theoretic matching functionals (such as Mutual\nInformation) can inherit from this class to perform the low-level\ncomputations of the joint intensity distributions and its gradient\nw.r.t. the transform parameters. The derived class can then compute\nthe similarity/dissimilarity measure and gradient, and finally\ncommunicate the results to the appropriate optimizer.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>nbins</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of bins of the joint and marginal probability density\nfunctions (the actual number of bins of the joint PDF is nbins**2)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>We need this class in cython to allow _joint_pdf_gradient_dense_2d and\n_joint_pdf_gradient_dense_3d to use a nogil Jacobian function (obtained\nfrom an instance of the Transform class), which allows us to evaluate\nJacobians at all the sampling points (maybe the full grid) inside a\nnogil loop.</p>\n<p>The reason we need a class is to encapsulate all the parameters related\nto the joint and marginal distributions.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt>\n<dd>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt>\n<dd>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\">\n<code class=\"descname\">bin_index</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bin index associated with the given normalized intensity</p>\n<p>The return value is an integer in [padding, nbins - 1 - padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote>\n<div><p>intensity value normalized to the range covered by the histogram</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>bin</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the bin index associated with the given normalized intensity</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\">\n<code class=\"descname\">bin_normalize_moving</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the moving histogram</p>\n<p>If the input intensity is in [self.mmin, self.mmax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>x</strong> : float</p>\n<blockquote>\n<div><p>the intensity to be normalized</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>normalized intensity to the range covered by the moving histogram</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\">\n<code class=\"descname\">bin_normalize_static</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the static histogram</p>\n<p>If the input intensity is in [self.smin, self.smax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>x</strong> : float</p>\n<blockquote>\n<div><p>the intensity to be normalized</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>xnorm</strong> : float</p>\n<blockquote class=\"last\">\n<div><p>normalized intensity to the range covered by the static histogram</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute histogram settings to store the PDF of input images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, the behaviour is equivalent to smask=ones_like(static)</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, the behaviour is equivalent to mmask=ones_like(static)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\">\n<code class=\"descname\">update_gradient_dense</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>theta</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters of the transformation to compute the gradient from</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>grid2world</strong> : array, shape (4, 4)</p>\n<blockquote>\n<div><p>we assume that both images have already been sampled at a common\ngrid. This transform must map voxel coordinates of this common grid\nto physical coordinates of its corresponding voxel in the moving\nimage. For example, if the moving image was sampled on the static\nimage&#8217;s grid (this is the typical setting) using an aligning\nmatrix A, then</p>\n<ol class=\"arabic simple\">\n<li>grid2world = A.dot(static_affine)</li>\n</ol>\n<p>where static_affine is the transformation mapping static image&#8217;s\ngrid coordinates to physical space.</p>\n</div></blockquote>\n<p><strong>mgradient</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array, shape (S, R, C), optional</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array, shape (S, R, C), optional</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\">\n<code class=\"descname\">update_gradient_sparse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  gradient\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>theta</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>parameters to compute the gradient at</p>\n</div></blockquote>\n<p><strong>transform</strong> : instance of Transform</p>\n<blockquote>\n<div><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</div></blockquote>\n<p><strong>sval</strong> : array, shape (m,)</p>\n<blockquote>\n<div><p>sampled intensities from the static image at sampled_points</p>\n</div></blockquote>\n<p><strong>mval</strong> : array, shape (m,)</p>\n<blockquote>\n<div><p>sampled intensities from the moving image at sampled_points</p>\n</div></blockquote>\n<p><strong>sample_points</strong> : array, shape (m, 3)</p>\n<blockquote>\n<div><p>coordinates (in physical space) of the points the images were\nsampled at</p>\n</div></blockquote>\n<p><strong>mgradient</strong> : array, shape (m, 3)</p>\n<blockquote class=\"last\">\n<div><p>the gradient of the moving image at the sample points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\">\n<code class=\"descname\">update_pdfs_dense</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions of two images</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>smask</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>mask of static object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, ones_like(static) is used as mask.</p>\n</div></blockquote>\n<p><strong>mmask</strong> : array, shape (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>mask of moving object being registered (a binary array with 1&#8217;s\ninside the object of interest and 0&#8217;s along the background).\nIf None, ones_like(moving) is used as mask.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\">\n<code class=\"descname\">update_pdfs_sparse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions from a set of samples</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  distributions\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>sval</strong> : array, shape (n,)</p>\n<blockquote>\n<div><p>sampled intensities from the static image at sampled_points</p>\n</div></blockquote>\n<p><strong>mval</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>sampled intensities from the moving image at sampled_points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"scalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#scalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"dipy.align.imaffine.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"dipy.align.imaffine.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"dipy.align.imaffine.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"dipy.align.imaffine.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"dipy.align.imaffine.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"dipy.align.imaffine.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-centers-of-mass\">\n<h3>align_centers_of_mass<a class=\"headerlink\" href=\"#align-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_centers_of_mass\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_centers_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-geometric-centers\">\n<h3>align_geometric_centers<a class=\"headerlink\" href=\"#align-geometric-centers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_geometric_centers\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_geometric_centers</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"align-origins\">\n<h3>align_origins<a class=\"headerlink\" href=\"#align-origins\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.align_origins\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">align_origins</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.align_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"compute-parzen-mi\">\n<h3>compute_parzen_mi<a class=\"headerlink\" href=\"#compute-parzen-mi\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.compute_parzen_mi\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">compute_parzen_mi</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the mutual information and its gradient (if requested)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>joint</strong> : array, shape (nbins, nbins)</p>\n<blockquote>\n<div><p>the joint intensity distribution</p>\n</div></blockquote>\n<p><strong>joint_gradient</strong> : array, shape (nbins, nbins, n)</p>\n<blockquote>\n<div><p>the gradient of the joint distribution w.r.t. the transformation\nparameters</p>\n</div></blockquote>\n<p><strong>smarginal</strong> : array, shape (nbins,)</p>\n<blockquote>\n<div><p>the marginal intensity distribution of the static image</p>\n</div></blockquote>\n<p><strong>mmarginal</strong> : array, shape (nbins,)</p>\n<blockquote>\n<div><p>the marginal intensity distribution of the moving image</p>\n</div></blockquote>\n<p><strong>mi_gradient</strong> : array, shape (n,)</p>\n<blockquote class=\"last\">\n<div><p>the buffer in which to write the gradient of the mutual information.\nIf None, the gradient is not computed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-direction-and-spacings\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#get-direction-and-spacings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.get_direction_and_spacings\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image&#8217;s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient&#8217;s component by the voxel size along the corresponding\naxis, that&#8217;s what the spacings are used for. Since the image&#8217;s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (k, k), k = 3, 4</p>\n<blockquote>\n<div><p>the matrix transforming grid coordinates to physical space.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>direction</strong> : array, shape (k-1, k-1)</p>\n<blockquote>\n<div><p>the rotational component of the input matrix</p>\n</div></blockquote>\n<p><strong>spacings</strong> : array, shape (k-1,)</p>\n<blockquote class=\"last\">\n<div><p>the scaling component (voxel size) of the matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sample-domain-regular\">\n<h3>sample_domain_regular<a class=\"headerlink\" href=\"#sample-domain-regular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.sample_domain_regular\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">sample_domain_regular</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take floor(total_voxels/k) samples from a (2D or 3D) grid</p>\n<p>The sampling is made by taking all pixels whose index (in lexicographical\norder) is a multiple of k. Each selected point is slightly perturbed by\nadding a realization of a normally distributed random variable and then\nmapped to physical space by the given grid-to-space transform.</p>\n<p>The lexicographical order of a pixels in a grid of shape (a, b, c) is\ndefined by assigning to each voxel position (i, j, k) the integer index</p>\n<p>F((i, j, k)) = i * (b * c) + j * (c) + k</p>\n<p>and sorting increasingly by this index.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the sampling rate, as described before</p>\n</div></blockquote>\n<p><strong>shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the shape of the grid to be sampled</p>\n</div></blockquote>\n<p><strong>grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the grid-to-space transform</p>\n</div></blockquote>\n<p><strong>sigma</strong> : float</p>\n<blockquote>\n<div><p>the standard deviation of the Normal random distortion to be applied\nto the sampled points</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>samples</strong> : array, shape (total_pixels//k, dim)</p>\n<blockquote class=\"last\">\n<div><p>the matrix whose rows are the sampled points</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_centers_of_mass\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-geometric-centers\">\n<h3>transform_geometric_centers<a class=\"headerlink\" href=\"#transform-geometric-centers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_geometric_centers\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_geometric_centers</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the geometric center of the input images</p>\n<p>With &#8220;geometric center&#8221; of a volume we mean the physical coordinates of\nits central voxel</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe geometric center of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-origins\">\n<h3>transform_origins<a class=\"headerlink\" href=\"#transform-origins\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_origins\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">transform_origins</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the origins of the input images</p>\n<p>With &#8220;origin&#8221; of a volume we mean the physical coordinates of\nvoxel (0,0,0)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>static image</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the static image</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>moving image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_map</strong> : instance of AffineMap</p>\n<blockquote class=\"last\">\n<div><p>the affine transformation (translation only, in this case) aligning\nthe origin of the moving image towards the one of the static\nimage</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.warn\">\n<code class=\"descclassname\">dipy.align.imaffine.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id1\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.Bunch\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">Bunch</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.Bunch.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A &#8216;bunch&#8217; of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"dipy.align.imwarp.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">allocate</span></code></a>()</td>\n<td>Creates a zero displacement field</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_inversion_error</span></code></a>()</td>\n<td>Inversion error of the displacement fields</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">expand_fields</span></code></a>(expand_factors,&nbsp;new_shape)</td>\n<td>Expands the displacement fields from current shape to new_shape</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_backward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the backward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_forward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the forward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_simplified_transform</span></code></a>()</td>\n<td>Constructs a simplified version of this Diffeomorhic Map</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">interpret_matrix</span></code></a>(obj)</td>\n<td>Try to interpret <cite>obj</cite> as a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">inverse</span></code></a>()</td>\n<td>Inverse of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">shallow_copy</span></code></a>()</td>\n<td>Shallow copy of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interpolation,&nbsp;...])</td>\n<td>Warps an image in the forward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interpolation,&nbsp;...])</td>\n<td>Warps an image in the backward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">warp_endomorphism</span></code></a>(phi)</td>\n<td>Composition of this DiffeomorphicMap with a given endomorphism</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int, 2 or 3</p>\n<blockquote>\n<div><p>the transformation&#8217;s dimension</p>\n</div></blockquote>\n<p><strong>disp_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the deformation\nfield&#8217;s discretization</p>\n</div></blockquote>\n<p><strong>disp_grid2world</strong> : the voxel-to-space transform between the def. fields</p>\n<blockquote>\n<div><p>grid and space</p>\n</div></blockquote>\n<p><strong>domain_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the default\ndiscretizatio of this map&#8217;s domain</p>\n</div></blockquote>\n<p><strong>domain_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the default voxel-to-space transformation between this map&#8217;s\ndiscretization and physical space</p>\n</div></blockquote>\n<p><strong>codomain_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices (if 3D), rows and columns of the images that\nare &#8216;normally&#8217; warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is &#8216;normally&#8217; used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</div></blockquote>\n<p><strong>codomain_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation of images that are &#8216;normally&#8217;\nwarped using this transformation (in the forward direction).</p>\n</div></blockquote>\n<p><strong>prealign</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote class=\"last\">\n<div><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.allocate\">\n<code class=\"descname\">allocate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>residual</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</div></blockquote>\n<p><strong>stats</strong> : array, shape (3,)</p>\n<blockquote class=\"last\">\n<div><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\">\n<code class=\"descname\">expand_fields</code><span class=\"sig-paren\">(</span><em>expand_factors</em>, <em>new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>expand_factors</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</div></blockquote>\n<p><strong>new_shape</strong> : array, shape (dim,)</p>\n<blockquote class=\"last\">\n<div><p>the shape of the arrays holding the up-sampled discretization</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\">\n<code class=\"descname\">get_backward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the &#8216;is_inverse&#8217;\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\">\n<code class=\"descname\">get_forward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the &#8216;is_inverse&#8217;\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\">\n<code class=\"descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em>obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the &#8216;identity&#8217; string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>obj</strong> : object</p>\n<blockquote>\n<div><p>any object</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>obj</strong> : object</p>\n<blockquote class=\"last\">\n<div><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the &#8216;identity&#8217; string.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.inverse\">\n<code class=\"descname\">inverse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>inv</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the inverse of this diffeomorphic map.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\">\n<code class=\"descname\">shallow_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_map</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the shallow copy of this diffeomorphic map</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the &#8220;is_inverse&#8221; flag to switch between &#8220;forward&#8221;\nand &#8220;backward&#8221; (if is_inverse is False, then transform(...) warps the\nimage forwards, else it warps the image backwards).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</p>\n<blockquote>\n<div><p>the image to be warped under this transformation in the forward\ndirection</p>\n</div></blockquote>\n<p><strong>interpolation</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used for warping, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</div></blockquote>\n<p><strong>out_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices, rows and columns of the desired warped image</p>\n</div></blockquote>\n<p><strong>out_grid2world</strong> : the transformation bringing voxel coordinates of the</p>\n<blockquote>\n<div><p>warped image to physical space</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>warped</strong> : array, shape = out_shape or self.codomain_shape if None</p>\n<blockquote class=\"last\">\n<div><p>the warped image under this transformation in the forward direction</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the &#8220;is_inverse&#8221; flag to switch between &#8220;forward&#8221;\nand &#8220;backward&#8221; (if is_inverse is False, then transform_inverse(...)\nwarps the image backwards, else it warps the image forwards)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</p>\n<blockquote>\n<div><p>the image to be warped under this transformation in the forward\ndirection</p>\n</div></blockquote>\n<p><strong>interpolation</strong> : string, either &#8216;linear&#8217; or &#8216;nearest&#8217;</p>\n<blockquote>\n<div><p>the type of interpolation to be used for warping, either &#8216;linear&#8217;\n(for k-linear interpolation) or &#8216;nearest&#8217; for nearest neighbor</p>\n</div></blockquote>\n<p><strong>image_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</div></blockquote>\n<p><strong>out_shape</strong> : array, shape (dim,)</p>\n<blockquote>\n<div><p>the number of slices, rows and columns of the desired warped image</p>\n</div></blockquote>\n<p><strong>out_grid2world</strong> : the transformation bringing voxel coordinates of the</p>\n<blockquote>\n<div><p>warped image to physical space</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>warped</strong> : array, shape = out_shape or self.codomain_shape if None</p>\n<blockquote class=\"last\">\n<div><p>warped image under this transformation in the backward direction</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em>phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi&#8217;s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self&#8217;s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>phi</strong> : DiffeomorphicMap object</p>\n<blockquote>\n<div><p>the endomorphism to be warped by this diffeomorphic map</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>composition</strong> : the composition of this diffeomorphic map with the</p>\n<blockquote class=\"last\">\n<div><p>endomorphism given as input</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants&#8217; mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">DiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_map</span></code></a>()</td>\n<td>Returns the resulting diffeomorphic map after optimization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>()</td>\n<td>Starts the metric optimization</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_level_iters</span></code></a>(level_iters)</td>\n<td>Sets the number of iterations at each pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffeomorphic Registration</p>\n<p>This abstract class defines the interface to be implemented by any\noptimization algorithm for diffeomorphic registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : SimilarityMetric object</p>\n<blockquote class=\"last\">\n<div><p>the object measuring the similarity of the two images. The\nregistration algorithm will minimize (or maximize) the provided\nsimilarity.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\">\n<code class=\"descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map after optimization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the metric optimization</p>\n<p>This is the main function each specialized class derived from this must\nimplement. Upon completion, the deformation field must be available\nfrom the forward transformation model.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\">\n<code class=\"descname\">set_level_iters</code><span class=\"sig-paren\">(</span><em>level_iters</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the number of iterations at each pyramid level</p>\n<p>Establishes the maximum number of iterations to be performed at each\nlevel of the Gaussian pyramid, similar to ANTS.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level_iters</strong> : list</p>\n<blockquote class=\"last\">\n<div><p>the number of iterations at each level of the Gaussian pyramid.\nlevel_iters[0] corresponds to the finest level, level_iters[n-1]\nthe coarsest, where n is the length of the list</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id2\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"dipy.align.imwarp.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"dipy.align.imwarp.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"dipy.align.imwarp.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"dipy.align.imwarp.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"dipy.align.imwarp.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"dipy.align.imwarp.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_map</span></code></a>()</td>\n<td>Returns the resulting diffeomorphic map Returns the DiffeomorphicMap registering the moving image towards the static image.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving[,&nbsp;...])</td>\n<td>Starts the optimization</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_level_iters</span></code>(level_iters)</td>\n<td>Sets the number of iterations at each pyramid level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">update</span></code></a>(current_displacement,&nbsp;...)</td>\n<td>Composition of the current displacement field with the given field</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : SimilarityMetric object</p>\n<blockquote>\n<div><p>the metric to be optimized</p>\n</div></blockquote>\n<p><strong>level_iters</strong> : list of int</p>\n<blockquote>\n<div><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</div></blockquote>\n<p><strong>opt_tol</strong> : float</p>\n<blockquote>\n<div><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</div></blockquote>\n<p><strong>inv_iter</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</div></blockquote>\n<p><strong>step_length</strong> : float</p>\n<blockquote>\n<div><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</div></blockquote>\n<p><strong>ss_sigma_factor</strong> : float</p>\n<blockquote>\n<div><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, ..., n_scales is the scale</p>\n</div></blockquote>\n<p><strong>inv_tol</strong> : float</p>\n<blockquote>\n<div><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</div></blockquote>\n<p><strong>callback</strong> : function(SymmetricDiffeomorphicRegistration)</p>\n<blockquote class=\"last\">\n<div><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map\nReturns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array, shape (S, R, C) or (R, C)</p>\n<blockquote>\n<div><p>the image to be used as &#8220;moving&#8221; during optimization. Since the\ndeformation fields&#8217; discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by &#8220;pre-aligning&#8221; the moving image towards the\nstatic using an affine transformation given by the &#8216;prealign&#8217;\nmatrix</p>\n</div></blockquote>\n<p><strong>static_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated to the static image</p>\n</div></blockquote>\n<p><strong>moving_grid2world</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the voxel-to-space transformation associated to the moving image</p>\n</div></blockquote>\n<p><strong>prealign</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>static_to_ref</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"descname\">update</code><span class=\"sig-paren\">(</span><em>current_displacement</em>, <em>new_displacement</em>, <em>disp_world2grid</em>, <em>time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>current_displacement</strong> : array, shape (R&#8217;, C&#8217;, 2) or (S&#8217;, R&#8217;, C&#8217;, 3)</p>\n<blockquote>\n<div><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</div></blockquote>\n<p><strong>new_displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote>\n<div><p>the displacement field to be warped by current_displacement</p>\n</div></blockquote>\n<p><strong>disp_world2grid</strong> : array, shape (dim+1, dim+1)</p>\n<blockquote>\n<div><p>the space-to-grid transform associated with the displacements&#8217;\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</div></blockquote>\n<p><strong>time_scaling</strong> : float</p>\n<blockquote>\n<div><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>updated</strong> : array, shape (the same as new_displacement)</p>\n<blockquote>\n<div><p>the warped displacement field</p>\n</div></blockquote>\n<p class=\"last\"><strong>mean_norm</strong> : the mean norm of all vectors in current_displacement</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imwarp.floating\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.imwarp.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id4\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.get_direction_and_spacings\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image&#8217;s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient&#8217;s component by the voxel size along the corresponding\naxis, that&#8217;s what the spacings are used for. Since the image&#8217;s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>affine</strong> : array, shape (k, k), k = 3, 4</p>\n<blockquote>\n<div><p>the matrix transforming grid coordinates to physical space.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>direction</strong> : array, shape (k-1, k-1)</p>\n<blockquote>\n<div><p>the rotational component of the input matrix</p>\n</div></blockquote>\n<p><strong>spacings</strong> : array, shape (k-1,)</p>\n<blockquote class=\"last\">\n<div><p>the scaling component (voxel size) of the matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mult-aff\">\n<h3>mult_aff<a class=\"headerlink\" href=\"#mult-aff\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.mult_aff\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">mult_aff</code><span class=\"sig-paren\">(</span><em>A</em>, <em>B</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.mult_aff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the matrix product A.dot(B) considering None as the identity</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>A</strong> : array, shape (n,k)</p>\n<p><strong>B</strong> : array, shape (k,m)</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>The matrix product A.dot(B). If any of the input matrices is None, it is</strong> :</p>\n<p class=\"last\"><strong>treated as the identity matrix. If both matrices are None, None is returned</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"with-metaclass\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#with-metaclass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.with_metaclass\">\n<code class=\"descclassname\">dipy.align.imwarp.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.CCMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">CCMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"dipy.align.metrics.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"dipy.align.metrics.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the moving image towards the static.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"dipy.align.metrics.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"dipy.align.metrics.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>Numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"dipy.align.metrics.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>sigma_diff</strong> : the standard deviation of the Gaussian smoothing kernel to</p>\n<blockquote>\n<div><p>be applied to the update field at each iteration</p>\n</div></blockquote>\n<p><strong>radius</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.EMMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">EMMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"dipy.align.metrics.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"dipy.align.metrics.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for EM metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"dipy.align.metrics.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"dipy.align.metrics.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"dipy.align.metrics.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"dipy.align.metrics.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the moving image.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>smooth</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</div></blockquote>\n<p><strong>inner_iter</strong> : int</p>\n<blockquote>\n<div><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</div></blockquote>\n<p><strong>q_levels</strong> : number of quantization levels (equal to the number of hidden</p>\n<blockquote>\n<div><p>variables in the EM algorithm)</p>\n</div></blockquote>\n<p><strong>double_gradient</strong> : boolean</p>\n<blockquote>\n<div><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</div></blockquote>\n<p><strong>step_type</strong> : string (&#8216;gauss_newton&#8217;, &#8216;demons&#8217;)</p>\n<blockquote class=\"last\">\n<div><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Demons step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Newton step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion</dt>\n<dd>estimation: combining highest accuracy with real-time\nperformance&#8221;, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\">\n<code class=\"descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_moving_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia &#8216;set_moving_image(...)&#8217;, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\">\n<code class=\"descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_static_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia &#8216;set_static_image(...)&#8217;, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SSDMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"dipy.align.metrics.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"dipy.align.metrics.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for SSD metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"dipy.align.metrics.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"dipy.align.metrics.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Nothing to free for the SSD metric</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"dipy.align.metrics.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"dipy.align.metrics.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote>\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n<p><strong>smooth</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</div></blockquote>\n<p><strong>inner_iter</strong> : int</p>\n<blockquote>\n<div><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</div></blockquote>\n<p><strong>step_type</strong> : string</p>\n<blockquote class=\"last\">\n<div><p>the displacement field step to be computed when &#8216;compute_forward&#8217;\nand &#8216;compute_backward&#8217; are called. Either &#8216;demons&#8217; or\n&#8216;gauss_newton&#8217;</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape (R, C, 2) or (S, R, C, 3)</p>\n<blockquote class=\"last\">\n<div><p>the Demons step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt>\n<dd>Nicholas Ayache, &#8220;Diffeomorphic Demons: Efficient\nNon-parametric Image Registration&#8221;, Neuroimage 2009</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>forward_step</strong> : boolean</p>\n<blockquote>\n<div><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>displacement</strong> : array, shape = static_image.shape + (3,)</p>\n<blockquote class=\"last\">\n<div><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"similaritymetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a><a class=\"headerlink\" href=\"#similaritymetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SimilarityMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">SimilarityMetric</code><span class=\"sig-paren\">(</span><em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"dipy.align.metrics.SimilarityMetric.compute_backward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"dipy.align.metrics.SimilarityMetric.compute_forward\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"dipy.align.metrics.SimilarityMetric.free_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Releases the resources no longer needed by the metric</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"dipy.align.metrics.SimilarityMetric.get_energy\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>Numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_above\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_above</span></code></a>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_below\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_levels_below</span></code></a>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"dipy.align.metrics.SimilarityMetric.set_moving_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_moving_image</span></code></a>(moving_image,&nbsp;...)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"dipy.align.metrics.SimilarityMetric.set_static_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">set_static_image</span></code></a>(static_image,&nbsp;...)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(...)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Similarity Metric abstract class</p>\n<p>A similarity metric is in charge of keeping track of the numerical\nvalue of the similarity (or distance) between the two given images. It\nalso computes the update field for the forward and inverse displacement\nfields to be used in a gradient-based optimization algorithm. Note that\nthis metric does not depend on any transformation (affine or\nnon-linear) so it assumes the static and moving images are already\nwarped</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>dim</strong> : int (either 2 or 3)</p>\n<blockquote class=\"last\">\n<div><p>the dimension of the image domain</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the backward update field to register the static image towards\nthe moving image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Releases the resources no longer needed by the metric</p>\n<p>This method is called by the RegistrationOptimizer after the required\niterations have been computed (forward and / or backward) so that the\nSimilarityMetric can safely delete any data it computed as part of the\ninitialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Must return the numeric value of the similarity between the given\nstatic and moving images</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>This method will be called before any compute_forward or\ncompute_backward call, this allows the Metric to pre-compute any useful\ninformation for speeding up the update computations. This\ninitialization was needed in ANTS because the updates are called once\nper voxel. In Python this is unpractical, though.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_above\">\n<code class=\"descname\">set_levels_above</code><span class=\"sig-paren\">(</span><em>levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are above the current one</p>\n<p>Informs this metric the number of pyramid levels above the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>levels</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of levels above the current Gaussian Pyramid level</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_below\">\n<code class=\"descname\">set_levels_below</code><span class=\"sig-paren\">(</span><em>levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are below the current one</p>\n<p>Informs this metric the number of pyramid levels below the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>levels</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>the number of levels below the current Gaussian Pyramid level</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_moving_image\">\n<code class=\"descname\">set_moving_image</code><span class=\"sig-paren\">(</span><em>moving_image</em>, <em>moving_affine</em>, <em>moving_spacing</em>, <em>moving_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the moving image being compared against the static one.</p>\n<p>Sets the moving image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>the moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_static_image\">\n<code class=\"descname\">set_static_image</code><span class=\"sig-paren\">(</span><em>static_image</em>, <em>static_affine</em>, <em>static_spacing</em>, <em>static_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the static image being compared against the moving one.</p>\n<p>Sets the static image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote class=\"last\">\n<div><p>the static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\">\n<code class=\"descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_moving_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None if\nthe original_moving_image equals self.moving_image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_moving_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>original image from which the current moving image was generated</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to original image to generate\nthe current moving image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\">\n<code class=\"descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_static_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None\nif the original_static_image equals self.moving_image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>original_static_image</strong> : array, shape (R, C) or (S, R, C)</p>\n<blockquote>\n<div><p>original image from which the current static image was generated</p>\n</div></blockquote>\n<p><strong>transformation</strong> : DiffeomorphicMap object</p>\n<blockquote class=\"last\">\n<div><p>the transformation that was applied to original image to generate\nthe current static image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.metrics.floating\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.metrics.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient\">\n<h3>gradient<a class=\"headerlink\" href=\"#gradient\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.gradient\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">gradient</code><span class=\"sig-paren\">(</span><em>f</em>, <em>*varargs</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the gradient of an N-dimensional array.</p>\n<p>The gradient is computed using second order accurate central differences\nin the interior and either first differences or second order accurate\none-sides (forward or backwards) differences at the boundaries. The\nreturned gradient hence has the same shape as the input array.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>f</strong> : array_like</p>\n<blockquote>\n<div><p>An N-dimensional array containing samples of a scalar function.</p>\n</div></blockquote>\n<p><strong>varargs</strong> : scalar or list of scalar, optional</p>\n<blockquote>\n<div><p>N scalars specifying the sample distances for each dimension,\ni.e. <cite>dx</cite>, <cite>dy</cite>, <cite>dz</cite>, ... Default distance: 1.\nsingle scalar specifies sample distance for all dimensions.\nif <cite>axis</cite> is given, the number of varargs must equal the number of axes.</p>\n</div></blockquote>\n<p><strong>edge_order</strong> : {1, 2}, optional</p>\n<blockquote>\n<div><p>Gradient is calculated using N<sup>th</sup> order accurate differences\nat the boundaries. Default: 1.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified\">New in version 1.9.1.</span></p>\n</div>\n</div></blockquote>\n<p><strong>axis</strong> : None or int or tuple of ints, optional</p>\n<blockquote>\n<div><p>Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes of the input array.\naxis may be negative, in which case it counts from the last to the first axis.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified\">New in version 1.11.0.</span></p>\n</div>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>gradient</strong> : list of ndarray</p>\n<blockquote class=\"last\">\n<div><p>Each element of <cite>list</cite> has the same shape as <cite>f</cite> giving the derivative\nof <cite>f</cite> with respect to each dimension.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])</span>\n</pre></div>\n</div>\n<p>For two dimensional arrays, the return will be two arrays ordered by\naxis. In this example the first array stands for the gradient in\nrows and the second one in columns direction:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">))</span>\n<span class=\"go\">[array([[ 2.,  2., -1.],</span>\n<span class=\"go\">        [ 2.,  2., -1.]]), array([[ 1. ,  2.5,  4. ],</span>\n<span class=\"go\">        [ 1. ,  1. ,  1. ]])]</span>\n</pre></div>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">edge_order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([-0.,  2.,  4.,  6.,  8.])</span>\n</pre></div>\n</div>\n<p>The axis keyword can be used to specify a subset of axes of which the gradient is calculated\n&gt;&gt;&gt; np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float), axis=0)\narray([[ 2.,  2., -1.],</p>\n<blockquote>\n<div>[ 2.,  2., -1.]])</div></blockquote>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-2d\">\n<h3>v_cycle_2d<a class=\"headerlink\" href=\"#v-cycle-2d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_2d\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">v_cycle_2d</code><span class=\"sig-paren\">(</span><em>n</em>, <em>k</em>, <em>delta_field</em>, <em>sigma_sq_field</em>, <em>gradient_field</em>, <em>target</em>, <em>lambda_param</em>, <em>displacement</em>, <em>depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the Gauss-Newton linear system\nby first filtering (GS-iterate) the current level, then solves for the\nresidual at a coarser resolution and finally refines the solution at the\ncurrent resolution. This scheme corresponds to the V-cycle proposed by\nBruhn and Weickert[Bruhn05].</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>n</strong> : int</p>\n<blockquote>\n<div><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</div></blockquote>\n<p><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations at each multi-resolution level</p>\n</div></blockquote>\n<p><strong>delta_field</strong> : array, shape (R, C)</p>\n<blockquote>\n<div><p>the difference between the static and moving image (the &#8216;derivative\nw.r.t. time&#8217; in the optical flow model)</p>\n</div></blockquote>\n<p><strong>sigma_sq_field</strong> : array, shape (R, C)</p>\n<blockquote>\n<div><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</div></blockquote>\n<p><strong>gradient_field</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>target</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>right-hand side of the linear system to be solved in the Weickert&#8217;s\nmulti-resolution algorithm</p>\n</div></blockquote>\n<p><strong>lambda_param</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</div></blockquote>\n<p><strong>displacement</strong> : array, shape (R, C, 2)</p>\n<blockquote>\n<div><p>the displacement field to start the optimization from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>energy</strong> : the energy of the EM (or SSD if sigmafield[...]==1) metric at this</p>\n<blockquote class=\"last\">\n<div><p>iteration</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion</dt>\n<dd>estimation: combining highest accuracy with real-time\nperformance&#8221;, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-3d\">\n<h3>v_cycle_3d<a class=\"headerlink\" href=\"#v-cycle-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_3d\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">v_cycle_3d</code><span class=\"sig-paren\">(</span><em>n</em>, <em>k</em>, <em>delta_field</em>, <em>sigma_sq_field</em>, <em>gradient_field</em>, <em>target</em>, <em>lambda_param</em>, <em>displacement</em>, <em>depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the linear system by first\nfiltering (GS-iterate) the current level, then solves for the residual\nat a coarser resolution and finally refines the solution at the current\nresolution. This scheme corresponds to the V-cycle proposed by Bruhn and\nWeickert[1].\n[1] Andres Bruhn and Joachim Weickert, &#8220;Towards ultimate motion estimation:</p>\n<blockquote>\n<div>combining highest accuracy with real-time performance&#8221;,\n10th IEEE International Conference on Computer Vision, 2005.\nICCV 2005.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>n</strong> : int</p>\n<blockquote>\n<div><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</div></blockquote>\n<p><strong>k</strong> : int</p>\n<blockquote>\n<div><p>the number of iterations at each multi-resolution level</p>\n</div></blockquote>\n<p><strong>delta_field</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>the difference between the static and moving image (the &#8216;derivative\nw.r.t. time&#8217; in the optical flow model)</p>\n</div></blockquote>\n<p><strong>sigma_sq_field</strong> : array, shape (S, R, C)</p>\n<blockquote>\n<div><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</div></blockquote>\n<p><strong>gradient_field</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the gradient of the moving image</p>\n</div></blockquote>\n<p><strong>target</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>right-hand side of the linear system to be solved in the Weickert&#8217;s\nmulti-resolution algorithm</p>\n</div></blockquote>\n<p><strong>lambda_param</strong> : float</p>\n<blockquote>\n<div><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</div></blockquote>\n<p><strong>displacement</strong> : array, shape (S, R, C, 3)</p>\n<blockquote>\n<div><p>the displacement field to start the optimization from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>energy</strong> : the energy of the EM (or SSD if sigmafield[...]==1) metric at this</p>\n<blockquote class=\"last\">\n<div><p>iteration</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id6\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.with_metaclass\">\n<code class=\"descclassname\">dipy.align.metrics.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pool\">\n<h3>Pool<a class=\"headerlink\" href=\"#pool\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.Pool\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">Pool</code><span class=\"sig-paren\">(</span><em>processes=None</em>, <em>initializer=None</em>, <em>initargs=()</em>, <em>maxtasksperchild=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.Pool\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a process pool object</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affine-transform\">\n<h3>affine_transform<a class=\"headerlink\" href=\"#affine-transform\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.affine_transform\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">affine_transform</code><span class=\"sig-paren\">(</span><em>input</em>, <em>matrix</em>, <em>offset=0.0</em>, <em>output_shape=None</em>, <em>output=None</em>, <em>order=3</em>, <em>mode='constant'</em>, <em>cval=0.0</em>, <em>prefilter=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.affine_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply an affine transformation.</p>\n<p>The given matrix and offset are used to find for each point in the\noutput the corresponding coordinates in the input by an affine\ntransformation. The value of the input at those coordinates is\ndetermined by spline interpolation of the requested order. Points\noutside the boundaries of the input are filled according to the given\nmode.</p>\n<p>If a two-dimensional array is supplied to the matrix parameter,\ngiven an output image pixel index vector <code class=\"docutils literal\"><span class=\"pre\">o</span></code>, the pixel value\nis determined from the input image at position <code class=\"docutils literal\"><span class=\"pre\">np.dot(matrix,o)</span> <span class=\"pre\">+</span> <span class=\"pre\">offset</span></code>.</p>\n<p>A diagonal matrix can be specified by supplying a one-dimensional\narray-like to the matrix parameter, in which case a more efficient\nalgorithm is applied.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Currently, the exact interpretation of the affine transformation\ndepends on whether the matrix is supplied as a one-dimensional or\ntwo-dimensional array. This is considered a bug, and starting from\nscipy 0.18.0, the behaviour for one-dimensional matrix arguments will\nbe modified to match the two-dimensional case.</p>\n<p class=\"last\">Until then, if a one-dimensional array is supplied to the matrix\nparameter, the output pixel value at index <code class=\"docutils literal\"><span class=\"pre\">o</span></code> is determined from\nthe input image at position <code class=\"docutils literal\"><span class=\"pre\">matrix</span> <span class=\"pre\">*</span> <span class=\"pre\">(o</span> <span class=\"pre\">+</span> <span class=\"pre\">offset)</span></code>.</p>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input</strong> : ndarray</p>\n<blockquote>\n<div><p>The input array.</p>\n</div></blockquote>\n<p><strong>matrix</strong> : ndarray</p>\n<blockquote>\n<div><p>The matrix must be two-dimensional or can also be given as a\none-dimensional sequence or array. In the latter case, it is assumed\nthat the matrix is diagonal. A more efficient algorithms is then\napplied that exploits the separability of the problem.</p>\n</div></blockquote>\n<p><strong>offset</strong> : float or sequence, optional</p>\n<blockquote>\n<div><p>The offset into the array where the transform is applied. If a float,\n<cite>offset</cite> is the same for each axis. If a sequence, <cite>offset</cite> should\ncontain one value for each axis.</p>\n</div></blockquote>\n<p><strong>output_shape</strong> : tuple of ints, optional</p>\n<blockquote>\n<div><p>Shape tuple.</p>\n</div></blockquote>\n<p><strong>output</strong> : ndarray or dtype, optional</p>\n<blockquote>\n<div><p>The array in which to place the output, or the dtype of the returned\narray.</p>\n</div></blockquote>\n<p><strong>order</strong> : int, optional</p>\n<blockquote>\n<div><p>The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.</p>\n</div></blockquote>\n<p><strong>mode</strong> : str, optional</p>\n<blockquote>\n<div><p>Points outside the boundaries of the input are filled according\nto the given mode (&#8216;constant&#8217;, &#8216;nearest&#8217;, &#8216;reflect&#8217; or &#8216;wrap&#8217;).\nDefault is &#8216;constant&#8217;.</p>\n</div></blockquote>\n<p><strong>cval</strong> : scalar, optional</p>\n<blockquote>\n<div><p>Value used for points outside the boundaries of the input if\n<code class=\"docutils literal\"><span class=\"pre\">mode='constant'</span></code>. Default is 0.0</p>\n</div></blockquote>\n<p><strong>prefilter</strong> : bool, optional</p>\n<blockquote>\n<div><p>The parameter prefilter determines if the input is pre-filtered with\n<cite>spline_filter</cite> before interpolation (necessary for spline\ninterpolation of order &gt; 1).  If False, it is assumed that the input is\nalready filtered. Default is True.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>affine_transform</strong> : ndarray or None</p>\n<blockquote class=\"last\">\n<div><p>The transformed input. If <cite>output</cite> is given as a parameter, None is\nreturned.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cpu-count\">\n<h3>cpu_count<a class=\"headerlink\" href=\"#cpu-count\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.cpu_count\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">cpu_count</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.cpu_count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the number of CPUs in the system</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.reslice\">\n<code class=\"descclassname\">dipy.align.reslice.</code><code class=\"descname\">reslice</code><span class=\"sig-paren\">(</span><em>data</em>, <em>affine</em>, <em>zooms</em>, <em>new_zooms</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal\"><span class=\"pre\">new_zooms</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>data</strong> : array, shape (I,J,K) or (I,J,K,N)</p>\n<blockquote>\n<div><p>3d volume or 4d volume with datasets</p>\n</div></blockquote>\n<p><strong>affine</strong> : array, shape (4,4)</p>\n<blockquote>\n<div><p>mapping from voxel coordinates to world coordinates</p>\n</div></blockquote>\n<p><strong>zooms</strong> : tuple, shape (3,)</p>\n<blockquote>\n<div><p>voxel size for (i,j,k) dimensions</p>\n</div></blockquote>\n<p><strong>new_zooms</strong> : tuple, shape (3,)</p>\n<blockquote>\n<div><p>new voxel size for (i,j,k) after resampling</p>\n</div></blockquote>\n<p><strong>order</strong> : int, from 0 to 5</p>\n<blockquote>\n<div><p>order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don&#8217;t want any smoothing 0 is the option you need.</p>\n</div></blockquote>\n<p><strong>mode</strong> : string (&#8216;constant&#8217;, &#8216;nearest&#8217;, &#8216;reflect&#8217; or &#8216;wrap&#8217;)</p>\n<blockquote>\n<div><p>Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</div></blockquote>\n<p><strong>cval</strong> : float</p>\n<blockquote>\n<div><p>Value used for points outside the boundaries of the input if\nmode=&#8217;constant&#8217;.</p>\n</div></blockquote>\n<p><strong>num_processes</strong> : int</p>\n<blockquote>\n<div><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>data2</strong> : array, shape (I,J,K) or (I,J,K,N)</p>\n<blockquote>\n<div><p>datasets resampled into isotropic voxel size</p>\n</div></blockquote>\n<p><strong>affine2</strong> : array, shape (4,4)</p>\n<blockquote class=\"last\">\n<div><p>new affine for the resampled image</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fimg</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fimg</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id7\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>factors</em>, <em>sigmas</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>factors</strong> : list of floats</p>\n<blockquote>\n<div><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</div></blockquote>\n<p><strong>sigmas</strong> : list of floats</p>\n<blockquote>\n<div><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id8\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"dipy.align.scalespace.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine</span></code></a>(level)</td>\n<td>Voxel-to-space transformation at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</td>\n<td>Space-to-voxel transformation at a given level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</td>\n<td>Shape the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,&nbsp;to_level)</td>\n<td>Ratio of voxel size from pyramid level from_level to to_level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"dipy.align.scalespace.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_image</span></code></a>(level)</td>\n<td>Smoothed image at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"dipy.align.scalespace.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_scaling</span></code></a>(level)</td>\n<td>Adjustment factor for input-spacing to reflect voxel sizes at level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"dipy.align.scalespace.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_sigmas</span></code></a>(level)</td>\n<td>Smoothing parameters used at a given level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"dipy.align.scalespace.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">get_spacing</span></code></a>(level)</td>\n<td>Spacings the sub-sampled image must have at a particular level</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"dipy.align.scalespace.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_level</span></code></a>(level)</td>\n<td>Prints properties of a pyramid level</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>image</em>, <em>num_levels</em>, <em>image_grid2world=None</em>, <em>input_spacing=None</em>, <em>sigma_factor=0.2</em>, <em>mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image&#8217;s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, ..., the sigma is given by\n<span class=\"math\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>image</strong> : array, shape (r,c) or (s, r, c) where s is the number of</p>\n<blockquote>\n<div><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</div></blockquote>\n<p><strong>num_levels</strong> : int</p>\n<blockquote>\n<div><p>the desired number of levels (resolutions) of the scale space</p>\n</div></blockquote>\n<p><strong>image_grid2world</strong> : array, shape (dim + 1, dim + 1), optional</p>\n<blockquote>\n<div><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</div></blockquote>\n<p><strong>input_spacing</strong> : array, shape (dim,), optional</p>\n<blockquote>\n<div><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</div></blockquote>\n<p><strong>sigma_factor</strong> : float, optional</p>\n<blockquote>\n<div><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</div></blockquote>\n<p><strong>mask0</strong> : Boolean, optional</p>\n<blockquote class=\"last\">\n<div><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get affine transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the affine (voxel-to-space) transform at the requested resolution</strong> :</p>\n<blockquote class=\"last\">\n<div><p>or None if an invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\">\n<code class=\"descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the inverse transform from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the inverse (space-to-voxel) transform at the requested resolution or</strong> :</p>\n<p class=\"last\"><strong>None if an invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\">\n<code class=\"descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the sub-sampled shape at the requested resolution or None if an</strong> :</p>\n<blockquote class=\"last\">\n<div><p>invalid level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\">\n<code class=\"descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em>from_level</em>, <em>to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n&#8216;expand&#8217; them to level b).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>from_level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the resolution to expand voxels from</p>\n</div></blockquote>\n<p><strong>to_level</strong> : int, 0 &lt;= to_level &lt; from_level</p>\n<blockquote>\n<div><p>the resolution to expand voxels to</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>factors</strong> : array, shape (k,), k = 2, 3</p>\n<blockquote class=\"last\">\n<div><p>the expand factors (a scalar for each voxel dimension)</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_image\">\n<code class=\"descname\">get_image</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smooth image from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the smooth image at the requested resolution or None if an invalid</strong> :</p>\n<blockquote class=\"last\">\n<div><p>level was requested</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_scaling\">\n<code class=\"descname\">get_scaling</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the scalings from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the scaling factors from the original spacing to the spacings at the</strong> :</p>\n<p class=\"last\"><strong>requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_sigmas\">\n<code class=\"descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the smoothing parameters from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>the smoothing parameters at the requested level</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_spacing\">\n<code class=\"descname\">get_spacing</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote>\n<div><p>the scale space level to get the sub-sampled shape from</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>the spacings (voxel sizes) at the requested resolution or None if an</strong> :</p>\n<p class=\"last\"><strong>invalid level was requested</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.print_level\">\n<code class=\"descname\">print_level</code><span class=\"sig-paren\">(</span><em>level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>level</strong> : int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</p>\n<blockquote class=\"last\">\n<div><p>the scale space level to be printed</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.scalespace.floating\">\n<code class=\"descclassname\">dipy.align.scalespace.</code><code class=\"descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.scalespace.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleMinDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMetric is that this creates\nthe entire distance matrix and therefore requires more memory.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Fixed or reference set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote class=\"last\">\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n<p>Num_threads is not used in this class. Use <code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code>\nfor a faster, threaded and less memory hungry metric</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleMinDistanceMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"garyfallidis14\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis14]</td><td>Garyfallidis et al., &#8220;Direct native-space fiber\nbundle alignment for group comparisons&#8221;, ISMRM,\n2014.</td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector,</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Fixed or reference set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote>\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlesumdistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlesumdistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">BundleSumDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dipy.align.streamlinear.BundleMinDistanceMatrixMetric</span></code></a></p>\n<p>Bundle-based Sum Distance aka BMD</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMatrixMetric is that it uses\nuses the sum of the distance matrix and not the sum of mins.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td>setup(static, moving)</td>\n<td>&nbsp;</td>\n</tr>\n<tr class=\"row-even\"><td>distance(xopt)</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>xopt</strong> : sequence</p>\n<blockquote class=\"last\">\n<div><p>List of affine parameters as an 1D vector</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id11\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.Optimizer\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">Optimizer</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer.print_summary\" title=\"dipy.align.streamlinear.Optimizer.print_summary\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">print_summary</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fun</em>, <em>x0</em>, <em>args=()</em>, <em>method='L-BFGS-B'</em>, <em>jac=None</em>, <em>hess=None</em>, <em>hessp=None</em>, <em>bounds=None</em>, <em>constraints=()</em>, <em>tol=None</em>, <em>callback=None</em>, <em>options=None</em>, <em>evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>fun</strong> : callable</p>\n<blockquote>\n<div><p>Objective function.</p>\n</div></blockquote>\n<p><strong>x0</strong> : ndarray</p>\n<blockquote>\n<div><p>Initial guess.</p>\n</div></blockquote>\n<p><strong>args</strong> : tuple, optional</p>\n<blockquote>\n<div><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</div></blockquote>\n<p><strong>method</strong> : str, optional</p>\n<blockquote>\n<div><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8216;Nelder-Mead&#8217;</li>\n<li>&#8216;Powell&#8217;</li>\n<li>&#8216;CG&#8217;</li>\n<li>&#8216;BFGS&#8217;</li>\n<li>&#8216;Newton-CG&#8217;</li>\n<li>&#8216;Anneal&#8217;</li>\n<li>&#8216;L-BFGS-B&#8217;</li>\n<li>&#8216;TNC&#8217;</li>\n<li>&#8216;COBYLA&#8217;</li>\n<li>&#8216;SLSQP&#8217;</li>\n<li>&#8216;dogleg&#8217;</li>\n<li>&#8216;trust-ncg&#8217;</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n<p><strong>jac</strong> : bool or callable, optional</p>\n<blockquote>\n<div><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</div></blockquote>\n<p><strong>hess, hessp</strong> : callable, optional</p>\n<blockquote>\n<div><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : sequence, optional</p>\n<blockquote>\n<div><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</div></blockquote>\n<p><strong>constraints</strong> : dict or sequence of dict, optional</p>\n<blockquote>\n<div><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>type</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span><dd><p class=\"first last\">Constraint type: &#8216;eq&#8217; for equality, &#8216;ineq&#8217; for inequality.</p>\n</dd>\n<dt>fun</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span><dd><p class=\"first last\">The function defining the constraint.</p>\n</dd>\n<dt>jac</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable, optional</span><dd><p class=\"first last\">The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, optional</span><dd><p class=\"first last\">Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</div></blockquote>\n<p><strong>tol</strong> : float, optional</p>\n<blockquote>\n<div><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</div></blockquote>\n<p><strong>callback</strong> : callable, optional</p>\n<blockquote>\n<div><p>Called after each iteration, as <code class=\"docutils literal\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</div></blockquote>\n<p><strong>options</strong> : dict, optional</p>\n<blockquote>\n<div><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>maxiter</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span><dd><p class=\"first last\">Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp</dt>\n <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span><dd><p class=\"first last\">Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(&#8216;minimize&#8217;, method)</cite>.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : bool, optional</p>\n<blockquote class=\"last\">\n<div><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">scipy.optimize.minimize</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.evolution\">\n<code class=\"descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.fopt\">\n<code class=\"descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.message\">\n<code class=\"descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nfev\">\n<code class=\"descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nit\">\n<code class=\"descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.print_summary\">\n<code class=\"descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Optimizer.xopt\">\n<code class=\"descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinedistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#streamlinedistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineDistanceMetric</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal\"><span class=\"pre\">abc.NewBase</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">distance</span></code></a>(xopt)</td>\n<td>calculate distance for current set of parameters</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">setup</span></code></a>(static,&nbsp;moving)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>calculate distance for current set of parameters</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinelinearregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#streamlinelinearregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineLinearRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>x0='rigid'</em>, <em>method='L-BFGS-B'</em>, <em>bounds=None</em>, <em>verbose=False</em>, <em>options=None</em>, <em>evolution=False</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving[,&nbsp;mat])</td>\n<td>Find the minimum of the provided metric.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>x0='rigid'</em>, <em>method='L-BFGS-B'</em>, <em>bounds=None</em>, <em>verbose=False</em>, <em>options=None</em>, <em>evolution=False</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"#id13\" id=\"id12\">[Garyfallidis14]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>metric</strong> : StreamlineDistanceMetric,</p>\n<blockquote>\n<div><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</div></blockquote>\n<p><strong>x0</strong> : array or int or str</p>\n<blockquote>\n<div><p>Initial parametrization for the optimization.</p>\n<dl class=\"docutils\">\n<dt>If 1D array with:</dt>\n<dd><p class=\"first\">a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p class=\"last\">This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt>\n<dd><ol class=\"first last loweralpha\">\n<li><dl class=\"first docutils\">\n<dt>6</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>7</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>12</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt>\n<dd><ol class=\"first last loweralpha\">\n<li><dl class=\"first docutils\">\n<dt>&#8220;rigid&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&#8220;similarity&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&#8220;affine&#8221;</dt>\n<dd><p class=\"first last\"><code class=\"docutils literal\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</div></blockquote>\n<p><strong>method</strong> : str,</p>\n<blockquote>\n<div><p>&#8216;L_BFGS_B&#8217; or &#8216;Powell&#8217; optimizers can be used. Default is\n&#8216;L_BFGS_B&#8217;.</p>\n</div></blockquote>\n<p><strong>bounds</strong> : list of tuples or None,</p>\n<blockquote>\n<div><p>If method == &#8216;L_BFGS_B&#8217; then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</div></blockquote>\n<p><strong>verbose</strong> : bool,</p>\n<blockquote>\n<div><p>If True then information about the optimization is shown.</p>\n</div></blockquote>\n<p><strong>options</strong> : None or dict,</p>\n<blockquote>\n<div><p>Extra options to be used with the selected method.</p>\n</div></blockquote>\n<p><strong>evolution</strong> : boolean</p>\n<blockquote>\n<div><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"id13\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis14]</td><td>Garyfallidis et al., &#8220;Direct native-space fiber\nbundle alignment for group comparisons&#8221;, ISMRM,\n2014.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>mat=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>static</strong> : streamlines</p>\n<blockquote>\n<div><p>Reference or fixed set of streamlines.</p>\n</div></blockquote>\n<p><strong>moving</strong> : streamlines</p>\n<blockquote>\n<div><p>Moving set of streamlines.</p>\n</div></blockquote>\n<p><strong>mat</strong> : array</p>\n<blockquote>\n<div><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>map</strong> : StreamlineRegistrationMap</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlineregistrationmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><a class=\"headerlink\" href=\"#streamlineregistrationmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">StreamlineRegistrationMap</code><span class=\"sig-paren\">(</span><em>matopt</em>, <em>xopt</em>, <em>fopt</em>, <em>matopt_history</em>, <em>funcs</em>, <em>iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/2/library/functions.html#object\" title=\"(in Python v2.7)\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">transform</span></code></a>(moving)</td>\n<td>Transform moving streamlines to the static.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>matopt</em>, <em>xopt</em>, <em>fopt</em>, <em>matopt_history</em>, <em>funcs</em>, <em>iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A map holding the optimum affine matrix and some other parameters\nof the optimization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>matrix</strong> : array,</p>\n<blockquote>\n<div><p>4x4 affine matrix which transforms the moving to the static\nstreamlines</p>\n</div></blockquote>\n<p><strong>xopt</strong> : array,</p>\n<blockquote>\n<div><p>1d array with the parameters of the transformation after centering</p>\n</div></blockquote>\n<p><strong>fopt</strong> : float,</p>\n<blockquote>\n<div><p>final value of the metric</p>\n</div></blockquote>\n<p><strong>matrix_history</strong> : array</p>\n<blockquote>\n<div><p>All transformation matrices created during the optimization</p>\n</div></blockquote>\n<p><strong>funcs</strong> : int,</p>\n<blockquote>\n<div><p>Number of function evaluations of the optimizer</p>\n</div></blockquote>\n<p><strong>iterations</strong> : int</p>\n<blockquote class=\"last\">\n<div><p>Number of iterations of the optimizer</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform moving streamlines to the static.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>moving</strong> : streamlines</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>moved</strong> : streamlines</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>All this does is apply <code class=\"docutils literal\"><span class=\"pre\">self.matrix</span></code> to the input streamlines.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance\">\n<h3>bundle_min_distance<a class=\"headerlink\" href=\"#bundle-min-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_min_distance</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : list</p>\n<blockquote>\n<div><p>Static streamlines</p>\n</div></blockquote>\n<p><strong>moving</strong> : list</p>\n<blockquote>\n<div><p>Moving streamlines.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance-fast\">\n<h3>bundle_min_distance_fast<a class=\"headerlink\" href=\"#bundle-min-distance-fast\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance_fast\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_min_distance_fast</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em>, <em>block_size</em>, <em>num_threads</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : array</p>\n<blockquote>\n<div><p>1D array. t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : array</p>\n<blockquote>\n<div><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</div></blockquote>\n<p><strong>moving</strong> : array</p>\n<blockquote>\n<div><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</div></blockquote>\n<p><strong>block_size</strong> : int</p>\n<blockquote>\n<div><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>This is a faster implementation of <code class=\"docutils literal\"><span class=\"pre\">bundle_min_distance</span></code>, which requires\nthat all the points of each streamline are allocated into an ndarray\n(of shape N*M by 3, with N the number of points per streamline and M the\nnumber of streamlines). This can be done by calling\n<cite>dipy.tracking.streamlines.unlist_streamlines</cite>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-sum-distance\">\n<h3>bundle_sum_distance<a class=\"headerlink\" href=\"#bundle-sum-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_sum_distance\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">bundle_sum_distance</code><span class=\"sig-paren\">(</span><em>t</em>, <em>static</em>, <em>moving</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF distance optimization function (SUM)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>t is a vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n<p><strong>static</strong> : list</p>\n<blockquote>\n<div><p>Static streamlines</p>\n</div></blockquote>\n<p><strong>moving</strong> : list</p>\n<blockquote>\n<div><p>Moving streamlines. These will be transform to align with\nthe static streamlines</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>cost: float</strong> :</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"center-streamlines\">\n<h3>center_streamlines<a class=\"headerlink\" href=\"#center-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.center_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">center_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Move streamlines to the origin</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n<p><strong>inv_shift</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>Translation in x,y,z to go back in the initial position</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix\">\n<h3>compose_matrix<a class=\"headerlink\" href=\"#compose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_matrix</code><span class=\"sig-paren\">(</span><em>scale=None</em>, <em>shear=None</em>, <em>angles=None</em>, <em>translate=None</em>, <em>perspective=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return 4x4 transformation matrix from sequence of\ntransformations.</p>\n<p>Code modified from the work of Christoph Gohlke link provided here\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<p>This is the inverse of the <code class=\"docutils literal\"><span class=\"pre\">decompose_matrix</span></code> function.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>scale</strong> : (3,) array_like</p>\n<blockquote>\n<div><p>Scaling factors.</p>\n</div></blockquote>\n<p><strong>shear</strong> : array_like</p>\n<blockquote>\n<div><p>Shear factors for x-y, x-z, y-z axes.</p>\n</div></blockquote>\n<p><strong>angles</strong> : array_like</p>\n<blockquote>\n<div><p>Euler angles about static x, y, z axes.</p>\n</div></blockquote>\n<p><strong>translate</strong> : array_like</p>\n<blockquote>\n<div><p>Translation vector along x, y, z axes.</p>\n</div></blockquote>\n<p><strong>perspective</strong> : array_like</p>\n<blockquote>\n<div><p>Perspective partition of matrix.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>matrix</strong> : 4x4 array</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">as</span> <span class=\"nn\">gm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shear</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M0</span> <span class=\"o\">=</span> <span class=\"n\">gm</span><span class=\"o\">.</span><span class=\"n\">compose_matrix</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix44\">\n<h3>compose_matrix44<a class=\"headerlink\" href=\"#compose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix44\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_matrix44</code><span class=\"sig-paren\">(</span><em>t</em>, <em>dtype=&lt;type 'numpy.float64'&gt;</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose a 4x4 transformation matrix</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote>\n<div><p>This is a 1D vector of of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>T</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>Homogeneous transformation matrix of size 4x4.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-transformations\">\n<h3>compose_transformations<a class=\"headerlink\" href=\"#compose-transformations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_transformations\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">compose_transformations</code><span class=\"sig-paren\">(</span><em>*mats</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>mat1</strong> : array, (4, 4)</p>\n<p><strong>mat2</strong> : array, (4, 4)</p>\n<p><strong>...</strong> :</p>\n<p><strong>matN</strong> : array, (4, 4)</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><strong>matN x ... x mat2 x mat1</strong> : array, (4, 4)</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix\">\n<h3>decompose_matrix<a class=\"headerlink\" href=\"#decompose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">decompose_matrix</code><span class=\"sig-paren\">(</span><em>matrix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return sequence of transformations from transformation matrix.</p>\n<p>Code modified from the excellent work of Christoph Gohlke link provided\nhere: <a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>matrix</strong> : array_like</p>\n<blockquote>\n<div><p>Non-degenerative homogeneous transformation matrix</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>scale</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Three scaling factors.</p>\n</div></blockquote>\n<p><strong>shear</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Shear factors for x-y, x-z, y-z axes.</p>\n</div></blockquote>\n<p><strong>angles</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Euler angles about static x, y, z axes.</p>\n</div></blockquote>\n<p><strong>translate</strong> : (3,) ndarray</p>\n<blockquote>\n<div><p>Translation vector along x, y, z axes.</p>\n</div></blockquote>\n<p><strong>perspective</strong> : ndarray</p>\n<blockquote>\n<div><p>Perspective partition of matrix.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><p class=\"first\"><strong>ValueError</strong> :</p>\n<blockquote class=\"last\">\n<div><p>If matrix is of wrong type or degenerative.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T0</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">decompose_matrix</span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix44\">\n<h3>decompose_matrix44<a class=\"headerlink\" href=\"#decompose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix44\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">decompose_matrix44</code><span class=\"sig-paren\">(</span><em>mat</em>, <em>size=12</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a 4x4 homogeneous matrix return the parameter vector</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>mat</strong> : array</p>\n<blockquote>\n<div><p>Homogeneous 4x4 transformation matrix</p>\n</div></blockquote>\n<p><strong>size</strong> : int</p>\n<blockquote>\n<div><p>Size of output vector. 6 for rigid, 7 for similarity and 12\nfor affine. Default is 12.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>t</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>One dimensional ndarray of 6, 7 or 12 affine parameters.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"distance-matrix-mdf\">\n<h3>distance_matrix_mdf<a class=\"headerlink\" href=\"#distance-matrix-mdf\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.distance_matrix_mdf\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">distance_matrix_mdf</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Minimum direct flipped distance matrix between two streamline sets</p>\n<p>All streamlines need to have the same number of points</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines_a</strong> : sequence</p>\n<blockquote>\n<div><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</div></blockquote>\n<p><strong>streamlines_b</strong> : sequence</p>\n<blockquote>\n<div><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>DM</strong> : array, shape (len(streamlines_a), len(streamlines_b))</p>\n<blockquote class=\"last\">\n<div><p>distance matrix</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.transform_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>mat</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines</strong> : list</p>\n<blockquote>\n<div><p>List of 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n<p><strong>mat</strong> : array, (4, 4)</p>\n<blockquote>\n<div><p>transformation matrix</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>new_streamlines</strong> : list</p>\n<blockquote class=\"last\">\n<div><p>List of the transformed 2D ndarrays of shape[-1]==3</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unlist-streamlines\">\n<h3>unlist_streamlines<a class=\"headerlink\" href=\"#unlist-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.unlist_streamlines\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">unlist_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the streamlines not as a list but as an array and an offset</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>streamlines: sequence</strong> :</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>points</strong> : array</p>\n<p class=\"last\"><strong>offsets</strong> : array</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id15\">\n<h3>with_metaclass<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.with_metaclass\">\n<code class=\"descclassname\">dipy.align.streamlinear.</code><code class=\"descname\">with_metaclass</code><span class=\"sig-paren\">(</span><em>meta</em>, <em>*bases</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.with_metaclass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a base class with a metaclass.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": true, "title": "<code class=\"docutils literal\"><span class=\"pre\">align</span></code>", "sourcename": "reference/dipy.align.txt", "customsidebar": null, "metatags": "", "current_page_name": "reference/dipy.align", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"], ["reference/dipy.__config__", "<code class=\"docutils literal\"><span class=\"pre\">__config__</span></code>", "P", "previous"]], "meta": {}, "parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal\"><span class=\"pre\">align</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imaffine\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.imaffine</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imwarp\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.imwarp</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.metrics\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.metrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.reslice\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.reslice</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.scalespace\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.scalespace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.streamlinear\">Module: <code class=\"docutils literal\"><span class=\"pre\">align.streamlinear</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bunch\"><code class=\"docutils literal\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#floating\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineinversionerror\"><code class=\"docutils literal\"><span class=\"pre\">AffineInversionError</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"docutils literal\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"docutils literal\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#isotropicscalespace\"><code class=\"docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"docutils literal\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optimizer\"><code class=\"docutils literal\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#parzenjointhistogram\"><code class=\"docutils literal\"><span class=\"pre\">ParzenJointHistogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#scalespace\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#align-centers-of-mass\">align_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#align-geometric-centers\">align_geometric_centers</a></li>\n<li><a class=\"reference internal\" href=\"#align-origins\">align_origins</a></li>\n<li><a class=\"reference internal\" href=\"#compute-parzen-mi\">compute_parzen_mi</a></li>\n<li><a class=\"reference internal\" href=\"#get-direction-and-spacings\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#sample-domain-regular\">sample_domain_regular</a></li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-geometric-centers\">transform_geometric_centers</a></li>\n<li><a class=\"reference internal\" href=\"#transform-origins\">transform_origins</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id1\"><code class=\"docutils literal\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"docutils literal\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicregistration\"><code class=\"docutils literal\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id2\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"docutils literal\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id3\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id4\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#mult-aff\">mult_aff</a></li>\n<li><a class=\"reference internal\" href=\"#with-metaclass\">with_metaclass</a></li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"docutils literal\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"docutils literal\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"docutils literal\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#similaritymetric\"><code class=\"docutils literal\"><span class=\"pre\">SimilarityMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id5\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gradient\">gradient</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-2d\">v_cycle_2d</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-3d\">v_cycle_3d</a></li>\n<li><a class=\"reference internal\" href=\"#id6\">with_metaclass</a></li>\n<li><a class=\"reference internal\" href=\"#pool\">Pool</a></li>\n<li><a class=\"reference internal\" href=\"#affine-transform\">affine_transform</a></li>\n<li><a class=\"reference internal\" href=\"#cpu-count\">cpu_count</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#id7\"><code class=\"docutils literal\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id8\"><code class=\"docutils literal\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id9\"><code class=\"docutils literal\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancematrixmetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancemetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlesumdistancematrixmetric\"><code class=\"docutils literal\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id11\"><code class=\"docutils literal\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinedistancemetric\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinelinearregistration\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlineregistrationmap\"><code class=\"docutils literal\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance\">bundle_min_distance</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-fast\">bundle_min_distance_fast</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-sum-distance\">bundle_sum_distance</a></li>\n<li><a class=\"reference internal\" href=\"#center-streamlines\">center_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix\">compose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix44\">compose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#compose-transformations\">compose_transformations</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix\">decompose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix44\">decompose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#distance-matrix-mdf\">distance_matrix_mdf</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#unlist-streamlines\">unlist_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#id15\">with_metaclass</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../dipy.__config__/", "title": "<code class=\"docutils literal\"><span class=\"pre\">__config__</span></code>"}, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
