<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"module-dipy.denoise\">\n<span id=\"denoise\"></span><h1><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.bench\" title=\"dipy.denoise.bench\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bench</span></code></a></td>\n<td>Run benchmarks for module using nose.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.test\" title=\"dipy.denoise.test\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">test</span></code></a></td>\n<td>Run tests for module using nose.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.denoise.nlmeans\">\n<span id=\"module-denoise-nlmeans\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise.nlmeans</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise.nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.nlmeans.nlmeans\" title=\"dipy.denoise.nlmeans.nlmeans\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">nlmeans</span></code></a>(arr,&nbsp;sigma[,&nbsp;mask,&nbsp;patch_radius,&nbsp;...])</td>\n<td>Non-local means for denoising 3D and 4D images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.nlmeans.nlmeans_3d\" title=\"dipy.denoise.nlmeans.nlmeans_3d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">nlmeans_3d</span></code></a></td>\n<td>Non-local means for denoising 3D images</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.denoise.noise_estimate\">\n<span id=\"module-denoise-noise-estimate\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise.noise_estimate</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise.noise_estimate\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.convolve\" title=\"dipy.denoise.noise_estimate.convolve\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">convolve</span></code></a>(input,&nbsp;weights[,&nbsp;output,&nbsp;mode,&nbsp;...])</td>\n<td>Multidimensional convolution.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.estimate_sigma\" title=\"dipy.denoise.noise_estimate.estimate_sigma\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,&nbsp;...])</td>\n<td>Standard deviation estimation from local patches</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.piesno\" title=\"dipy.denoise.noise_estimate.piesno\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">piesno</span></code></a>(data,&nbsp;N[,&nbsp;alpha,&nbsp;l,&nbsp;itermax,&nbsp;eps,&nbsp;...])</td>\n<td>Probabilistic Identification and Estimation of Noise (PIESNO).</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bench\">\n<h3>bench<a class=\"headerlink\" href=\"#bench\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.bench\">\n<code class=\"descclassname\">dipy.denoise.</code><code class=\"descname\">bench</code><span class=\"sig-paren\">(</span><em>self</em>, <em>label='fast'</em>, <em>verbose=1</em>, <em>extra_argv=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.bench\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run benchmarks for module using nose.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>label</strong> : {&#8216;fast&#8217;, &#8216;full&#8217;, &#8216;&#8217;, attribute identifier}, optional</p>\n<blockquote>\n<div><p>Identifies the benchmarks to run. This can be a string to pass to\nthe nosetests executable with the &#8216;-A&#8217; option, or one of several\nspecial values.  Special values are:\n* &#8216;fast&#8217; - the default - which corresponds to the <code class=\"docutils literal\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code></p>\n<blockquote>\n<div><p>option of &#8216;not slow&#8217;.</p>\n</div></blockquote>\n<ul class=\"simple\">\n<li>&#8216;full&#8217; - fast (as above) and slow benchmarks as in the\n&#8216;no -A&#8217; option to nosetests - this is the same as &#8216;&#8217;.</li>\n<li>None or &#8216;&#8217; - run all tests.</li>\n</ul>\n<p>attribute_identifier - string passed directly to nosetests as &#8216;-A&#8217;.</p>\n</div></blockquote>\n<p><strong>verbose</strong> : int, optional</p>\n<blockquote>\n<div><p>Verbosity value for benchmark outputs, in the range 1-10. Default is 1.</p>\n</div></blockquote>\n<p><strong>extra_argv</strong> : list, optional</p>\n<blockquote>\n<div><p>List with any extra arguments to pass to nosetests.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>success</strong> : bool</p>\n<blockquote class=\"last\">\n<div><p>Returns True if running the benchmarks works, False if an error\noccurred.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Benchmarks are like tests, but have names starting with &#8220;bench&#8221; instead\nof &#8220;test&#8221;, and can be found under the &#8220;benchmarks&#8221; sub-directory of the\nmodule.</p>\n<p>Each NumPy module exposes <cite>bench</cite> in its namespace to run all benchmarks\nfor it.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span> \n<span class=\"go\">Running benchmarks for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">using 562341 items:</span>\n<span class=\"go\">unique:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">unique1d:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">ratio: 1.0</span>\n<span class=\"go\">nUnique: 56230 == 56230</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">OK</span>\n</pre></div>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> \n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"test\">\n<h3>test<a class=\"headerlink\" href=\"#test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.test\">\n<code class=\"descclassname\">dipy.denoise.</code><code class=\"descname\">test</code><span class=\"sig-paren\">(</span><em>self</em>, <em>label='fast'</em>, <em>verbose=1</em>, <em>extra_argv=None</em>, <em>doctests=False</em>, <em>coverage=False</em>, <em>raise_warnings=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.test\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run tests for module using nose.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>label</strong> : {&#8216;fast&#8217;, &#8216;full&#8217;, &#8216;&#8217;, attribute identifier}, optional</p>\n<blockquote>\n<div><p>Identifies the tests to run. This can be a string to pass to\nthe nosetests executable with the &#8216;-A&#8217; option, or one of several\nspecial values.  Special values are:\n* &#8216;fast&#8217; - the default - which corresponds to the <code class=\"docutils literal\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code></p>\n<blockquote>\n<div><p>option of &#8216;not slow&#8217;.</p>\n</div></blockquote>\n<ul class=\"simple\">\n<li>&#8216;full&#8217; - fast (as above) and slow tests as in the\n&#8216;no -A&#8217; option to nosetests - this is the same as &#8216;&#8217;.</li>\n<li>None or &#8216;&#8217; - run all tests.</li>\n</ul>\n<p>attribute_identifier - string passed directly to nosetests as &#8216;-A&#8217;.</p>\n</div></blockquote>\n<p><strong>verbose</strong> : int, optional</p>\n<blockquote>\n<div><p>Verbosity value for test outputs, in the range 1-10. Default is 1.</p>\n</div></blockquote>\n<p><strong>extra_argv</strong> : list, optional</p>\n<blockquote>\n<div><p>List with any extra arguments to pass to nosetests.</p>\n</div></blockquote>\n<p><strong>doctests</strong> : bool, optional</p>\n<blockquote>\n<div><p>If True, run doctests in module. Default is False.</p>\n</div></blockquote>\n<p><strong>coverage</strong> : bool, optional</p>\n<blockquote>\n<div><p>If True, report coverage of NumPy code. Default is False.\n(This requires the <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">`</span></a>coverage module:</p>\n<blockquote>\n<div><p>&lt;<a class=\"reference external\" href=\"http://nedbatchelder.com/code/modules/coverage.html\">http://nedbatchelder.com/code/modules/coverage.html</a>&gt;`_).</p>\n</div></blockquote>\n</div></blockquote>\n<p><strong>raise_warnings</strong> : str or sequence of warnings, optional</p>\n<blockquote>\n<div><p>This specifies which warnings to configure as &#8216;raise&#8217; instead\nof &#8216;warn&#8217; during the test execution.  Valid strings are:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8220;develop&#8221; : equals <code class=\"docutils literal\"><span class=\"pre\">(DeprecationWarning,</span> <span class=\"pre\">RuntimeWarning)</span></code></li>\n<li>&#8220;release&#8221; : equals <code class=\"docutils literal\"><span class=\"pre\">()</span></code>, don&#8217;t raise on any warnings.</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>result</strong> : object</p>\n<blockquote class=\"last\">\n<div><p>Returns the result of running the tests as a\n<code class=\"docutils literal\"><span class=\"pre\">nose.result.TextTestResult</span></code> object.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Each NumPy module exposes <cite>test</cite> in its namespace to run all tests for it.\nFor example, to run all tests for numpy.lib:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n</pre></div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n<span class=\"go\">Running unit tests for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Ran 976 tests in 3.933s</span>\n</pre></div>\n</div>\n<p>OK</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span> \n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">knownfail</span> \n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.nlmeans.nlmeans\">\n<code class=\"descclassname\">dipy.denoise.nlmeans.</code><code class=\"descname\">nlmeans</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>sigma</em>, <em>mask=None</em>, <em>patch_radius=1</em>, <em>block_radius=5</em>, <em>rician=True</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.nlmeans.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be denoised</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<p><strong>sigma</strong> : float or 3D array</p>\n<blockquote>\n<div><p>standard deviation of the noise estimated from the data</p>\n</div></blockquote>\n<p><strong>patch_radius</strong> : int</p>\n<blockquote>\n<div><p>patch size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</div></blockquote>\n<p><strong>block_radius</strong> : int</p>\n<blockquote>\n<div><p>block size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</div></blockquote>\n<p><strong>rician</strong> : boolean</p>\n<blockquote>\n<div><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>denoised_arr</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>the denoised <code class=\"docutils literal\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal\"><span class=\"pre\">arr</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans-3d\">\n<h3>nlmeans_3d<a class=\"headerlink\" href=\"#nlmeans-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.nlmeans.nlmeans_3d\">\n<code class=\"descclassname\">dipy.denoise.nlmeans.</code><code class=\"descname\">nlmeans_3d</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.nlmeans.nlmeans_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D ndarray</p>\n<blockquote>\n<div><p>The array to be denoised</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<p><strong>sigma</strong> : float or 3D array</p>\n<blockquote>\n<div><p>standard deviation of the noise estimated from the data</p>\n</div></blockquote>\n<p><strong>patch_radius</strong> : int</p>\n<blockquote>\n<div><p>patch size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</div></blockquote>\n<p><strong>block_radius</strong> : int</p>\n<blockquote>\n<div><p>block size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</div></blockquote>\n<p><strong>rician</strong> : boolean</p>\n<blockquote>\n<div><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>denoised_arr</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>the denoised <code class=\"docutils literal\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal\"><span class=\"pre\">arr</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"convolve\">\n<h3>convolve<a class=\"headerlink\" href=\"#convolve\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.convolve\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">convolve</code><span class=\"sig-paren\">(</span><em>input</em>, <em>weights</em>, <em>output=None</em>, <em>mode='reflect'</em>, <em>cval=0.0</em>, <em>origin=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.convolve\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multidimensional convolution.</p>\n<p>The array is convolved with the given kernel.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input</strong> : array_like</p>\n<blockquote>\n<div><p>Input array to filter.</p>\n</div></blockquote>\n<p><strong>weights</strong> : array_like</p>\n<blockquote>\n<div><p>Array of weights, same number of dimensions as input</p>\n</div></blockquote>\n<p><strong>output</strong> : ndarray, optional</p>\n<blockquote>\n<div><p>The <cite>output</cite> parameter passes an array in which to store the\nfilter output.</p>\n</div></blockquote>\n<p><strong>mode</strong> : {&#8216;reflect&#8217;,&#8217;constant&#8217;,&#8217;nearest&#8217;,&#8217;mirror&#8217;, &#8216;wrap&#8217;}, optional</p>\n<blockquote>\n<div><p>the <cite>mode</cite> parameter determines how the array borders are\nhandled. For &#8216;constant&#8217; mode, values beyond borders are set to be\n<cite>cval</cite>. Default is &#8216;reflect&#8217;.</p>\n</div></blockquote>\n<p><strong>cval</strong> : scalar, optional</p>\n<blockquote>\n<div><p>Value to fill past edges of input if <cite>mode</cite> is &#8216;constant&#8217;. Default\nis 0.0</p>\n</div></blockquote>\n<p><strong>origin</strong> : array_like, optional</p>\n<blockquote>\n<div><p>The <cite>origin</cite> parameter controls the placement of the filter.\nDefault is 0.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>result</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>The result of convolution of <cite>input</cite> with <cite>weights</cite>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">correlate</span></code></dt>\n<dd>Correlate an image with a kernel.</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Each value in result is <span class=\"math\">\\(C_i = \\sum_j{I_{i+j-k} W_j}\\)</span>, where\nW is the <cite>weights</cite> kernel,\nj is the n-D spatial index over <span class=\"math\">\\(W\\)</span>,\nI is the <cite>input</cite> and k is the coordinate of the center of\nW, specified by <cite>origin</cite> in the input parameters.</p>\n<p class=\"rubric\">Examples</p>\n<p>Perhaps the simplest case to understand is <code class=\"docutils literal\"><span class=\"pre\">mode='constant',</span> <span class=\"pre\">cval=0.0</span></code>,\nbecause in this case borders (i.e. where the <cite>weights</cite> kernel, centered\non any one value, extends beyond an edge of <cite>input</cite>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"go\">....    [5, 3, 0, 4],</span>\n<span class=\"go\">....    [0, 0, 0, 7],</span>\n<span class=\"go\">....    [9, 3, 0, 0]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span><span class=\"p\">,</span> <span class=\"n\">cval</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[11, 10,  7,  4],</span>\n<span class=\"go\">       [10,  3, 11, 11],</span>\n<span class=\"go\">       [15, 12, 14,  7],</span>\n<span class=\"go\">       [12,  3,  7,  0]])</span>\n</pre></div>\n</div>\n<p>Setting <code class=\"docutils literal\"><span class=\"pre\">cval=1.0</span></code> is equivalent to padding the outer edge of <cite>input</cite>\nwith 1.0&#8217;s (and then extracting only the original region of the result).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span><span class=\"p\">,</span> <span class=\"n\">cval</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[13, 11,  8,  7],</span>\n<span class=\"go\">       [11,  3, 11, 14],</span>\n<span class=\"go\">       [16, 12, 14, 10],</span>\n<span class=\"go\">       [15,  6, 10,  5]])</span>\n</pre></div>\n</div>\n<p>With <code class=\"docutils literal\"><span class=\"pre\">mode='reflect'</span></code> (the default), outer values are reflected at the\nedge of <cite>input</cite> to fill in missing values.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"go\">                  [1, 0, 0],</span>\n<span class=\"go\">                  [0, 0, 0]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;reflect&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[5, 0, 0],</span>\n<span class=\"go\">       [3, 0, 0],</span>\n<span class=\"go\">       [1, 0, 0]])</span>\n</pre></div>\n</div>\n<p>This includes diagonally at the corners.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"go\">array([[4, 2, 0],</span>\n<span class=\"go\">       [3, 2, 0],</span>\n<span class=\"go\">       [1, 1, 0]])</span>\n</pre></div>\n</div>\n<p>With <code class=\"docutils literal\"><span class=\"pre\">mode='nearest'</span></code>, the single nearest value in to an edge in\n<cite>input</cite> is repeated as many times as needed to match the overlapping\n<cite>weights</cite>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"go\">                  [1, 0, 0],</span>\n<span class=\"go\">                  [0, 0, 0]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"go\">                  [0, 1, 0],</span>\n<span class=\"go\">                  [0, 1, 0],</span>\n<span class=\"go\">                  [0, 1, 0],</span>\n<span class=\"go\">                  [0, 1, 0]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[7, 0, 3],</span>\n<span class=\"go\">       [5, 0, 2],</span>\n<span class=\"go\">       [3, 0, 1]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.estimate_sigma\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>disable_background_masking=False</em>, <em>N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be estimated</p>\n</div></blockquote>\n<p><strong>disable_background_masking</strong> : bool, default False</p>\n<blockquote>\n<div><p>If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</div></blockquote>\n<p><strong>N</strong> : int, default 0</p>\n<blockquote>\n<div><p>Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>sigma</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>standard deviation of the noise, one estimation per volume.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"piesno\">\n<h3>piesno<a class=\"headerlink\" href=\"#piesno\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.piesno\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">piesno</code><span class=\"sig-paren\">(</span><em>data</em>, <em>N</em>, <em>alpha=0.01</em>, <em>l=100</em>, <em>itermax=100</em>, <em>eps=1e-05</em>, <em>return_mask=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.piesno\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Probabilistic Identification and Estimation of Noise (PIESNO).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>data</strong> : ndarray</p>\n<blockquote>\n<div><p>The magnitude signals to analyse. The last dimension must contain the\nsame realisation of the volume, such as dMRI or fMRI data.</p>\n</div></blockquote>\n<p><strong>N</strong> : int</p>\n<blockquote>\n<div><p>The number of phase array coils of the MRI scanner.\nIf your scanner does a SENSE reconstruction, ALWAYS use N=1, as the\nnoise profile is always Rician.\nIf your scanner does a GRAPPA reconstruction, set N as the number\nof phase array coils.</p>\n</div></blockquote>\n<p><strong>alpha</strong> : float</p>\n<blockquote>\n<div><p>Probabilistic estimation threshold for the gamma function.</p>\n</div></blockquote>\n<p><strong>l</strong> : int</p>\n<blockquote>\n<div><p>number of initial estimates for sigma to try.</p>\n</div></blockquote>\n<p><strong>itermax</strong> : int</p>\n<blockquote>\n<div><p>Maximum number of iterations to execute if convergence\nis not reached.</p>\n</div></blockquote>\n<p><strong>eps</strong> : float</p>\n<blockquote>\n<div><p>Tolerance for the convergence criterion. Convergence is\nreached if two subsequent estimates are smaller than eps.</p>\n</div></blockquote>\n<p><strong>return_mask</strong> : bool</p>\n<blockquote>\n<div><p>If True, return a mask identyfing all the pure noise voxel\nthat were found.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>sigma</strong> : float</p>\n<blockquote>\n<div><p>The estimated standard deviation of the gaussian noise.</p>\n</div></blockquote>\n<p><strong>mask</strong> : ndarray (optional)</p>\n<blockquote class=\"last\">\n<div><p>A boolean mask indicating the voxels identified as pure noise.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r55\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[R55]</a></td><td>Koay CG, Ozarslan E and Pierpaoli C.</td></tr>\n</tbody>\n</table>\n<p>&#8220;Probabilistic Identification and Estimation of Noise (PIESNO):\nA self-consistent approach and its applications in MRI.&#8221;\nJournal of Magnetic Resonance 2009; 199: 94-103.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r56\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[R56]</a></td><td>Koay CG, Ozarslan E and Basser PJ.</td></tr>\n</tbody>\n</table>\n<p>&#8220;A signal transformational framework for breaking the noise floor\nand its applications in MRI.&#8221;\nJournal of Magnetic Resonance 2009; 197: 108-119.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": true, "title": "<code class=\"docutils literal\"><span class=\"pre\">denoise</span></code>", "sourcename": "reference/dipy.denoise.txt", "customsidebar": null, "metatags": "", "current_page_name": "reference/dipy.denoise", "next": {"link": "../dipy.direction/", "title": "<code class=\"docutils literal\"><span class=\"pre\">direction</span></code>"}, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"], ["reference/dipy.direction", "<code class=\"docutils literal\"><span class=\"pre\">direction</span></code>", "N", "next"]], "meta": {}, "parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal\"><span class=\"pre\">denoise</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.denoise.nlmeans\">Module: <code class=\"docutils literal\"><span class=\"pre\">denoise.nlmeans</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.denoise.noise_estimate\">Module: <code class=\"docutils literal\"><span class=\"pre\">denoise.noise_estimate</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bench\">bench</a></li>\n<li><a class=\"reference internal\" href=\"#test\">test</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans-3d\">nlmeans_3d</a></li>\n<li><a class=\"reference internal\" href=\"#convolve\">convolve</a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#piesno\">piesno</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"module-dipy.denoise\">\n<span id=\"denoise\"></span><h1><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.bench\" title=\"dipy.denoise.bench\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">bench</span></code></a></td>\n<td>Run benchmarks for module using nose.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.test\" title=\"dipy.denoise.test\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">test</span></code></a></td>\n<td>Run tests for module using nose.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.denoise.nlmeans\">\n<span id=\"module-denoise-nlmeans\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise.nlmeans</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise.nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.nlmeans.nlmeans\" title=\"dipy.denoise.nlmeans.nlmeans\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">nlmeans</span></code></a>(arr,&nbsp;sigma[,&nbsp;mask,&nbsp;patch_radius,&nbsp;...])</td>\n<td>Non-local means for denoising 3D and 4D images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.nlmeans.nlmeans_3d\" title=\"dipy.denoise.nlmeans.nlmeans_3d\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">nlmeans_3d</span></code></a></td>\n<td>Non-local means for denoising 3D images</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.denoise.noise_estimate\">\n<span id=\"module-denoise-noise-estimate\"></span><h2>Module: <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">denoise.noise_estimate</span></code><a class=\"headerlink\" href=\"#module-dipy.denoise.noise_estimate\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.convolve\" title=\"dipy.denoise.noise_estimate.convolve\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">convolve</span></code></a>(input,&nbsp;weights[,&nbsp;output,&nbsp;mode,&nbsp;...])</td>\n<td>Multidimensional convolution.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.estimate_sigma\" title=\"dipy.denoise.noise_estimate.estimate_sigma\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,&nbsp;...])</td>\n<td>Standard deviation estimation from local patches</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.denoise.noise_estimate.piesno\" title=\"dipy.denoise.noise_estimate.piesno\"><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">piesno</span></code></a>(data,&nbsp;N[,&nbsp;alpha,&nbsp;l,&nbsp;itermax,&nbsp;eps,&nbsp;...])</td>\n<td>Probabilistic Identification and Estimation of Noise (PIESNO).</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bench\">\n<h3>bench<a class=\"headerlink\" href=\"#bench\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.bench\">\n<code class=\"descclassname\">dipy.denoise.</code><code class=\"descname\">bench</code><span class=\"sig-paren\">(</span><em>self</em>, <em>label='fast'</em>, <em>verbose=1</em>, <em>extra_argv=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.bench\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run benchmarks for module using nose.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>label</strong> : {&#8216;fast&#8217;, &#8216;full&#8217;, &#8216;&#8217;, attribute identifier}, optional</p>\n<blockquote>\n<div><p>Identifies the benchmarks to run. This can be a string to pass to\nthe nosetests executable with the &#8216;-A&#8217; option, or one of several\nspecial values.  Special values are:\n* &#8216;fast&#8217; - the default - which corresponds to the <code class=\"docutils literal\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code></p>\n<blockquote>\n<div><p>option of &#8216;not slow&#8217;.</p>\n</div></blockquote>\n<ul class=\"simple\">\n<li>&#8216;full&#8217; - fast (as above) and slow benchmarks as in the\n&#8216;no -A&#8217; option to nosetests - this is the same as &#8216;&#8217;.</li>\n<li>None or &#8216;&#8217; - run all tests.</li>\n</ul>\n<p>attribute_identifier - string passed directly to nosetests as &#8216;-A&#8217;.</p>\n</div></blockquote>\n<p><strong>verbose</strong> : int, optional</p>\n<blockquote>\n<div><p>Verbosity value for benchmark outputs, in the range 1-10. Default is 1.</p>\n</div></blockquote>\n<p><strong>extra_argv</strong> : list, optional</p>\n<blockquote>\n<div><p>List with any extra arguments to pass to nosetests.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>success</strong> : bool</p>\n<blockquote class=\"last\">\n<div><p>Returns True if running the benchmarks works, False if an error\noccurred.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Benchmarks are like tests, but have names starting with &#8220;bench&#8221; instead\nof &#8220;test&#8221;, and can be found under the &#8220;benchmarks&#8221; sub-directory of the\nmodule.</p>\n<p>Each NumPy module exposes <cite>bench</cite> in its namespace to run all benchmarks\nfor it.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span> \n<span class=\"go\">Running benchmarks for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">using 562341 items:</span>\n<span class=\"go\">unique:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">unique1d:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">ratio: 1.0</span>\n<span class=\"go\">nUnique: 56230 == 56230</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">OK</span>\n</pre></div>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> \n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"test\">\n<h3>test<a class=\"headerlink\" href=\"#test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.test\">\n<code class=\"descclassname\">dipy.denoise.</code><code class=\"descname\">test</code><span class=\"sig-paren\">(</span><em>self</em>, <em>label='fast'</em>, <em>verbose=1</em>, <em>extra_argv=None</em>, <em>doctests=False</em>, <em>coverage=False</em>, <em>raise_warnings=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.test\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run tests for module using nose.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>label</strong> : {&#8216;fast&#8217;, &#8216;full&#8217;, &#8216;&#8217;, attribute identifier}, optional</p>\n<blockquote>\n<div><p>Identifies the tests to run. This can be a string to pass to\nthe nosetests executable with the &#8216;-A&#8217; option, or one of several\nspecial values.  Special values are:\n* &#8216;fast&#8217; - the default - which corresponds to the <code class=\"docutils literal\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code></p>\n<blockquote>\n<div><p>option of &#8216;not slow&#8217;.</p>\n</div></blockquote>\n<ul class=\"simple\">\n<li>&#8216;full&#8217; - fast (as above) and slow tests as in the\n&#8216;no -A&#8217; option to nosetests - this is the same as &#8216;&#8217;.</li>\n<li>None or &#8216;&#8217; - run all tests.</li>\n</ul>\n<p>attribute_identifier - string passed directly to nosetests as &#8216;-A&#8217;.</p>\n</div></blockquote>\n<p><strong>verbose</strong> : int, optional</p>\n<blockquote>\n<div><p>Verbosity value for test outputs, in the range 1-10. Default is 1.</p>\n</div></blockquote>\n<p><strong>extra_argv</strong> : list, optional</p>\n<blockquote>\n<div><p>List with any extra arguments to pass to nosetests.</p>\n</div></blockquote>\n<p><strong>doctests</strong> : bool, optional</p>\n<blockquote>\n<div><p>If True, run doctests in module. Default is False.</p>\n</div></blockquote>\n<p><strong>coverage</strong> : bool, optional</p>\n<blockquote>\n<div><p>If True, report coverage of NumPy code. Default is False.\n(This requires the <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">`</span></a>coverage module:</p>\n<blockquote>\n<div><p>&lt;<a class=\"reference external\" href=\"http://nedbatchelder.com/code/modules/coverage.html\">http://nedbatchelder.com/code/modules/coverage.html</a>&gt;`_).</p>\n</div></blockquote>\n</div></blockquote>\n<p><strong>raise_warnings</strong> : str or sequence of warnings, optional</p>\n<blockquote>\n<div><p>This specifies which warnings to configure as &#8216;raise&#8217; instead\nof &#8216;warn&#8217; during the test execution.  Valid strings are:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>&#8220;develop&#8221; : equals <code class=\"docutils literal\"><span class=\"pre\">(DeprecationWarning,</span> <span class=\"pre\">RuntimeWarning)</span></code></li>\n<li>&#8220;release&#8221; : equals <code class=\"docutils literal\"><span class=\"pre\">()</span></code>, don&#8217;t raise on any warnings.</li>\n</ul>\n</div></blockquote>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>result</strong> : object</p>\n<blockquote class=\"last\">\n<div><p>Returns the result of running the tests as a\n<code class=\"docutils literal\"><span class=\"pre\">nose.result.TextTestResult</span></code> object.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Each NumPy module exposes <cite>test</cite> in its namespace to run all tests for it.\nFor example, to run all tests for numpy.lib:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n</pre></div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n<span class=\"go\">Running unit tests for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Ran 976 tests in 3.933s</span>\n</pre></div>\n</div>\n<p>OK</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span> \n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">knownfail</span> \n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.nlmeans.nlmeans\">\n<code class=\"descclassname\">dipy.denoise.nlmeans.</code><code class=\"descname\">nlmeans</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>sigma</em>, <em>mask=None</em>, <em>patch_radius=1</em>, <em>block_radius=5</em>, <em>rician=True</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.nlmeans.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be denoised</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<p><strong>sigma</strong> : float or 3D array</p>\n<blockquote>\n<div><p>standard deviation of the noise estimated from the data</p>\n</div></blockquote>\n<p><strong>patch_radius</strong> : int</p>\n<blockquote>\n<div><p>patch size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</div></blockquote>\n<p><strong>block_radius</strong> : int</p>\n<blockquote>\n<div><p>block size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</div></blockquote>\n<p><strong>rician</strong> : boolean</p>\n<blockquote>\n<div><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>denoised_arr</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>the denoised <code class=\"docutils literal\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal\"><span class=\"pre\">arr</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans-3d\">\n<h3>nlmeans_3d<a class=\"headerlink\" href=\"#nlmeans-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.nlmeans.nlmeans_3d\">\n<code class=\"descclassname\">dipy.denoise.nlmeans.</code><code class=\"descname\">nlmeans_3d</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.nlmeans.nlmeans_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D ndarray</p>\n<blockquote>\n<div><p>The array to be denoised</p>\n</div></blockquote>\n<p><strong>mask</strong> : 3D ndarray</p>\n<p><strong>sigma</strong> : float or 3D array</p>\n<blockquote>\n<div><p>standard deviation of the noise estimated from the data</p>\n</div></blockquote>\n<p><strong>patch_radius</strong> : int</p>\n<blockquote>\n<div><p>patch size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</div></blockquote>\n<p><strong>block_radius</strong> : int</p>\n<blockquote>\n<div><p>block size is <code class=\"docutils literal\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</div></blockquote>\n<p><strong>rician</strong> : boolean</p>\n<blockquote>\n<div><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</div></blockquote>\n<p><strong>num_threads</strong> : int</p>\n<blockquote>\n<div><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>denoised_arr</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>the denoised <code class=\"docutils literal\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal\"><span class=\"pre\">arr</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"convolve\">\n<h3>convolve<a class=\"headerlink\" href=\"#convolve\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.convolve\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">convolve</code><span class=\"sig-paren\">(</span><em>input</em>, <em>weights</em>, <em>output=None</em>, <em>mode='reflect'</em>, <em>cval=0.0</em>, <em>origin=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.convolve\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multidimensional convolution.</p>\n<p>The array is convolved with the given kernel.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>input</strong> : array_like</p>\n<blockquote>\n<div><p>Input array to filter.</p>\n</div></blockquote>\n<p><strong>weights</strong> : array_like</p>\n<blockquote>\n<div><p>Array of weights, same number of dimensions as input</p>\n</div></blockquote>\n<p><strong>output</strong> : ndarray, optional</p>\n<blockquote>\n<div><p>The <cite>output</cite> parameter passes an array in which to store the\nfilter output.</p>\n</div></blockquote>\n<p><strong>mode</strong> : {&#8216;reflect&#8217;,&#8217;constant&#8217;,&#8217;nearest&#8217;,&#8217;mirror&#8217;, &#8216;wrap&#8217;}, optional</p>\n<blockquote>\n<div><p>the <cite>mode</cite> parameter determines how the array borders are\nhandled. For &#8216;constant&#8217; mode, values beyond borders are set to be\n<cite>cval</cite>. Default is &#8216;reflect&#8217;.</p>\n</div></blockquote>\n<p><strong>cval</strong> : scalar, optional</p>\n<blockquote>\n<div><p>Value to fill past edges of input if <cite>mode</cite> is &#8216;constant&#8217;. Default\nis 0.0</p>\n</div></blockquote>\n<p><strong>origin</strong> : array_like, optional</p>\n<blockquote>\n<div><p>The <cite>origin</cite> parameter controls the placement of the filter, \nrelative to the centre of the current element of the input.  \nDefault of 0 is equivalent to <code class=\"docutils literal\"><span class=\"pre\">(0,)*input.ndim</span></code>.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>result</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>The result of convolution of <cite>input</cite> with <cite>weights</cite>.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><code class=\"xref py py-obj docutils literal\"><span class=\"pre\">correlate</span></code></dt>\n<dd>Correlate an image with a kernel.</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Each value in result is <span class=\"math\">\\(C_i = \\sum_j{I_{i+k-j} W_j}\\)</span>, where\nW is the <cite>weights</cite> kernel,\nj is the n-D spatial index over <span class=\"math\">\\(W\\)</span>,\nI is the <cite>input</cite> and k is the coordinate of the center of\nW, specified by <cite>origin</cite> in the input parameters.</p>\n<p class=\"rubric\">Examples</p>\n<p>Perhaps the simplest case to understand is <code class=\"docutils literal\"><span class=\"pre\">mode='constant',</span> <span class=\"pre\">cval=0.0</span></code>,\nbecause in this case borders (i.e. where the <cite>weights</cite> kernel, centered\non any one value, extends beyond an edge of <cite>input</cite>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span><span class=\"p\">,</span> <span class=\"n\">cval</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[11, 10,  7,  4],</span>\n<span class=\"go\">       [10,  3, 11, 11],</span>\n<span class=\"go\">       [15, 12, 14,  7],</span>\n<span class=\"go\">       [12,  3,  7,  0]])</span>\n</pre></div>\n</div>\n<p>Setting <code class=\"docutils literal\"><span class=\"pre\">cval=1.0</span></code> is equivalent to padding the outer edge of <cite>input</cite>\nwith 1.0&#8217;s (and then extracting only the original region of the result).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span><span class=\"p\">,</span> <span class=\"n\">cval</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[13, 11,  8,  7],</span>\n<span class=\"go\">       [11,  3, 11, 14],</span>\n<span class=\"go\">       [16, 12, 14, 10],</span>\n<span class=\"go\">       [15,  6, 10,  5]])</span>\n</pre></div>\n</div>\n<p>With <code class=\"docutils literal\"><span class=\"pre\">mode='reflect'</span></code> (the default), outer values are reflected at the\nedge of <cite>input</cite> to fill in missing values.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;reflect&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[5, 0, 0],</span>\n<span class=\"go\">       [3, 0, 0],</span>\n<span class=\"go\">       [1, 0, 0]])</span>\n</pre></div>\n</div>\n<p>This includes diagonally at the corners.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"go\">array([[4, 2, 0],</span>\n<span class=\"go\">       [3, 2, 0],</span>\n<span class=\"go\">       [1, 1, 0]])</span>\n</pre></div>\n</div>\n<p>With <code class=\"docutils literal\"><span class=\"pre\">mode='nearest'</span></code>, the single nearest value in to an edge in\n<cite>input</cite> is repeated as many times as needed to match the overlapping\n<cite>weights</cite>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[7, 0, 3],</span>\n<span class=\"go\">       [5, 0, 2],</span>\n<span class=\"go\">       [3, 0, 1]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.estimate_sigma\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>disable_background_masking=False</em>, <em>N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>arr</strong> : 3D or 4D ndarray</p>\n<blockquote>\n<div><p>The array to be estimated</p>\n</div></blockquote>\n<p><strong>disable_background_masking</strong> : bool, default False</p>\n<blockquote>\n<div><p>If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</div></blockquote>\n<p><strong>N</strong> : int, default 0</p>\n<blockquote>\n<div><p>Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>sigma</strong> : ndarray</p>\n<blockquote class=\"last\">\n<div><p>standard deviation of the noise, one estimation per volume.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"piesno\">\n<h3>piesno<a class=\"headerlink\" href=\"#piesno\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.denoise.noise_estimate.piesno\">\n<code class=\"descclassname\">dipy.denoise.noise_estimate.</code><code class=\"descname\">piesno</code><span class=\"sig-paren\">(</span><em>data</em>, <em>N</em>, <em>alpha=0.01</em>, <em>l=100</em>, <em>itermax=100</em>, <em>eps=1e-05</em>, <em>return_mask=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.denoise.noise_estimate.piesno\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Probabilistic Identification and Estimation of Noise (PIESNO).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><p class=\"first\"><strong>data</strong> : ndarray</p>\n<blockquote>\n<div><p>The magnitude signals to analyse. The last dimension must contain the\nsame realisation of the volume, such as dMRI or fMRI data.</p>\n</div></blockquote>\n<p><strong>N</strong> : int</p>\n<blockquote>\n<div><p>The number of phase array coils of the MRI scanner.\nIf your scanner does a SENSE reconstruction, ALWAYS use N=1, as the\nnoise profile is always Rician.\nIf your scanner does a GRAPPA reconstruction, set N as the number\nof phase array coils.</p>\n</div></blockquote>\n<p><strong>alpha</strong> : float</p>\n<blockquote>\n<div><p>Probabilistic estimation threshold for the gamma function.</p>\n</div></blockquote>\n<p><strong>l</strong> : int</p>\n<blockquote>\n<div><p>number of initial estimates for sigma to try.</p>\n</div></blockquote>\n<p><strong>itermax</strong> : int</p>\n<blockquote>\n<div><p>Maximum number of iterations to execute if convergence\nis not reached.</p>\n</div></blockquote>\n<p><strong>eps</strong> : float</p>\n<blockquote>\n<div><p>Tolerance for the convergence criterion. Convergence is\nreached if two subsequent estimates are smaller than eps.</p>\n</div></blockquote>\n<p><strong>return_mask</strong> : bool</p>\n<blockquote>\n<div><p>If True, return a mask identyfing all the pure noise voxel\nthat were found.</p>\n</div></blockquote>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>sigma</strong> : float</p>\n<blockquote>\n<div><p>The estimated standard deviation of the gaussian noise.</p>\n</div></blockquote>\n<p><strong>mask</strong> : ndarray (optional)</p>\n<blockquote class=\"last\">\n<div><p>A boolean mask indicating the voxels identified as pure noise.</p>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r55\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[R55]</a></td><td>Koay CG, Ozarslan E and Pierpaoli C.</td></tr>\n</tbody>\n</table>\n<p>&#8220;Probabilistic Identification and Estimation of Noise (PIESNO):\nA self-consistent approach and its applications in MRI.&#8221;\nJournal of Magnetic Resonance 2009; 199: 94-103.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r56\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[R56]</a></td><td>Koay CG, Ozarslan E and Basser PJ.</td></tr>\n</tbody>\n</table>\n<p>&#8220;A signal transformational framework for breaking the noise floor\nand its applications in MRI.&#8221;\nJournal of Magnetic Resonance 2009; 197: 108-119.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": true, "title": "<code class=\"docutils literal\"><span class=\"pre\">denoise</span></code>", "sourcename": "reference/dipy.denoise.txt", "customsidebar": null, "metatags": "", "current_page_name": "reference/dipy.denoise", "next": {"link": "../dipy.direction/", "title": "<code class=\"docutils literal\"><span class=\"pre\">direction</span></code>"}, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"], ["reference/dipy.direction", "<code class=\"docutils literal\"><span class=\"pre\">direction</span></code>", "N", "next"]], "meta": {}, "parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal\"><span class=\"pre\">denoise</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.denoise.nlmeans\">Module: <code class=\"docutils literal\"><span class=\"pre\">denoise.nlmeans</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.denoise.noise_estimate\">Module: <code class=\"docutils literal\"><span class=\"pre\">denoise.noise_estimate</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bench\">bench</a></li>\n<li><a class=\"reference internal\" href=\"#test\">test</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans-3d\">nlmeans_3d</a></li>\n<li><a class=\"reference internal\" href=\"#convolve\">convolve</a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#piesno\">piesno</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
