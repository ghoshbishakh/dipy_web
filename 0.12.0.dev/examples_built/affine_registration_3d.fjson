{"body": "<div class=\"section\" id=\"affine-registration-in-3d\">\n<span id=\"example-affine-registration-3d\"></span><h1>Affine Registration in 3D<a class=\"headerlink\" href=\"#affine-registration-in-3d\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example explains how to compute an affine transformation to register two\n3D volumes by maximization of their Mutual Information <a class=\"reference internal\" href=\"#mattes03\" id=\"id1\">[Mattes03]</a>. The\noptimization strategy is similar to that implemented in ANTS <a class=\"reference internal\" href=\"../syn_registration_3d/#avants11\" id=\"id2\">[Avants11]</a>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">regtools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data.fetcher</span> <span class=\"k\">import</span> <span class=\"n\">fetch_syn_data</span><span class=\"p\">,</span> <span class=\"n\">read_syn_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.imaffine</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">transform_centers_of_mass</span><span class=\"p\">,</span>\n                                 <span class=\"n\">AffineMap</span><span class=\"p\">,</span>\n                                 <span class=\"n\">MutualInformationMetric</span><span class=\"p\">,</span>\n                                 <span class=\"n\">AffineRegistration</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.transforms</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">TranslationTransform3D</span><span class=\"p\">,</span>\n                                   <span class=\"n\">RigidTransform3D</span><span class=\"p\">,</span>\n                                   <span class=\"n\">AffineTransform3D</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let&#8217;s fetch two b0 volumes, the static image will be the b0 from the Stanford\nHARDI dataset</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">nib_stanford</span><span class=\"p\">,</span> <span class=\"n\">gtab_stanford</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">nib_stanford</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">())[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">static_grid2world</span> <span class=\"o\">=</span> <span class=\"n\">nib_stanford</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now the moving image</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_syn_data</span><span class=\"p\">()</span>\n<span class=\"n\">nib_syn_t1</span><span class=\"p\">,</span> <span class=\"n\">nib_syn_b0</span> <span class=\"o\">=</span> <span class=\"n\">read_syn_data</span><span class=\"p\">()</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">nib_syn_b0</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">())</span>\n<span class=\"n\">moving_grid2world</span> <span class=\"o\">=</span> <span class=\"n\">nib_syn_b0</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We can see that the images are far from aligned by drawing one on top of\nthe other. The images don&#8217;t even have the same number of voxels, so in order\nto draw one on top of the other we need to resample the moving image on a grid\nof the same dimensions as the static image, we can do this by &#8220;transforming&#8221;\nthe moving image using an identity transform</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">identity</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">affine_map</span> <span class=\"o\">=</span> <span class=\"n\">AffineMap</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span>\n                       <span class=\"n\">static</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">static_grid2world</span><span class=\"p\">,</span>\n                       <span class=\"n\">moving</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">)</span>\n<span class=\"n\">resampled</span> <span class=\"o\">=</span> <span class=\"n\">affine_map</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">resampled</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resampled_0.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">resampled</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resampled_1.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">resampled</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resampled_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/resampled_0.png\" src=\"examples_built/resampled_0.png\" />\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/resampled_1.png\" src=\"examples_built/resampled_1.png\" />\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"examples_built/resampled_2.png\" src=\"examples_built/resampled_2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Input images before alignment</strong>.</span></p>\n</div>\n<p>We can obtain a very rough (and fast) registration by just aligning the centers\nof mass of the two images</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">c_of_mass</span> <span class=\"o\">=</span> <span class=\"n\">transform_centers_of_mass</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">static_grid2world</span><span class=\"p\">,</span>\n                                      <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can now transform the moving image and draw it on top of the static image,\nregistration is not likely to be good, but at least they will occupy roughly\nthe same space</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">c_of_mass</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_com_0.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_com_1.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_com_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_com_0.png\" src=\"examples_built/transformed_com_0.png\" />\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_com_1.png\" src=\"examples_built/transformed_com_1.png\" />\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"examples_built/transformed_com_2.png\" src=\"examples_built/transformed_com_2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Registration result by aligning the centers of mass of the images</strong>.</span></p>\n</div>\n<p>This was just a translation of the moving image towards the static image, now\nwe will refine it by looking for an affine transform. We first create the\nsimilarity metric (Mutual Information) to be used. We need to specify the\nnumber of bins to be used to discretize the joint and marginal probability\ndistribution functions (PDF), a typical value is 32. We also need to specify\nthe percentage (an integer in (0, 100]) of voxels to be used for computing the\nPDFs, the most accurate registration will be obtained by using all voxels, but\nit is also the most time-consuming choice. We specify full sampling by passing\nNone instead of an integer</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbins</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">sampling_prop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">MutualInformationMetric</span><span class=\"p\">(</span><span class=\"n\">nbins</span><span class=\"p\">,</span> <span class=\"n\">sampling_prop</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To avoid getting stuck at local optima, and to accelerate convergence, we use a\nmulti-resolution strategy (similar to ANTS <a class=\"reference internal\" href=\"../syn_registration_3d/#avants11\" id=\"id3\">[Avants11]</a>) by building a Gaussian\nPyramid. To have as much flexibility as possible, the user can specify how this\nGaussian Pyramid is built. First of all, we need to specify how many\nresolutions we want to use. This is indirectly specified by just providing a\nlist of the number of iterations we want to perform at each resolution. Here we\nwill just specify 3 resolutions and a large number of iterations, 10000 at the\ncoarsest resolution, 1000 at the medium resolution and 100 at the finest. These\nare the default settings</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>To compute the Gaussian pyramid, the original image is first smoothed at each\nlevel of the pyramid using a Gaussian kernel with the requested sigma. A good\ninitial choice is [3.0, 1.0, 0.0], this is the default</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sigmas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we specify the sub-sampling factors. A good configuration is [4, 2, 1],\nwhich means that, if the original image shape was (nx, ny, nz) voxels, then the\nshape of the coarsest image will be about (nx//4, ny//4, nz//4), the shape in\nthe middle resolution will be about (nx//2, ny//2, nz//2) and the image at the\nfinest scale has the same size as the original image. This set of factors is\nthe default</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we go ahead and instantiate the registration class with the configuration\nwe just prepared</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affreg</span> <span class=\"o\">=</span> <span class=\"n\">AffineRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">,</span>\n                            <span class=\"n\">level_iters</span><span class=\"o\">=</span><span class=\"n\">level_iters</span><span class=\"p\">,</span>\n                            <span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"n\">sigmas</span><span class=\"p\">,</span>\n                            <span class=\"n\">factors</span><span class=\"o\">=</span><span class=\"n\">factors</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Using AffineRegistration we can register our images in as many stages as we\nwant, providing previous results as initialization for the next (the same logic\nas in ANTS). The reason why it is useful is that registration is a non-convex\noptimization problem (it may have more than one local optima), which means that\nit is very important to initialize as close to the solution as possible. For\nexample, lets start with our (previously computed) rough transformation\naligning the centers of mass of our images, and then refine it in three stages.\nFirst look for an optimal translation. The dictionary regtransforms contains\nall available transforms, we obtain one of them by providing its name and the\ndimension (either 2 or 3) of the image we are working with (since we are\naligning volumes, the dimension is 3)</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">TranslationTransform3D</span><span class=\"p\">()</span>\n<span class=\"n\">params0</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">starting_affine</span> <span class=\"o\">=</span> <span class=\"n\">c_of_mass</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"n\">affreg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                              <span class=\"n\">static_grid2world</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">,</span>\n                              <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">starting_affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If we look at the result, we can see that this translation is much better than\nsimply aligning the centers of mass</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_trans_0.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_trans_1.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_trans_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_trans_0.png\" src=\"examples_built/transformed_trans_0.png\" />\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_trans_1.png\" src=\"examples_built/transformed_trans_1.png\" />\n</div>\n<div class=\"figure align-center\" id=\"id7\">\n<img alt=\"examples_built/transformed_trans_2.png\" src=\"examples_built/transformed_trans_2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Registration result by translating the moving image, using MI</strong>.</span></p>\n</div>\n<p>Now lets refine with a rigid transform (this may even modify our previously\nfound optimal translation)</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">RigidTransform3D</span><span class=\"p\">()</span>\n<span class=\"n\">params0</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">starting_affine</span> <span class=\"o\">=</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"n\">rigid</span> <span class=\"o\">=</span> <span class=\"n\">affreg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                        <span class=\"n\">static_grid2world</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">,</span>\n                        <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">starting_affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This produces a slight rotation, and the images are now better aligned</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">rigid</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_rigid_0.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_rigid_1.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_rigid_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_rigid_0.png\" src=\"examples_built/transformed_rigid_0.png\" />\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_rigid_1.png\" src=\"examples_built/transformed_rigid_1.png\" />\n</div>\n<div class=\"figure align-center\" id=\"id8\">\n<img alt=\"examples_built/transformed_rigid_2.png\" src=\"examples_built/transformed_rigid_2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Registration result with a rigid transform, using Mutual Information</strong>.</span></p>\n</div>\n<p>Finally, lets refine with a full affine transform (translation, rotation, scale\nand shear), it is safer to fit more degrees of freedom now, since we must be\nvery close to the optimal transform</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">AffineTransform3D</span><span class=\"p\">()</span>\n<span class=\"n\">params0</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">starting_affine</span> <span class=\"o\">=</span> <span class=\"n\">rigid</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">affreg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                         <span class=\"n\">static_grid2world</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">,</span>\n                         <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">starting_affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This results in a slight shear and scale</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_affine_0.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_affine_1.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed_affine_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_affine_0.png\" src=\"examples_built/transformed_affine_0.png\" />\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/transformed_affine_1.png\" src=\"examples_built/transformed_affine_1.png\" />\n</div>\n<div class=\"figure align-center\" id=\"id9\">\n<img alt=\"examples_built/transformed_affine_2.png\" src=\"examples_built/transformed_affine_2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Registration result with an affine transform, using Mutual Information</strong>.</span></p>\n</div>\n<table class=\"docutils citation\" frame=\"void\" id=\"mattes03\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Mattes03]</a></td><td>Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,\nEubank, W. (2003). PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical Imaging,\n22(1), 120-8.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"avants11\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Avants11]</td><td><em>(<a class=\"fn-backref\" href=\"#id2\">1</a>, <a class=\"fn-backref\" href=\"#id3\">2</a>)</em> Avants, B. B., Tustison, N., &amp; Song, G. (2011). Advanced\nNormalization Tools ( ANTS ), 1-35.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/affine_registration_3d.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Affine Registration in 3D", "sourcename": "examples_built/affine_registration_3d.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/affine_registration_3d", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Affine Registration in 3D</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}