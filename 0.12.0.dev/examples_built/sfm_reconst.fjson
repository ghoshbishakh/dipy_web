{"body": "<div class=\"section\" id=\"reconstruction-with-the-sparse-fascicle-model\">\n<span id=\"sfm-reconst\"></span><span id=\"example-sfm-reconst\"></span><h1>Reconstruction with the Sparse Fascicle Model<a class=\"headerlink\" href=\"#reconstruction-with-the-sparse-fascicle-model\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In this example, we will use the Sparse Fascicle Model <a class=\"reference internal\" href=\"../../reference/dipy.reconst/#id300\" id=\"id1\">[Rokem2015]</a>, to\nreconstruct the fiber orientation distribution function (fODF) in every voxel.</p>\n<p>First, we import the modules we will use in this example:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.sfm</span> <span class=\"k\">as</span> <span class=\"nn\">sfm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">as</span> <span class=\"nn\">dpd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.direction.peaks</span> <span class=\"k\">as</span> <span class=\"nn\">dpp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n</pre></div>\n</div>\n<p>For the purpose of this example, we will use the Stanford HARDI dataset (150\ndirections, single b-value of 2000 s/mm:math:<cite>^2</cite>) that can be automatically\ndownloaded. If you have not yet downloaded this data-set in one of the other\nexamples, you will need to be connected to the internet the first time you run\nthis example. The data will be stored for subsequent runs, and for use with\nother examples.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_stanford_hardi</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Reconstruction of the fiber ODF in each voxel guides subsequent tracking\nsteps. Here, the model is the Sparse Fascicle Model, described in\n<a class=\"reference internal\" href=\"../../reference/dipy.reconst/#id301\" id=\"id2\">[Rokem2014]</a>. This model reconstructs the diffusion signal as a combination of\nthe signals from different fascicles. This model can be written as:</p>\n<div class=\"math\">\n\\[y = X\\beta\\]</div>\n<p>Where <span class=\"math\">\\(y\\)</span> is the signal and <span class=\"math\">\\(\\beta\\)</span> are weights on different points in the\nsphere. The columns of the design matrix, <span class=\"math\">\\(X\\)</span> are the signals in each point in\nthe measurement that would be predicted if there was a fascicle oriented in the\ndirection represented by that column. Typically, the signal used for this\nkernel will be a prolate tensor with axial diffusivity 3-5 times higher than\nits radial diffusivity. The exact numbers can also be estimated from examining\nparts of the brain in which there is known to be only one fascicle (e.g. in\ncorpus callosum).</p>\n<p>Sparsity constraints on the fiber ODF (<span class=\"math\">\\(\\beta\\)</span>) are set through the Elastic Net\nalgorihtm <a class=\"reference internal\" href=\"../../reference/dipy.reconst/#zou2005\" id=\"id3\">[Zou2005]</a>.</p>\n<p>Elastic Net optimizes the following cost function:</p>\n<div class=\"math\">\n\\[\\sum_{i=1}^{n}{(y_i - \\hat{y}_i)^2} + \\alpha (\\lambda \\sum_{j=1}^{m}{w_j}+(1-\\lambda) \\sum_{j=1}^{m}{w^2_j}\\]</div>\n<p>where <span class=\"math\">\\(\\hat{y}\\)</span> is the signal predicted for a particular setting of <span class=\"math\">\\(\\beta\\)</span>,\nsuch that the left part of this expression is the squared loss function;\n<span class=\"math\">\\(\\alpha\\)</span> is a parameter that sets the balance between the squared loss on\nthe data, and the regularization constraints. The regularization parameter\n<span class=\"math\">\\(\\lambda\\)</span> sets the <cite>l1_ratio</cite>, which controls the balance between L1-sparsity\n(low sum of weights), and low L2-sparsity (low sum-of-squares of the weights).</p>\n<p>Just like constrained spherical deconvolution (see <a class=\"reference internal\" href=\"../reconst_csd/#reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>), the SFM\nrequires the definition of a response function. We&#8217;ll take advantage of the\nautomated algorithm in the <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">csdeconv</span></code> module to find this response\nfunction:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal\"><span class=\"pre\">response</span></code> return value contains two entries. The first is an array with\nthe eigenvalues of the response function and the second is the average S0 for\nthis response.</p>\n<p>It is a very good practice to always validate the result of auto_response. For,\nthis purpose we can print it and have a look at its values.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(array([ 0.0014,  0.00029,  0.00029]), 416.206)</p>\n<p>We initialize an SFM model object, using these values. We will use the default\nsphere (362  vertices, symmetrically distributed on the surface of the sphere),\nas a set of putative fascicle directions that are considered in the model</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">get_sphere</span><span class=\"p\">()</span>\n<span class=\"n\">sf_model</span> <span class=\"o\">=</span> <span class=\"n\">sfm</span><span class=\"o\">.</span><span class=\"n\">SparseFascicleModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                   <span class=\"n\">l1_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span>\n                                   <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>For the purpose of the example, we will consider a small volume of data\ncontaining parts of the corpus callosum and of the centrum semiovale</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">:</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Fitting the model to this small volume of data, we calculate the ODF of this\nmodel on the sphere, and plot it.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sf_fit</span> <span class=\"o\">=</span> <span class=\"n\">sf_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span>\n<span class=\"n\">sf_odf</span> <span class=\"o\">=</span> <span class=\"n\">sf_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"n\">fodf_spheres</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">sf_odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_odfs.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_odfs.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>We can extract the peaks from the ODF, and plot these as well</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sf_peaks</span> <span class=\"o\">=</span> <span class=\"n\">dpp</span><span class=\"o\">.</span><span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">sf_model</span><span class=\"p\">,</span>\n                                <span class=\"n\">data_small</span><span class=\"p\">,</span>\n                                <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_peaks</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">peaks</span><span class=\"p\">(</span><span class=\"n\">sf_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_dirs</span><span class=\"p\">,</span> <span class=\"n\">sf_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">1.3</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_peaks</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_peaks.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_peaks.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Finally, we plot both the peaks and the ODFs, overlayed:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fodf_spheres</span><span class=\"o\">.</span><span class=\"n\">GetProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetOpacity</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_both.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_both.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"../../_images/sf_both.png\" src=\"../../_images/sf_both.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>SFM Peaks and ODFs</strong>.</span></p>\n</div>\n<p>To see how to use this information in tracking, proceed to <a class=\"reference internal\" href=\"../sfm_tracking/#sfm-track\"><span class=\"std std-ref\">Tracking with the Sparse Fascicle Model</span></a>.</p>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"docutils citation\" frame=\"void\" id=\"rokem2015\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Rokem2015]</a></td><td>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell\n(2015). Evaluating the accuracy of diffusion MRI models in white\nmatter. PLoS ONE 10(4): e0123272. doi:10.1371/journal.pone.0123272</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"zou2005\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[Zou2005]</a></td><td>Zou H, Hastie T (2005). Regularization and variable\nselection via the elastic net. J R Stat Soc B:301-320</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/sfm_reconst.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": true, "title": "Reconstruction with the Sparse Fascicle Model", "sourcename": "examples_built/sfm_reconst.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/sfm_reconst", "next": null, "rellinks": [["genindex", "General Index", "I", "index"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruction with the Sparse Fascicle Model</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}