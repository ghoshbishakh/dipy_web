<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"noise-estimation-using-piesno\">\n<span id=\"example-piesno\"></span><h1>Noise estimation using PIESNO<a class=\"headerlink\" href=\"#noise-estimation-using-piesno\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Often, one is interested in estimating the noise in the diffusion signal. One\nof the methods to do this is the Probabilistic Identification and Estimation of\nNoise (PIESNO) framework [Koay2009]. Using this method, one can detect the\nstandard deviation of the noise from diffusion-weighted imaging (DWI). PIESNO\nalso works with multiple channel DWI datasets that are acquired from N array\ncoils for both SENSE and GRAPPA reconstructions.</p>\n<p>The PIESNO method works in two steps:</p>\n<p>1) First, it finds voxels that are most likely background voxels. Intuitively,\nthese voxels have very similar diffusion-weighted intensities (up to some noise)\nin the fourth dimension of the DWI dataset. White matter, gray matter or CSF\nvoxels have diffusion intensities that vary quite a lot across different\ndirections.</p>\n<p>2) From these estimated background voxels and the input number of coils N,\nPIESNO finds what sigma each Gaussian from each of the N coils would have\ngenerated the observed Rician (N=1) or non-central Chi (N&gt;1) distributed noise\nprofile in the DWI datasets.</p>\n<p>PIESNO makes an important assumption: the Gaussian noise standard deviation is\nassumed to be uniform. The noise is uniform across multiple slice locations or\nacross multiple images of the same location.</p>\n<p>For the full details, please refer to the original paper.</p>\n<p>In this example, we will demonstrate the use of PIESNO with a 3-shell data-set.</p>\n<p>We start by importing necessary modules and functions and loading the data:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.noise_estimate</span> <span class=\"k\">import</span> <span class=\"n\">piesno</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_sherbrooke_3shell</span><span class=\"p\">,</span> <span class=\"n\">read_sherbrooke_3shell</span>\n\n\n<span class=\"n\">fetch_sherbrooke_3shell</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_sherbrooke_3shell</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now that we have fetched a dataset, we must call PIESNO with the right number\nof coils used to acquire this dataset. It is also important to know what\nwas the parallel reconstruction algorithm used. Here, the data comes from a\nGRAPPA reconstruction, was acquired with a 12-elements head coil available on\nthe Tim Trio Siemens, for which the 12 coil elements are combined into 4 groups\nof 3 coil elements each. The signal is therefore received through 4 distinct\ngroups of receiver channels, yielding N = 4. Had we used a GE acquisition, we\nwould have used N=1 even if multiple channel coils are used because GE uses a\nSENSE reconstruction, which has a Rician noise nature and thus N is always 1.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">piesno</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">return_mask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">axial</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">axial_piesno</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Axial slice of the b=0 data&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial_piesno</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Background voxels from the data&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;piesno.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"../../_images/piesno.png\" src=\"../../_images/piesno.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Showing the mid axial slice of the b=0 image (left) and estimated\nbackground voxels (right) used to estimate the noise standard deviation</strong>.</span></p>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">(),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()),</span>\n         <span class=\"s1\">&#39;mask_piesno.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The noise standard deviation is sigma= &#39;</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The std of the background is =&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)]))</span>\n</pre></div>\n</div>\n<p>Here, we obtained a noise standard deviation of 7.26. For comparison, a simple\nstandard deviation of all voxels in the estimated mask (as done in the previous\nexample <a class=\"reference internal\" href=\"../snr_in_cc/#example-snr-in-cc\"><span class=\"std std-ref\">SNR estimation for Diffusion-Weighted Images</span></a>) gives a value of 6.1.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"o\">..</span> <span class=\"p\">[</span><span class=\"n\">Koay2009</span><span class=\"p\">]</span> <span class=\"n\">Koay</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"o\">.</span> <span class=\"n\">Ozarslan</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">.</span> <span class=\"n\">Pierpaoli</span><span class=\"o\">.</span> <span class=\"n\">Probabilistic</span>\n</pre></div>\n</div>\n<blockquote>\n<div>Identification and Estimation of Noise (PIESNO): A\nself-consistent approach and its applications in MRI.\nJMR, 199(1):94-103, 2009.</div></blockquote>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/piesno.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": false, "title": "Noise estimation using PIESNO", "sourcename": "examples_built/piesno.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/piesno", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Noise estimation using PIESNO</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"noise-estimation-using-piesno\">\n<span id=\"example-piesno\"></span><h1>Noise estimation using PIESNO<a class=\"headerlink\" href=\"#noise-estimation-using-piesno\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Often, one is interested in estimating the noise in the diffusion signal. One\nof the methods to do this is the Probabilistic Identification and Estimation of\nNoise (PIESNO) framework [Koay2009]. Using this method, one can detect the\nstandard deviation of the noise from diffusion-weighted imaging (DWI). PIESNO\nalso works with multiple channel DWI datasets that are acquired from N array\ncoils for both SENSE and GRAPPA reconstructions.</p>\n<p>The PIESNO method works in two steps:</p>\n<p>1) First, it finds voxels that are most likely background voxels. Intuitively,\nthese voxels have very similar diffusion-weighted intensities (up to some noise)\nin the fourth dimension of the DWI dataset. White matter, gray matter or CSF\nvoxels have diffusion intensities that vary quite a lot across different\ndirections.</p>\n<p>2) From these estimated background voxels and the input number of coils N,\nPIESNO finds what sigma each Gaussian from each of the N coils would have\ngenerated the observed Rician (N=1) or non-central Chi (N&gt;1) distributed noise\nprofile in the DWI datasets.</p>\n<p>PIESNO makes an important assumption: the Gaussian noise standard deviation is\nassumed to be uniform. The noise is uniform across multiple slice locations or\nacross multiple images of the same location.</p>\n<p>For the full details, please refer to the original paper.</p>\n<p>In this example, we will demonstrate the use of PIESNO with a 3-shell data-set.</p>\n<p>We start by importing necessary modules and functions and loading the data:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.noise_estimate</span> <span class=\"k\">import</span> <span class=\"n\">piesno</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_sherbrooke_3shell</span><span class=\"p\">,</span> <span class=\"n\">read_sherbrooke_3shell</span>\n\n\n<span class=\"n\">fetch_sherbrooke_3shell</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_sherbrooke_3shell</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now that we have fetched a dataset, we must call PIESNO with the right number\nof coils used to acquire this dataset. It is also important to know what\nwas the parallel reconstruction algorithm used. Here, the data comes from a\nGRAPPA reconstruction, was acquired with a 12-elements head coil available on\nthe Tim Trio Siemens, for which the 12 coil elements are combined into 4 groups\nof 3 coil elements each. The signal is therefore received through 4 distinct\ngroups of receiver channels, yielding N = 4. Had we used a GE acquisition, we\nwould have used N=1 even if multiple channel coils are used because GE uses a\nSENSE reconstruction, which has a Rician noise nature and thus N is always 1.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">piesno</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">return_mask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">axial</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">axial_piesno</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Axial slice of the b=0 data&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial_piesno</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Background voxels from the data&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;piesno.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"examples_built/piesno.png\" src=\"examples_built/piesno.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Showing the mid axial slice of the b=0 image (left) and estimated\nbackground voxels (right) used to estimate the noise standard deviation</strong>.</span></p>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">(),</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()),</span>\n         <span class=\"s1\">&#39;mask_piesno.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The noise standard deviation is sigma= &#39;</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The std of the background is =&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)]))</span>\n</pre></div>\n</div>\n<p>Here, we obtained a noise standard deviation of 7.26. For comparison, a simple\nstandard deviation of all voxels in the estimated mask (as done in the previous\nexample <a class=\"reference internal\" href=\"../snr_in_cc/#example-snr-in-cc\"><span class=\"std std-ref\">SNR estimation for Diffusion-Weighted Images</span></a>) gives a value of 6.1.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"o\">..</span> <span class=\"p\">[</span><span class=\"n\">Koay2009</span><span class=\"p\">]</span> <span class=\"n\">Koay</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"o\">.</span> <span class=\"n\">Ozarslan</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">.</span> <span class=\"n\">Pierpaoli</span><span class=\"o\">.</span> <span class=\"n\">Probabilistic</span>\n</pre></div>\n</div>\n<blockquote>\n<div>Identification and Estimation of Noise (PIESNO): A\nself-consistent approach and its applications in MRI.\nJMR, 199(1):94-103, 2009.</div></blockquote>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/piesno.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Noise estimation using PIESNO", "sourcename": "examples_built/piesno.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/piesno", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Noise estimation using PIESNO</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
