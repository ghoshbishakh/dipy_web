<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"reconstruct-with-diffusion-spectrum-imaging\">\n<span id=\"example-reconst-dsi\"></span><h1>Reconstruct with Diffusion Spectrum Imaging<a class=\"headerlink\" href=\"#reconstruct-with-diffusion-spectrum-imaging\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to apply Diffusion Spectrum Imaging <a class=\"reference internal\" href=\"#wedeen08\" id=\"id1\">[Wedeen08]</a> to\ndiffusion MRI datasets of Cartesian keyhole diffusion gradients.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dsi</span> <span class=\"k\">import</span> <span class=\"n\">DiffusionSpectrumModel</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a GradientTable\nobject (gradient information e.g. b-values). For example to read the b-values\nit is possible to write print(gtab.bvals).</p>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60,</span> <span class=\"pre\">203)</span></code></p>\n<p>This dataset has anisotropic voxel sizes, therefore reslicing is necessary.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Read the voxel size from the image header.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Instantiate the Model and apply it to the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dsmodel</span> <span class=\"o\">=</span> <span class=\"n\">DiffusionSpectrumModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Lets just use one slice only from the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dataslice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">dsfit</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Load an odf reconstruction sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Calculate the ODFs with this specific sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ODF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ODF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ODF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>ODF.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">724)</span></code></p>\n<p>In a similar fashion it is possible to calculate the PDFs of all voxels\nin one call with the following way</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PDF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;PDF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">PDF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>PDF.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17)</span></code></p>\n<p>We see that even for a single slice this PDF array is close to 345 MBytes so we\nreally have to be careful with memory usage when use this function with a full\ndataset.</p>\n<p>The simple solution is to generate/analyze the ODFs/PDFs by iterating through\neach voxel and not store them in memory if that is not necessary.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.ndindex</span> <span class=\"k\">import</span> <span class=\"n\">ndindex</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">ndindex</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]):</span>\n    <span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you really want to save the PDFs of a full dataset on the disc we recommend\nusing memory maps (<code class=\"docutils literal\"><span class=\"pre\">numpy.memmap</span></code>) but still have in mind that even if you do\nthat for example for a dataset of volume size <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60)</span></code> you will need about\n2.5 GBytes which can take less space when reasonable spheres (with &lt; 1000 vertices)\nare used.</p>\n<p>Let&#8217;s now calculate a map of Generalized Fractional Anisotropy (GFA) <a class=\"reference internal\" href=\"#tuch04\" id=\"id2\">[Tuch04]</a>\nusing the DSI ODFs.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.odf</span> <span class=\"k\">import</span> <span class=\"n\">gfa</span>\n\n<span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">gfa</span><span class=\"p\">(</span><span class=\"n\">ODF</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">fig_hist</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;dsi_gfa.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"../../_images/dsi_gfa.png\" src=\"../../_images/dsi_gfa.png\" />\n</div>\n<p>See also <a class=\"reference internal\" href=\"../reconst_dsi_metrics/#example-reconst-dsi-metrics\"><span class=\"std std-ref\">Calculate DSI-based scalar maps</span></a> for calculating different types\nof DSI maps.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"wedeen08\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Wedeen08]</a></td><td>Wedeen et al., Diffusion spectrum magnetic resonance imaging (DSI)\ntractography of crossing fibers, Neuroimage, vol 41, no 4,\n1267-1277, 2008.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"tuch04\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[Tuch04]</a></td><td>Tuch, D.S, Q-ball imaging, MRM, vol 52, no 6, 1358-1372, 2004.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_dsi.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": false, "title": "Reconstruct with Diffusion Spectrum Imaging", "sourcename": "examples_built/reconst_dsi.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/reconst_dsi", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Diffusion Spectrum Imaging</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"reconstruct-with-diffusion-spectrum-imaging\">\n<span id=\"example-reconst-dsi\"></span><h1>Reconstruct with Diffusion Spectrum Imaging<a class=\"headerlink\" href=\"#reconstruct-with-diffusion-spectrum-imaging\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to apply Diffusion Spectrum Imaging <a class=\"reference internal\" href=\"#wedeen08\" id=\"id1\">[Wedeen08]</a> to\ndiffusion MRI datasets of Cartesian keyhole diffusion gradients.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dsi</span> <span class=\"k\">import</span> <span class=\"n\">DiffusionSpectrumModel</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_taiwan_ntu_dsi</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a GradientTable\nobject (gradient information e.g. b-values). For example to read the b-values\nit is possible to write print(gtab.bvals).</p>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60,</span> <span class=\"pre\">203)</span></code></p>\n<p>This dataset has anisotropic voxel sizes, therefore reslicing is necessary.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Read the voxel size from the image header.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Instantiate the Model and apply it to the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dsmodel</span> <span class=\"o\">=</span> <span class=\"n\">DiffusionSpectrumModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Lets just use one slice only from the data.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dataslice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">dsfit</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Load an odf reconstruction sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Calculate the ODFs with this specific sphere</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ODF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ODF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ODF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>ODF.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">724)</span></code></p>\n<p>In a similar fashion it is possible to calculate the PDFs of all voxels\nin one call with the following way</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PDF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;PDF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">PDF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>PDF.shape <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17)</span></code></p>\n<p>We see that even for a single slice this PDF array is close to 345 MBytes so we\nreally have to be careful with memory usage when use this function with a full\ndataset.</p>\n<p>The simple solution is to generate/analyze the ODFs/PDFs by iterating through\neach voxel and not store them in memory if that is not necessary.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.ndindex</span> <span class=\"k\">import</span> <span class=\"n\">ndindex</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">ndindex</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]):</span>\n    <span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you really want to save the PDFs of a full dataset on the disc we recommend\nusing memory maps (<code class=\"docutils literal\"><span class=\"pre\">numpy.memmap</span></code>) but still have in mind that even if you do\nthat for example for a dataset of volume size <code class=\"docutils literal\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60)</span></code> you will need about\n2.5 GBytes which can take less space when reasonable spheres (with &lt; 1000 vertices)\nare used.</p>\n<p>Let&#8217;s now calculate a map of Generalized Fractional Anisotropy (GFA) <a class=\"reference internal\" href=\"#tuch04\" id=\"id2\">[Tuch04]</a>\nusing the DSI ODFs.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.odf</span> <span class=\"k\">import</span> <span class=\"n\">gfa</span>\n\n<span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">gfa</span><span class=\"p\">(</span><span class=\"n\">ODF</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">fig_hist</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;dsi_gfa.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/dsi_gfa.png\" src=\"examples_built/dsi_gfa.png\" />\n</div>\n<p>See also <a class=\"reference internal\" href=\"../reconst_dsi_metrics/#example-reconst-dsi-metrics\"><span class=\"std std-ref\">Calculate DSI-based scalar maps</span></a> for calculating different types\nof DSI maps.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"wedeen08\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Wedeen08]</a></td><td>Wedeen et al., Diffusion spectrum magnetic resonance imaging (DSI)\ntractography of crossing fibers, Neuroimage, vol 41, no 4,\n1267-1277, 2008.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"tuch04\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[Tuch04]</a></td><td>Tuch, D.S, Q-ball imaging, MRM, vol 52, no 6, 1358-1372, 2004.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_dsi.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Reconstruct with Diffusion Spectrum Imaging", "sourcename": "examples_built/reconst_dsi.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/reconst_dsi", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Diffusion Spectrum Imaging</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
