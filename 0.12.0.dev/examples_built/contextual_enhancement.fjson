{"body": "<div class=\"section\" id=\"crossing-preserving-contextual-enhancement\">\n<span id=\"example-contextual-enhancement\"></span><h1>Crossing-preserving contextual enhancement<a class=\"headerlink\" href=\"#crossing-preserving-contextual-enhancement\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This demo presents an example of crossing-preserving contextual enhancement of\nFOD/ODF fields [<a class=\"reference internal\" href=\"#meesters2016-ismrm\">Meesters2016_ISMRM</a>], implementing the contextual PDE framework\nof <a class=\"reference internal\" href=\"#portegies2015-plosone\" id=\"id1\">[Portegies2015_PLoSOne]</a> for processing HARDI data. The aim is to enhance the\nalignment of elongated structures in the data such that crossing/junctions are\nmaintained while reducing noise and small incoherent structures. This is\nachieved via a hypo-elliptic 2nd order PDE in the domain of coupled positions\nand orientations <span class=\"math\">\\(\\mathbb{R}^3 \\rtimes S^2\\)</span>. This domain carries a\nnon-flat geometrical differential structure that allows including a notion of\nalignment between neighboring points.</p>\n<p>Let <span class=\"math\">\\(({\\bf y},{\\bf n}) \\in \\mathbb{R}^3\\rtimes S^2\\)</span> where\n<span class=\"math\">\\({\\bf y} \\in \\mathbb{R}^{3}\\)</span> denotes the spatial part, and\n<span class=\"math\">\\({\\bf n} \\in S^2\\)</span> the angular part.\nLet <span class=\"math\">\\(W:\\mathbb{R}^3\\rtimes S^2\\times \\mathbb{R}^{+} \\to \\mathbb{R}\\)</span> be\nthe function representing the evolution of FOD/ODF field. Then, the contextual\nPDE with evolution time <span class=\"math\">\\(t\\geq 0\\)</span> is given by:</p>\n<div class=\"math\">\n\\[\\begin{split}  \\begin{cases}\n\\frac{\\partial}{\\partial t} W({\\bf y},{\\bf n},t) &amp;= ((D^{33}({\\bf n} \\cdot\n        \\nabla)^2 + D^{44} \\Delta_{S^2})W)({\\bf y},{\\bf n},t)\n\\\\ W({\\bf y},{\\bf n},0) &amp;= U({\\bf y},{\\bf n})\n\\end{cases},\\end{split}\\]</div>\n<p>where:</p>\n<ul class=\"simple\">\n<li><span class=\"math\">\\(D^{33}&gt;0\\)</span> is  the coefficient for the spatial smoothing (which goes only in the direction of <span class=\"math\">\\(n\\)</span>);</li>\n<li><span class=\"math\">\\(D^{44}&gt;0\\)</span> is the coefficient for the angular smoothing (here <span class=\"math\">\\(\\Delta_{S^2}\\)</span> denotes the Laplace-Beltrami operator on the sphere <span class=\"math\">\\(S^2\\)</span>);</li>\n<li><span class=\"math\">\\(U:\\mathbb{R}^3\\rtimes S^2 \\to \\mathbb{R}\\)</span> is the initial condition given by the noisy FOD/ODF\u2019s field.</li>\n</ul>\n<p>This equation is solved via a shift-twist convolution (denoted by <span class=\"math\">\\(\\ast_{\\mathbb{R}^3\\rtimes S^2}\\)</span>) with its corresponding kernel <span class=\"math\">\\(P_t:\\mathbb{R}^3\\rtimes S^2 \\to \\mathbb{R}^+\\)</span>:</p>\n<div class=\"math\">\n\\[W({\\bf y},{\\bf n},t) = (P_t \\ast_{\\mathbb{R}^3 \\rtimes S^2} U)({\\bf y},{\\bf n})\n= \\int_{\\mathbb{R}^3} \\int_{S^2} P_t (R^T_{{\\bf n}^\\prime}({\\bf y}-{\\bf y}^\\prime),\n R^T_{{\\bf n}^\\prime} {\\bf n} ) U({\\bf y}^\\prime, {\\bf n}^\\prime)\\]</div>\n<p>Here, <span class=\"math\">\\(R_{\\bf n}\\)</span> is any 3D rotation that maps the vector <span class=\"math\">\\((0,0,1)\\)</span>\nonto <span class=\"math\">\\({\\bf n}\\)</span>.</p>\n<p>Note that the shift-twist convolution differs from a Euclidean convolution and\ntakes into account the non-flat structure of the space <span class=\"math\">\\(\\mathbb{R}^3\\rtimes S^2\\)</span>.</p>\n<p>The kernel <span class=\"math\">\\(P_t\\)</span> has a stochastic interpretation <a class=\"reference internal\" href=\"#duitsandfranken-ijcv\" id=\"id2\">[DuitsAndFranken_IJCV]</a>.\nIt can be seen as the limiting distribution obtained by accumulating random\nwalks of particles in the position/orientation domain, where in each step the\nparticles can (randomly) move forward/backward along their current orientation,\nand (randomly) change their orientation.  This is an extension to the 3D case of\nthe process for contour enhancement of 2D images.</p>\n<div class=\"figure align-center\" id=\"id5\">\n<a class=\"reference internal image-reference\" href=\"../../_images/stochastic_process.jpg\"><img alt=\"../../_images/stochastic_process.jpg\" src=\"../../_images/stochastic_process.jpg\" style=\"width: 384.0px; height: 322.8px;\" /></a>\n<p class=\"caption\"><span class=\"caption-text\">The random motion of particles (a) and it&#8217;s corresponding probability map (b) in 2D. The 3D kernel is shown on the right. Adapted from <a class=\"reference internal\" href=\"#portegies2015-plosone\" id=\"id3\">[Portegies2015_PLoSOne]</a>.</span></p>\n</div>\n<p>In practice, as the exact analytical formulas for the kernel <span class=\"math\">\\(P_t\\)</span>\nare unknown, we use the approximation given in <a class=\"reference internal\" href=\"#portegies2015-ssvm\" id=\"id4\">[Portegies2015_SSVM]</a>.</p>\n<p>The enhancement is evaluated on the Stanford HARDI dataset\n(150 orientations, b=2000s/mm^2) where Rician noise is added. Constrained\nspherical deconvolution is used to model the fiber orientations.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"k\">import</span> <span class=\"n\">add_noise</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n\n<span class=\"c1\"># Read data</span>\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add Rician noise</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"n\">b0_slice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"p\">:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">b0_slice</span><span class=\"p\">)</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">data_noisy</span> <span class=\"o\">=</span> <span class=\"n\">add_noise</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">b0_slice</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]),</span> <span class=\"n\">noise_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;rician&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Select a small part of it.</span>\n<span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"c1\"># Include a larger region to avoid boundary effects</span>\n<span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">]</span>\n<span class=\"n\">data_noisy_small</span> <span class=\"o\">=</span> <span class=\"n\">data_noisy</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Fit an initial model to the data, in this case Constrained Spherical\nDeconvolution is used.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Perform CSD on the original data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model_orig</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit_orig</span> <span class=\"o\">=</span> <span class=\"n\">csd_model_orig</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span>\n<span class=\"n\">csd_shm_orig</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit_orig</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span>\n\n<span class=\"c1\"># Perform CSD on the original data + noise</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data_noisy</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model_noisy</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit_noisy</span> <span class=\"o\">=</span> <span class=\"n\">csd_model_noisy</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_noisy_small</span><span class=\"p\">)</span>\n<span class=\"n\">csd_shm_noisy</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit_noisy</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span>\n</pre></div>\n</div>\n<p>Inspired by [<a class=\"reference internal\" href=\"#rodrigueseurographics\">RodriguesEurographics</a>], a lookup-table is created, containing\nrotated versions of the kernel <span class=\"math\">\\(P_t\\)</span> sampled over a discrete set of\norientations. In order to ensure rotationally invariant processing, the discrete\norientations are required to be equally distributed over a sphere. Per default,\na sphere with 100 directions is used.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.enhancement_kernel</span> <span class=\"k\">import</span> <span class=\"n\">EnhancementKernel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.shift_twist_convolution</span> <span class=\"k\">import</span> <span class=\"n\">convolve</span>\n\n<span class=\"c1\"># Create lookup table</span>\n<span class=\"n\">D33</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">D44</span> <span class=\"o\">=</span> <span class=\"mf\">0.02</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">EnhancementKernel</span><span class=\"p\">(</span><span class=\"n\">D33</span><span class=\"p\">,</span> <span class=\"n\">D44</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Visualize the kernel</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">sf_to_sh</span><span class=\"p\">,</span> <span class=\"n\">sh_to_sf</span>\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># convolve kernel with delta spike</span>\n<span class=\"n\">spike</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_orientations</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">spike</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">spike_shm_conv</span> <span class=\"o\">=</span> <span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">sf_to_sh</span><span class=\"p\">(</span><span class=\"n\">spike</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_sphere</span><span class=\"p\">(),</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">k</span><span class=\"p\">,</span>\n                          <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">test_mode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">spike_sf_conv</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">spike_shm_conv</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">model_kernel</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">((</span><span class=\"n\">spike_sf_conv</span> <span class=\"o\">*</span> <span class=\"mi\">6</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">,:,:,:],</span>\n                                  <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                  <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                  <span class=\"n\">radial_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">model_kernel</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">focal</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">viewup</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;kernel.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"../../_images/kernel.png\" src=\"../../_images/kernel.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Visualization of the contour enhancement kernel.</span></p>\n</div>\n<p>Shift-twist convolution is applied on the noisy data</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Perform convolution</span>\n<span class=\"n\">csd_shm_enh</span> <span class=\"o\">=</span> <span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">csd_shm_noisy</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The Sharpening Deconvolution Transform is applied to sharpen the ODF field.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Sharpen via the Sharpening Deconvolution Transform</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">odf_sh_to_sharp</span>\n<span class=\"n\">csd_shm_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">odf_sh_to_sharp</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span>  <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">lambda_</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert raw and enhanced data to discrete form</span>\n<span class=\"n\">csd_sf_orig</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_orig</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_noisy</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_noisy</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_enh</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh_sharp</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Normalize the sharpened ODFs</span>\n<span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">amax</span><span class=\"p\">(</span><span class=\"n\">csd_sf_orig</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">amax</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh_sharp</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">1.25</span>\n</pre></div>\n</div>\n<p>The end results are visualized. It can be observed that the end result after\ndiffusion and sharpening is closer to the original noiseless dataset.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csd_sf_orig_slice</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_orig</span><span class=\"p\">[</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">:]</span>\n<span class=\"n\">csd_sf_noisy_slice</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_noisy</span><span class=\"p\">[</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">:]</span>\n<span class=\"n\">csd_sf_enh_slice</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_enh</span><span class=\"p\">[</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">:]</span>\n<span class=\"n\">csd_sf_enh_sharp_slice</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_enh_sharp</span><span class=\"p\">[</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">:]</span>\n\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># original ODF field</span>\n<span class=\"n\">fodf_spheres_org</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">csd_sf_orig_slice</span><span class=\"p\">,</span>\n                                     <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                     <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                     <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">radial_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_org</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres_org</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ODF field with added noise</span>\n<span class=\"n\">fodf_spheres</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">csd_sf_noisy_slice</span><span class=\"p\">,</span>\n                                 <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                 <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                 <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                 <span class=\"n\">radial_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Enhancement of noisy ODF field</span>\n<span class=\"n\">fodf_spheres_enh</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh_slice</span><span class=\"p\">,</span>\n                                     <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                     <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                     <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">radial_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_enh</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres_enh</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Additional sharpening</span>\n<span class=\"n\">fodf_spheres_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">sphere_funcs</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh_sharp_slice</span><span class=\"p\">,</span>\n                                           <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                           <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                           <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                           <span class=\"n\">radial_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_enh_sharp</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fodf_spheres_enh_sharp</span><span class=\"p\">)</span>\n\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;enhancements.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id7\">\n<img alt=\"../../_images/enhancements.png\" src=\"../../_images/enhancements.png\" />\n<p class=\"caption\"><span class=\"caption-text\">The results after enhancements. Top-left: original noiseless data.\nBottom-left: original data with added Rician noise (SNR=10). Bottom-right:\nAfter enhancement of noisy data. Top-right: After enhancement and sharpening\nof noisy data.</span></p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"docutils citation\" frame=\"void\" id=\"meesters2016-ismrm\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Meesters2016_ISMRM]</td><td>S. Meesters, G. Sanguinetti, E. Garyfallidis,\nJ. Portegies, R. Duits. (2016) Fast implementations of\ncontextual PDE\u2019s for HARDI data processing in DIPY.\nISMRM 2016 conference.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"portegies2015-plosone\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Portegies2015_PLoSOne]</td><td><em>(<a class=\"fn-backref\" href=\"#id1\">1</a>, <a class=\"fn-backref\" href=\"#id3\">2</a>)</em> J. Portegies, R. Fick, G. Sanguinetti, S. Meesters,\nG.Girard, and R. Duits. (2015) Improving Fiber\nAlignment in HARDI by Combining Contextual PDE flow\nwith Constrained Spherical Deconvolution. PLoS One.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"portegies2015-ssvm\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[Portegies2015_SSVM]</a></td><td>J. Portegies, G. Sanguinetti, S. Meesters, and R. Duits.\n(2015) New Approximation of a Scale Space Kernel on SE(3)\nand Applications in Neuroimaging. Fifth International\nConference on Scale Space and Variational Methods in\nComputer Vision</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"duitsandfranken-ijcv\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[DuitsAndFranken_IJCV]</a></td><td>R. Duits and E. Franken (2011) Left-invariant diffusions\non the space of positions and orientations and their\napplication to crossing-preserving smoothing of HARDI\nimages. International Journal of Computer Vision, 92:231-264.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rodrigueseurographics\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[RodriguesEurographics]</td><td>P. Rodrigues, R. Duits, B. Romeny, A. Vilanova\n(2010). Accelerated Diffusion Operators for Enhancing DW-MRI.\nEurographics Workshop on Visual Computing for Biology and Medicine.\nThe Eurographics Association.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/contextual_enhancement.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": true, "title": "Crossing-preserving contextual enhancement", "sourcename": "examples_built/contextual_enhancement.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/contextual_enhancement", "next": null, "rellinks": [["genindex", "General Index", "I", "index"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Crossing-preserving contextual enhancement</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}