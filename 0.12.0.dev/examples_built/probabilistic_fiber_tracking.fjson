{"body": "<div class=\"section\" id=\"an-introduction-to-the-probabilistic-direction-getter\">\n<span id=\"example-probabilistic-fiber-tracking\"></span><h1>An introduction to the Probabilistic Direction Getter<a class=\"headerlink\" href=\"#an-introduction-to-the-probabilistic-direction-getter\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Probabilistic fiber tracking is a way of reconstructing white matter\nconnections using diffusion MR imaging. Like deterministic fiber tracking, the\nprobabilistic approach follows the trajectory of a possible pathway step by\nstep starting at a seed, however, unlike deterministic tracking, the tracking\ndirection at each point along the path is chosen at random from a distribution.\nThe distribution at each point is different and depends on the observed\ndiffusion data at that point. The distribution of tracking directions at each\npoint can be represented as a probability mass function (PMF) if the possible\ntracking directions are restricted to discrete numbers of well distributed\npoints on a sphere.</p>\n<p>This example is an extension of the &#8220;introduction to basic tracking&#8221; example.\nWe&#8217;ll begin by repeating a few steps from that example, loading the data and\nfitting a constrained spherical deconvolution (CSD) model.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_stanford_labels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"k\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">,</span> <span class=\"n\">LocalTracking</span><span class=\"p\">)</span>\n\n<span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">labels_img</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit</span> <span class=\"o\">=</span> <span class=\"n\">csd_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We use the GFA of the CSA model to build a tissue classifier.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n\n<span class=\"n\">csa_model</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">gfa</span> <span class=\"o\">=</span> <span class=\"n\">csa_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n<span class=\"n\">classifier</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">(</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The fiber orientation distribution (FOD) of the CSD model estimates the\ndistribution of small fiber bundles within each voxel. We can use this\ndistribution for probabilistic fiber tracking. One way to do this is to\nrepresent the FOD using a discrete sphere. This discrete FOD can be used by the\nProbabilistic Direction Getter as a PMF for sampling tracking directions. We\nneed to clip the FOD to use it as a PMF because the latter cannot have negative\nvalues. (Ideally the FOD should be strictly positive, but because of noise\nand/or model failures sometimes it can have negative values).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">ProbabilisticDirectionGetter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">small_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.trackvis</span> <span class=\"k\">import</span> <span class=\"n\">save_trk</span>\n\n<span class=\"n\">fod</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">small_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">pmf</span> <span class=\"o\">=</span> <span class=\"n\">fod</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">prob_dg</span> <span class=\"o\">=</span> <span class=\"n\">ProbabilisticDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_pmf</span><span class=\"p\">(</span><span class=\"n\">pmf</span><span class=\"p\">,</span> <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                                <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">small_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">prob_dg</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;probabilistic_small_sphere.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>One disadvantage of using a discrete PMF to represent possible tracking\ndirections is that it tends to take up a lot of memory (RAM). The size of the\nPMF, the FOD in this case, must be equal to the number of possible tracking\ndirections on the hemisphere, and every voxel has a unique PMF. In this case\nthe data is <code class=\"docutils literal\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76)</span></code> and <code class=\"docutils literal\"><span class=\"pre\">small_sphere</span></code> has 181 directions so the\nFOD is <code class=\"docutils literal\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76,</span> <span class=\"pre\">181)</span></code>. One way to avoid sampling the PMF and holding it\nin memory is to build the direction getter directly from the spherical harmonic\nrepresentation of the FOD. By using this approach, we can also use a larger\nsphere, like <code class=\"docutils literal\"><span class=\"pre\">default_sphere</span></code> which has 362 directions on the hemisphere,\nwithout having to worry about memory limitations.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">default_sphere</span>\n\n<span class=\"n\">prob_dg</span> <span class=\"o\">=</span> <span class=\"n\">ProbabilisticDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_shcoeff</span><span class=\"p\">(</span><span class=\"n\">csd_fit</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">prob_dg</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;probabilistic_shm_coeff.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Not all model fits have the <code class=\"docutils literal\"><span class=\"pre\">shm_coeff</span></code> attribute because not all models use\nthis basis to represent the data internally. However we can fit the ODF of any\nmodel to the spherical harmonic basis using the <code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> function.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">csd_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n                         <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">,</span> <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fod_coeff</span> <span class=\"o\">=</span> <span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span>\n<span class=\"n\">prob_dg</span> <span class=\"o\">=</span> <span class=\"n\">ProbabilisticDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_shcoeff</span><span class=\"p\">(</span><span class=\"n\">fod_coeff</span><span class=\"p\">,</span> <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">prob_dg</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;probabilistic_peaks_from_model.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n         <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/probabilistic_fiber_tracking.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "An introduction to the Probabilistic Direction Getter", "sourcename": "examples_built/probabilistic_fiber_tracking.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/probabilistic_fiber_tracking", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">An introduction to the Probabilistic Direction Getter</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}