<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"parallel-reconstruction-using-csd\">\n<span id=\"example-reconst-csd-parallel\"></span><h1>Parallel reconstruction using CSD<a class=\"headerlink\" href=\"#parallel-reconstruction-using-csd\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how to use parallelism (multiprocessing) using\n<code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> in order to speedup the signal reconstruction\nprocess. For this example will we use the same initial steps\nas we used in <a class=\"reference internal\" href=\"../reconst_csd/#example-reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>.</p>\n<p>Import modules, fetch and read data, apply the mask and calculate the response\nfunction.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">maskdata</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we are ready to import the CSD model and fit the datasets.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Compute the CSD-based ODFs using <code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code>. This function has a\nparameter called <code class=\"docutils literal\"><span class=\"pre\">parallel</span></code> which allows for the voxels to be processed in\nparallel. If <code class=\"docutils literal\"><span class=\"pre\">nbr_processes</span></code> is None it will figure out automatically the\nnumber of CPUs available in your system. Alternatively, you can set\n<code class=\"docutils literal\"><span class=\"pre\">nbr_processes</span></code> manually. Here, we show an example where we compare the\nduration of execution with or without parallelism.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks_parallel</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                                      <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                      <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                      <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                      <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                      <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_parallel</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model using &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">())</span>\n      <span class=\"o\">+</span> <span class=\"s2\">&quot; process ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_parallel</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> using 8 processes ran in :114.425682068 seconds</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                             <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                             <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_single</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> ran in :242.772505999 seconds</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Speedup factor : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span> <span class=\"o\">/</span> <span class=\"n\">time_parallel</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Speedup factor : 2.12166099088</p>\n<p>In Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal\"><span class=\"pre\">main</span></code> function and use:</p>\n<dl class=\"docutils\">\n<dt>if __name__ == &#8216;__main__&#8217;:</dt>\n<dd>import multiprocessing\nmultiprocessing.freeze_support()\nmain()</dd>\n</dl>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_csd_parallel.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": false, "title": "Parallel reconstruction using CSD", "sourcename": "examples_built/reconst_csd_parallel.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/reconst_csd_parallel", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parallel reconstruction using CSD</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"parallel-reconstruction-using-csd\">\n<span id=\"example-reconst-csd-parallel\"></span><h1>Parallel reconstruction using CSD<a class=\"headerlink\" href=\"#parallel-reconstruction-using-csd\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how to use parallelism (multiprocessing) using\n<code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> in order to speedup the signal reconstruction\nprocess. For this example will we use the same initial steps\nas we used in <a class=\"reference internal\" href=\"../reconst_csd/#example-reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>.</p>\n<p>Import modules, fetch and read data, apply the mask and calculate the response\nfunction.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">maskdata</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we are ready to import the CSD model and fit the datasets.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Compute the CSD-based ODFs using <code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code>. This function has a\nparameter called <code class=\"docutils literal\"><span class=\"pre\">parallel</span></code> which allows for the voxels to be processed in\nparallel. If <code class=\"docutils literal\"><span class=\"pre\">nbr_processes</span></code> is None it will figure out automatically the\nnumber of CPUs available in your system. Alternatively, you can set\n<code class=\"docutils literal\"><span class=\"pre\">nbr_processes</span></code> manually. Here, we show an example where we compare the\nduration of execution with or without parallelism.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks_parallel</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                                      <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                      <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                      <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                      <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                      <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_parallel</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model using &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">())</span>\n      <span class=\"o\">+</span> <span class=\"s2\">&quot; process ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_parallel</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> using 8 processes ran in :114.425682068 seconds</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                             <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                             <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_single</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> ran in :242.772505999 seconds</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Speedup factor : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span> <span class=\"o\">/</span> <span class=\"n\">time_parallel</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Speedup factor : 2.12166099088</p>\n<p>In Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal\"><span class=\"pre\">main</span></code> function and use:</p>\n<dl class=\"docutils\">\n<dt>if __name__ == &#8216;__main__&#8217;:</dt>\n<dd>import multiprocessing\nmultiprocessing.freeze_support()\nmain()</dd>\n</dl>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/reconst_csd_parallel.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Parallel reconstruction using CSD", "sourcename": "examples_built/reconst_csd_parallel.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/reconst_csd_parallel", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parallel reconstruction using CSD</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
