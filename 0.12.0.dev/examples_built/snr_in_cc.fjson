<<<<<<< HEAD
{"body": "<div class=\"section\" id=\"snr-estimation-for-diffusion-weighted-images\">\n<span id=\"example-snr-in-cc\"></span><h1>SNR estimation for Diffusion-Weighted Images<a class=\"headerlink\" href=\"#snr-estimation-for-diffusion-weighted-images\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Computing the Signal-to-Noise-Ratio (SNR) of DW images is still an open question,\nas SNR depends on the white matter structure of interest as well as\nthe gradient direction corresponding to each DWI.</p>\n<p>In classical MRI, SNR can be defined as the ratio of the mean\nof the signal divided by the standard deviation of the\nunderlying Gaussian noise, that is SNR = mean(signal) / std(noise).\nThe noise standard deviation can be\ncomputed from the background in any of the DW images. How do we compute\nthe mean of the signal, and what signal?</p>\n<p>The strategy here is to compute a &#8216;worst-case&#8217; SNR for DWI. Several white matter\nstructures such as the corpus callosum (CC), corticospinal tract (CST), or\nthe superior longitudinal fasciculus (SLF) can be easily identified from\nthe colored-FA (cfa) map. In this example, we will use voxels from the CC,\nwhich have the characteristic of being highly RED in the cfa map since they are mainly oriented in\nthe left-right direction. We know that the DW image\nclosest to the x-direction will be the one with the most attenuated diffusion signal.\nThis is the strategy adopted in several recent papers (see <a class=\"footnote-reference\" href=\"#id3\" id=\"id1\">[1]</a> and <a class=\"footnote-reference\" href=\"#id4\" id=\"id2\">[2]</a>). It gives a good\nindication of the quality of the DWI data.</p>\n<p>First, we compute the tensor model in a brain mask (see the DTI example for more explanation).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">import</span> <span class=\"n\">TensorModel</span>\n\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing brain mask...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing tensors...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tenmodel</span> <span class=\"o\">=</span> <span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n<span class=\"n\">tensorfit</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we set our red-green-blue thresholds to (0.6, 1) in the x axis\nand (0, 0.1) in the y and z axes respectively.\nThese values work well in practice to isolate the very RED voxels of the cfa map.</p>\n<p>Then, as assurance, we want just RED voxels in the CC (there could be\nnoisy red voxels around the brain mask and we don&#8217;t want those). Unless the brain\nacquisition was badly aligned, the CC is always close to the mid-sagittal slice.</p>\n<p>The following lines perform these two operations and then saves the computed mask.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing worst-case/best-case SNR using the corpus callosum...&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">segment_from_cfa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">bounding_box</span>\n\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">CC_box</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">bounding_box</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">)</span>\n<span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">maxs</span><span class=\"p\">)</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">mins</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">4</span>\n<span class=\"n\">bounds_min</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">+</span> <span class=\"n\">diff</span>\n<span class=\"n\">bounds_max</span> <span class=\"o\">=</span> <span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">diff</span>\n\n<span class=\"n\">CC_box</span><span class=\"p\">[</span><span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">mask_cc_part</span><span class=\"p\">,</span> <span class=\"n\">cfa</span> <span class=\"o\">=</span> <span class=\"n\">segment_from_cfa</span><span class=\"p\">(</span><span class=\"n\">tensorfit</span><span class=\"p\">,</span> <span class=\"n\">CC_box</span><span class=\"p\">,</span>\n                                   <span class=\"n\">threshold</span><span class=\"p\">,</span> <span class=\"n\">return_cfa</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">cfa_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">((</span><span class=\"n\">cfa</span><span class=\"o\">*</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">mask_cc_part_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part_img</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mask_CC_part.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;Corpus callosum segmentation&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;Corpus callosum (CC)&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">cfa</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC mask used for SNR computation&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC_segmentation.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"../../_images/CC_segmentation.png\" src=\"../../_images/CC_segmentation.png\" />\n</div>\n<p>Now that we are happy with our crude CC mask that selected voxels in the x-direction,\nwe can use all the voxels to estimate the mean signal in this region.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_cc_part</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now, we need a good background estimation. We will re-use the brain mask\ncomputed before and invert it to catch the outside of the brain. This could\nalso be determined manually with a ROI in the background.\n[Warning: Certain MR manufacturers mask out the outside of the brain with 0&#8217;s.\nOne thus has to be careful how the noise ROI is defined].</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage.morphology</span> <span class=\"k\">import</span> <span class=\"n\">binary_dilation</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">mask_noise</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"p\">:</span><span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">mask_noise</span>\n<span class=\"n\">mask_noise_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_noise_img</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mask_noise.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">noise_std</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_noise</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Noise standard deviation sigma= &#39;</span><span class=\"p\">,</span> <span class=\"n\">noise_std</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can now compute the SNR for each DWI. For example, report SNR\nfor DW images with gradient direction that lies the closest to\nthe X, Y and Z axes.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Exclude null bvecs from the search</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n<span class=\"n\">axis_X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">direction</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">axis_X</span><span class=\"p\">,</span> <span class=\"n\">axis_Y</span><span class=\"p\">,</span> <span class=\"n\">axis_Z</span><span class=\"p\">]:</span>\n      <span class=\"n\">SNR</span> <span class=\"o\">=</span> <span class=\"n\">mean_signal</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">noise_std</span>\n      <span class=\"k\">if</span> <span class=\"n\">direction</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">:</span>\n              <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for the b=0 image is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n      <span class=\"k\">else</span> <span class=\"p\">:</span>\n              <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for direction&quot;</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">],</span> <span class=\"s2\">&quot;is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SNR for the b=0 image is : &#8216;&#8216;42.0695455758&#8217;&#8216;</p>\n<p>SNR for direction 58  [ 0.98875  0.1177  -0.09229] is : &#8216;&#8216;5.46995373635&#8217;&#8216;</p>\n<p>SNR for direction 57  [-0.05039  0.99871  0.0054406] is : &#8216;&#8216;23.9329492871&#8217;&#8216;</p>\n<p>SNR for direction 126 [-0.11825  -0.039925  0.99218 ] is : &#8216;&#8216;23.9965694823&#8217;&#8216;</p>\n<p>Since the CC is aligned with the X axis, the lowest SNR is for that gradient\ndirection. In comparison, the DW images in\nthe perpendical Y and Z axes have a high SNR. The b0 still exhibits the highest SNR,\nsince there is no signal attenuation.</p>\n<p>Hence, we can say the Stanford diffusion\ndata has a &#8216;worst-case&#8217; SNR of approximately 5, a\n&#8216;best-case&#8217; SNR of approximately 24, and a SNR of 42 on the b0 image.</p>\n<p>References:</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td><td>Descoteaux, M., Deriche, R., Le Bihan, D., Mangin, J.-F., and Poupon, C.\nMultiple q-shell diffusion propagator imaging.\nMedical image analysis, 15(4), 603, 2011.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[2]</a></td><td>Jones, D. K., Knosche, T. R., &amp; Turner, R.\nWhite Matter Integrity, Fiber Count, and Other Fallacies: The Dos and Don&#8217;ts of Diffusion MRI.\nNeuroImage, 73, 239, 2013.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/snr_in_cc.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": false, "title": "SNR estimation for Diffusion-Weighted Images", "sourcename": "examples_built/snr_in_cc.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/snr_in_cc", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">SNR estimation for Diffusion-Weighted Images</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
=======
{"body": "<div class=\"section\" id=\"snr-estimation-for-diffusion-weighted-images\">\n<span id=\"example-snr-in-cc\"></span><h1>SNR estimation for Diffusion-Weighted Images<a class=\"headerlink\" href=\"#snr-estimation-for-diffusion-weighted-images\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Computing the Signal-to-Noise-Ratio (SNR) of DW images is still an open question,\nas SNR depends on the white matter structure of interest as well as\nthe gradient direction corresponding to each DWI.</p>\n<p>In classical MRI, SNR can be defined as the ratio of the mean\nof the signal divided by the standard deviation of the\nunderlying Gaussian noise, that is SNR = mean(signal) / std(noise).\nThe noise standard deviation can be\ncomputed from the background in any of the DW images. How do we compute\nthe mean of the signal, and what signal?</p>\n<p>The strategy here is to compute a &#8216;worst-case&#8217; SNR for DWI. Several white matter\nstructures such as the corpus callosum (CC), corticospinal tract (CST), or\nthe superior longitudinal fasciculus (SLF) can be easily identified from\nthe colored-FA (cfa) map. In this example, we will use voxels from the CC,\nwhich have the characteristic of being highly RED in the cfa map since they are mainly oriented in\nthe left-right direction. We know that the DW image\nclosest to the x-direction will be the one with the most attenuated diffusion signal.\nThis is the strategy adopted in several recent papers (see <a class=\"footnote-reference\" href=\"#id3\" id=\"id1\">[1]</a> and <a class=\"footnote-reference\" href=\"#id4\" id=\"id2\">[2]</a>). It gives a good\nindication of the quality of the DWI data.</p>\n<p>First, we compute the tensor model in a brain mask (see the DTI example for more explanation).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">import</span> <span class=\"n\">TensorModel</span>\n\n<span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing brain mask...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing tensors...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tenmodel</span> <span class=\"o\">=</span> <span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n<span class=\"n\">tensorfit</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we set our red-green-blue thresholds to (0.6, 1) in the x axis\nand (0, 0.1) in the y and z axes respectively.\nThese values work well in practice to isolate the very RED voxels of the cfa map.</p>\n<p>Then, as assurance, we want just RED voxels in the CC (there could be\nnoisy red voxels around the brain mask and we don&#8217;t want those). Unless the brain\nacquisition was badly aligned, the CC is always close to the mid-sagittal slice.</p>\n<p>The following lines perform these two operations and then saves the computed mask.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing worst-case/best-case SNR using the corpus callosum...&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">segment_from_cfa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">bounding_box</span>\n\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">CC_box</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">bounding_box</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">)</span>\n<span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">maxs</span><span class=\"p\">)</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">mins</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">4</span>\n<span class=\"n\">bounds_min</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">+</span> <span class=\"n\">diff</span>\n<span class=\"n\">bounds_max</span> <span class=\"o\">=</span> <span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">diff</span>\n\n<span class=\"n\">CC_box</span><span class=\"p\">[</span><span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">mask_cc_part</span><span class=\"p\">,</span> <span class=\"n\">cfa</span> <span class=\"o\">=</span> <span class=\"n\">segment_from_cfa</span><span class=\"p\">(</span><span class=\"n\">tensorfit</span><span class=\"p\">,</span> <span class=\"n\">CC_box</span><span class=\"p\">,</span>\n                                   <span class=\"n\">threshold</span><span class=\"p\">,</span> <span class=\"n\">return_cfa</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">cfa_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">((</span><span class=\"n\">cfa</span><span class=\"o\">*</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">mask_cc_part_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part_img</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mask_CC_part.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;Corpus callosum segmentation&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;Corpus callosum (CC)&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">cfa</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC mask used for SNR computation&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC_segmentation.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\">\n<img alt=\"examples_built/CC_segmentation.png\" src=\"examples_built/CC_segmentation.png\" />\n</div>\n<p>Now that we are happy with our crude CC mask that selected voxels in the x-direction,\nwe can use all the voxels to estimate the mean signal in this region.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_cc_part</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now, we need a good background estimation. We will re-use the brain mask\ncomputed before and invert it to catch the outside of the brain. This could\nalso be determined manually with a ROI in the background.\n[Warning: Certain MR manufacturers mask out the outside of the brain with 0&#8217;s.\nOne thus has to be careful how the noise ROI is defined].</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage.morphology</span> <span class=\"k\">import</span> <span class=\"n\">binary_dilation</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">mask_noise</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"p\">:</span><span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">mask_noise</span>\n<span class=\"n\">mask_noise_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">mask_noise_img</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mask_noise.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">noise_std</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_noise</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Noise standard deviation sigma= &#39;</span><span class=\"p\">,</span> <span class=\"n\">noise_std</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can now compute the SNR for each DWI. For example, report SNR\nfor DW images with gradient direction that lies the closest to\nthe X, Y and Z axes.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Exclude null bvecs from the search</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n<span class=\"n\">axis_X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">direction</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">axis_X</span><span class=\"p\">,</span> <span class=\"n\">axis_Y</span><span class=\"p\">,</span> <span class=\"n\">axis_Z</span><span class=\"p\">]:</span>\n      <span class=\"n\">SNR</span> <span class=\"o\">=</span> <span class=\"n\">mean_signal</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">noise_std</span>\n      <span class=\"k\">if</span> <span class=\"n\">direction</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">:</span>\n              <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for the b=0 image is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n      <span class=\"k\">else</span> <span class=\"p\">:</span>\n              <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for direction&quot;</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">],</span> <span class=\"s2\">&quot;is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SNR for the b=0 image is : &#8216;&#8216;42.0695455758&#8217;&#8216;</p>\n<p>SNR for direction 58  [ 0.98875  0.1177  -0.09229] is : &#8216;&#8216;5.46995373635&#8217;&#8216;</p>\n<p>SNR for direction 57  [-0.05039  0.99871  0.0054406] is : &#8216;&#8216;23.9329492871&#8217;&#8216;</p>\n<p>SNR for direction 126 [-0.11825  -0.039925  0.99218 ] is : &#8216;&#8216;23.9965694823&#8217;&#8216;</p>\n<p>Since the CC is aligned with the X axis, the lowest SNR is for that gradient\ndirection. In comparison, the DW images in\nthe perpendical Y and Z axes have a high SNR. The b0 still exhibits the highest SNR,\nsince there is no signal attenuation.</p>\n<p>Hence, we can say the Stanford diffusion\ndata has a &#8216;worst-case&#8217; SNR of approximately 5, a\n&#8216;best-case&#8217; SNR of approximately 24, and a SNR of 42 on the b0 image.</p>\n<p>References:</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td><td>Descoteaux, M., Deriche, R., Le Bihan, D., Mangin, J.-F., and Poupon, C.\nMultiple q-shell diffusion propagator imaging.\nMedical image analysis, 15(4), 603, 2011.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[2]</a></td><td>Jones, D. K., Knosche, T. R., &amp; Turner, R.\nWhite Matter Integrity, Fiber Count, and Other Fallacies: The Dos and Don&#8217;ts of Diffusion MRI.\nNeuroImage, 73, 239, 2013.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/snr_in_cc.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "SNR estimation for Diffusion-Weighted Images", "sourcename": "examples_built/snr_in_cc.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/snr_in_cc", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">SNR estimation for Diffusion-Weighted Images</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}
>>>>>>> 1d6fdcf4511dbcfabbc73c3aa39a5e508df24b6c
