{"body": "<div class=\"section\" id=\"tracking-quick-start\">\n<span id=\"example-tracking-quick-start\"></span><h1>Tracking Quick Start<a class=\"headerlink\" href=\"#tracking-quick-start\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how to perform fiber tracking using Dipy.</p>\n<p>We will use Constrained Spherical Deconvolution (CSD) <a class=\"reference internal\" href=\"#tournier07\" id=\"id1\">[Tournier07]</a> for local\nreconstructions and then generate deterministic streamlines using the fiber\ndirections (peaks) from CSD and fractional anisotropic (FA) as a\nstopping criterion.</p>\n<p>Let&#8217;s load the necessary modules.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">import</span> <span class=\"n\">TensorModel</span><span class=\"p\">,</span> <span class=\"n\">fractional_anisotropy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">,</span>\n                                   <span class=\"n\">auto_response</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.eudx</span> <span class=\"k\">import</span> <span class=\"n\">EuDX</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz.colormap</span> <span class=\"k\">import</span> <span class=\"n\">line_colors</span>\n</pre></div>\n</div>\n<p>Load one of the available datasets with 150 gradients on the sphere and 10 b0s</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_hardi</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Create a brain mask. This dataset is a bit difficult to segment with the\ndefault <code class=\"docutils literal\"><span class=\"pre\">median_otsu</span></code> parameters (see <a class=\"reference internal\" href=\"../brain_extraction_dwi/#example-brain-extraction-dwi\"><span class=\"std std-ref\">Brain segmentation with median_otsu</span></a>)\ntherefore we use here a bit more advanced options.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the constrained spherical deconvolution we need to estimate the response\nfunction (see <a class=\"reference internal\" href=\"../reconst_csd/#example-reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>) and create a model.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we use <code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> to fit the data and calculated the fiber\ndirections in all voxels.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">csd_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                             <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                             <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                             <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the tracking part, we will use the fiber directions from the <code class=\"docutils literal\"><span class=\"pre\">csd_model</span></code>\nbut stop tracking in areas where fractional anisotropy (FA) is low (&lt; 0.1).\nTo derive the FA, used here as a stopping criterion, we would need to fit a\ntensor model first. Here, we fit the Tensor using weighted least squares (WLS).</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tensor_model</span> <span class=\"o\">=</span> <span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">fit_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;WLS&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tensor_fit</span> <span class=\"o\">=</span> <span class=\"n\">tensor_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"n\">FA</span> <span class=\"o\">=</span> <span class=\"n\">fractional_anisotropy</span><span class=\"p\">(</span><span class=\"n\">tensor_fit</span><span class=\"o\">.</span><span class=\"n\">evals</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In order for the stopping values to be used with our tracking algorithm we need\nto have the same dimensions as the <code class=\"docutils literal\"><span class=\"pre\">csd_peaks.peak_values</span></code>. For this reason,\nwe can assign the same FA value to every peak direction in the same voxel in\nthe following way.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">stopping_values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">csd_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"n\">stopping_values</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"n\">FA</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>For quality assurance we can also visualize a slice from the direction field\nwhich we will use as the basis to perform the tracking.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n\n<span class=\"n\">slice_no</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">peaks</span><span class=\"p\">(</span><span class=\"n\">csd_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_dirs</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">slice_no</span><span class=\"p\">:</span><span class=\"n\">slice_no</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                         <span class=\"n\">stopping_values</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">slice_no</span><span class=\"p\">:</span><span class=\"n\">slice_no</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as csd_direction_field.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;csd_direction_field.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"../../_images/csd_direction_field.png\" src=\"../../_images/csd_direction_field.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Direction Field (peaks)</strong></span></p>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">EuDX</span></code> <a class=\"reference internal\" href=\"../../reference/dipy.segment/#id23\" id=\"id2\">[Garyfallidis12]</a> is a fast algorithm that we use here to generate\nstreamlines. If the parameter <code class=\"docutils literal\"><span class=\"pre\">seeds</span></code> is a positive integer it will generate\nthat number of randomly placed seeds everywhere in the volume. Alternatively,\nyou can specify the exact seed points using an array (N, 3) where N is the\nnumber of seed points. For simplicity, here we will use the first option\n(random seeds). <code class=\"docutils literal\"><span class=\"pre\">a_low</span></code> is the threshold of the fist parameter\n(<code class=\"docutils literal\"><span class=\"pre\">stopping_values</span></code>) which means that there will that tracking will stop in\nregions with FA &lt; 0.1.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">EuDX</span><span class=\"p\">(</span><span class=\"n\">stopping_values</span><span class=\"p\">,</span>\n                            <span class=\"n\">csd_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_indices</span><span class=\"p\">,</span>\n                            <span class=\"n\">seeds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                            <span class=\"n\">odf_vertices</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span>\n                            <span class=\"n\">a_low</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span> <span class=\"k\">for</span> <span class=\"n\">streamline</span> <span class=\"ow\">in</span> <span class=\"n\">streamline_generator</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We can visualize the streamlines using <code class=\"docutils literal\"><span class=\"pre\">fvtk.line</span></code> or <code class=\"docutils literal\"><span class=\"pre\">fvtk.streamtube</span></code>.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">)</span>\n\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as csd_streamlines_eudx.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;csd_streamlines_eudx.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"../../_images/csd_streamlines_eudx.png\" src=\"../../_images/csd_streamlines_eudx.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>CSD-based streamlines using EuDX</strong></span></p>\n</div>\n<p>We used above <code class=\"docutils literal\"><span class=\"pre\">fvtk.record</span></code> because we want to create a figure for the\ntutorial but you can visualize the same objects in 3D using\n<code class=\"docutils literal\"><span class=\"pre\">fvtk.show(ren)</span></code>.</p>\n<p>To learn more about this process you could start playing with the number of\nseed points or, even better, specify seeds to be in specific regions of interest\nin the brain.</p>\n<p><code class=\"docutils literal\"><span class=\"pre\">fvtk</span></code> gives some minimal interactivity however you can save the resulting\nstreamlines in a Trackvis (.trk) format and load them for example with the\n<a class=\"reference external\" href=\"https://github.com/scilus/fibernavigator\">Fibernavigator</a> or another tool for medical visualization.</p>\n<p>Finally, let&#8217;s save the streamlines as a (.trk) file and FA as a Nifti image.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n\n<span class=\"n\">hdr</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">empty_header</span><span class=\"p\">()</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_order&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAS&#39;</span>\n<span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">csd_streamlines_trk</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">sl</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">sl</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"n\">csd_sl_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;csd_streamline.trk&#39;</span>\n\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">csd_sl_fname</span><span class=\"p\">,</span> <span class=\"n\">csd_streamlines_trk</span><span class=\"p\">,</span> <span class=\"n\">hdr</span><span class=\"p\">,</span> <span class=\"n\">points_space</span><span class=\"o\">=</span><span class=\"s1\">&#39;voxel&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">()),</span> <span class=\"s1\">&#39;FA_map.nii.gz&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal\"><span class=\"pre\">main</span></code> function and use:</p>\n<dl class=\"docutils\">\n<dt>if __name__ == &#8216;__main__&#8217;:</dt>\n<dd>import multiprocessing\nmultiprocessing.freeze_support()\nmain()</dd>\n</dl>\n<table class=\"docutils citation\" frame=\"void\" id=\"garyfallidis12\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[Garyfallidis12]</a></td><td>Garyfallidis E., &#8220;Towards an accurate brain tractography&#8221;, PhD thesis, University of Cambridge, 2012.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"tournier07\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Tournier07]</a></td><td>J-D. Tournier, F. Calamante and A. Connelly, &#8220;Robust determination of the fibre orientation distribution in diffusion MRI: Non-negativity constrained super-resolved spherical deconvolution&#8221;, Neuroimage, vol. 35, no. 4, pp. 1459-1472, 2007.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Dipy has a new and very modular fiber tracking machinery. Our new machinery\nfor fiber tracking is featured in the example <a class=\"reference internal\" href=\"#example-tracking-quick-start\"><span class=\"std std-ref\">Tracking Quick Start</span></a>.</p>\n</div>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/tracking_quick_start.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Tracking Quick Start", "sourcename": "examples_built/tracking_quick_start.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/tracking_quick_start", "next": null, "rellinks": [["genindex", "General Index", "I", "index"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tracking Quick Start</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}