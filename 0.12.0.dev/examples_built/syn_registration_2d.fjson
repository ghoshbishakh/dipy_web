{"body": "<div class=\"section\" id=\"symmetric-diffeomorphic-registration-in-2d\">\n<span id=\"example-syn-registration-2d\"></span><h1>Symmetric Diffeomorphic Registration in 2D<a class=\"headerlink\" href=\"#symmetric-diffeomorphic-registration-in-2d\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example explains how to register 2D images using the Symmetric Normalization\n(SyN) algorithm proposed by Avants et al. <a class=\"reference internal\" href=\"../syn_registration_3d/#avants09\" id=\"id1\">[Avants09]</a> (also implemented in\nthe ANTS software <a class=\"reference internal\" href=\"../syn_registration_3d/#avants11\" id=\"id2\">[Avants11]</a>)</p>\n<p>We will perform the classic Circle-To-C experiment for diffeomorphic registration</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.imwarp</span> <span class=\"k\">import</span> <span class=\"n\">SymmetricDiffeomorphicRegistration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.metrics</span> <span class=\"k\">import</span> <span class=\"n\">SSDMetric</span><span class=\"p\">,</span> <span class=\"n\">CCMetric</span><span class=\"p\">,</span> <span class=\"n\">EMMetric</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.align.imwarp</span> <span class=\"k\">as</span> <span class=\"nn\">imwarp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">regtools</span>\n\n\n<span class=\"n\">fname_moving</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;reg_o&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fname_static</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;reg_c&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fname_moving</span><span class=\"p\">)</span>\n<span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fname_static</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To visually check the overlap of the static image with the transformed moving\nimage, we can plot them on top of each other with different channels to see\nwhere the differences are located</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;input_images.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"examples_built/input_images.png\" src=\"examples_built/input_images.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Input images</strong>.</span></p>\n</div>\n<p>We want to find an invertible map that transforms the moving image (circle)\ninto the static image (the C letter)</p>\n<p>The first decision we need to make is what similarity metric is appropriate\nfor our problem. In this example we are using two binary images, so the Sum\nof Squared Differences (SSD) is a good choice.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dim</span> <span class=\"o\">=</span> <span class=\"n\">static</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">SSDMetric</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we define an instance of the registration class. The SyN algorithm uses\na multi-resolution approach by building a Gaussian Pyramid. We instruct the\nregistration instance to perform at most [n_0, n_1, ..., n_k] iterations at\neach level of the pyramid. The 0-th level corresponds to the finest resolution.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">]</span>\n\n<span class=\"n\">sdr</span> <span class=\"o\">=</span> <span class=\"n\">SymmetricDiffeomorphicRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">level_iters</span><span class=\"p\">,</span> <span class=\"n\">inv_iter</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we execute the optimization, which returns a DiffeomorphicMap object,\nthat can be used to register images back and forth between the static and moving\ndomains</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>It is a good idea to visualize the resulting deformation map to make sure the\nresult is reasonable (at least, visually)</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">plot_2d_diffeomorphic_map</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diffeomorphic_map.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"examples_built/diffeomorphic_map.png\" src=\"examples_built/diffeomorphic_map.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Deformed lattice under the resulting diffeomorphic map</strong>.</span></p>\n</div>\n<p>Now let&#8217;s warp the moving image and see if it gets similar to the static image</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">warped_moving</span> <span class=\"o\">=</span> <span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">warped_moving</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Warped moving&#39;</span><span class=\"p\">,</span>\n   <span class=\"s1\">&#39;direct_warp_result.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"examples_built/direct_warp_result.png\" src=\"examples_built/direct_warp_result.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Moving image transformed under the (direct) transformation in green on top of the static image (in red)</strong>.</span></p>\n</div>\n<p>And we can also apply the inverse mapping to verify that the warped static image\nis similar to the moving image</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">warped_static</span> <span class=\"o\">=</span> <span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">transform_inverse</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">warped_static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span><span class=\"s1\">&#39;Warped static&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span>\n   <span class=\"s1\">&#39;inverse_warp_result.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id7\">\n<img alt=\"examples_built/inverse_warp_result.png\" src=\"examples_built/inverse_warp_result.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Static image transformed under the (inverse) transformation in red on top of the moving image (in green)</strong>.</span></p>\n</div>\n<p>Now let&#8217;s register a couple of slices from a B0 image using the Cross\nCorrelation metric. Also, let&#8217;s inspect the evolution of the registration.\nTo do this we will define a function that will be called by the registration\nobject at each stage of the optimization process. We will draw the current\nwarped images after finishing each resolution.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">callback_CC</span><span class=\"p\">(</span><span class=\"n\">sdr</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>\n    <span class=\"c1\">#Status indicates at which stage of the optimization we currently are</span>\n    <span class=\"c1\">#For now, we will only react at the end of each resolution of the scale</span>\n    <span class=\"c1\">#space</span>\n    <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">imwarp</span><span class=\"o\">.</span><span class=\"n\">RegistrationStages</span><span class=\"o\">.</span><span class=\"n\">SCALE_END</span><span class=\"p\">:</span>\n        <span class=\"c1\">#get the current images from the metric</span>\n        <span class=\"n\">wmoving</span> <span class=\"o\">=</span> <span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">moving_image</span>\n        <span class=\"n\">wstatic</span> <span class=\"o\">=</span> <span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">static_image</span>\n        <span class=\"c1\">#draw the images on top of each other with different colors</span>\n        <span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">wmoving</span><span class=\"p\">,</span> <span class=\"n\">wstatic</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Warped moving&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Warped static&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we are ready to configure and run the registration. First load the data</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data.fetcher</span> <span class=\"k\">import</span> <span class=\"n\">fetch_syn_data</span><span class=\"p\">,</span> <span class=\"n\">read_syn_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">fetch_syn_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"n\">read_syn_data</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">b0</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(),</span> <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We first remove the skull from the B0 volume</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>And select two slices to try the 2D registration</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">b0_mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">b0_mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">38</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>After loading the data, we instantiate the Cross Correlation metric. The metric\nreceives three parameters: the dimension of the input images, the standard\ndeviation of the Gaussian Kernel to be used to regularize the gradient and the\nradius of the window to be used for evaluating the local normalized cross\ncorrelation.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sigma_diff</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span>\n<span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">CCMetric</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">sigma_diff</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let&#8217;s use a scale space of 3 levels</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">]</span>\n<span class=\"n\">sdr</span> <span class=\"o\">=</span> <span class=\"n\">SymmetricDiffeomorphicRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">level_iters</span><span class=\"p\">)</span>\n<span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">callback_CC</span>\n</pre></div>\n</div>\n<p>And execute the optimization</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">)</span>\n\n<span class=\"n\">warped</span> <span class=\"o\">=</span> <span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can see the effect of the warping by switching between the images before and\nafter registration</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span>\n               <span class=\"s1\">&#39;t1_slices_input.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id8\">\n<img alt=\"examples_built/t1_slices_input.png\" src=\"examples_built/t1_slices_input.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Input images</strong>.</span></p>\n</div>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">warped</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Warped moving&#39;</span><span class=\"p\">,</span>\n               <span class=\"s1\">&#39;t1_slices_res.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id9\">\n<img alt=\"examples_built/t1_slices_res.png\" src=\"examples_built/t1_slices_res.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Moving image transformed under the (direct) transformation in green on top of the static image (in red)</strong>.</span></p>\n</div>\n<p>And we can apply the inverse warping too</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">inv_warped</span> <span class=\"o\">=</span> <span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">transform_inverse</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_images</span><span class=\"p\">(</span><span class=\"n\">inv_warped</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Warped static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Overlay&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;moving&#39;</span><span class=\"p\">,</span>\n               <span class=\"s1\">&#39;t1_slices_res2.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id10\">\n<img alt=\"examples_built/t1_slices_res2.png\" src=\"examples_built/t1_slices_res2.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Static image transformed under the (inverse) transformation in red on top of the moving image (in green)</strong>.</span></p>\n</div>\n<p>Finally, let&#8217;s see the deformation</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">plot_2d_diffeomorphic_map</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diffeomorphic_map_b0s.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id11\">\n<img alt=\"examples_built/diffeomorphic_map_b0s.png\" src=\"examples_built/diffeomorphic_map_b0s.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Deformed lattice under the resulting diffeomorphic map</strong>.</span></p>\n</div>\n<table class=\"docutils citation\" frame=\"void\" id=\"avants09\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Avants09]</a></td><td>Avants, B. B., Epstein, C. L., Grossman, M., &amp; Gee, J. C. (2009). Symmetric Diffeomorphic Image Registration with Cross- Correlation: Evaluating Automated Labeling of Elderly and Neurodegenerative Brain, 12(1), 26-41.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"avants11\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[Avants11]</a></td><td>Avants, B. B., Tustison, N., &amp; Song, G. (2011). Advanced Normalization Tools ( ANTS ), 1-35.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/syn_registration_2d.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Symmetric Diffeomorphic Registration in 2D", "sourcename": "examples_built/syn_registration_2d.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/syn_registration_2d", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Symmetric Diffeomorphic Registration in 2D</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}