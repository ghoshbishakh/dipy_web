{"body": "<div class=\"section\" id=\"connectivity-matrices-roi-intersections-and-density-maps\">\n<span id=\"example-streamline-tools\"></span><h1>Connectivity Matrices, ROI Intersections and Density Maps<a class=\"headerlink\" href=\"#connectivity-matrices-roi-intersections-and-density-maps\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example is meant to be an introduction to some of the streamline tools\navailable in dipy. Some of the functions covered in this example are\n<code class=\"docutils literal\"><span class=\"pre\">target</span></code>, <code class=\"docutils literal\"><span class=\"pre\">connectivity_matrix</span></code> and <code class=\"docutils literal\"><span class=\"pre\">density_map</span></code>. <code class=\"docutils literal\"><span class=\"pre\">target</span></code> allows one\nto filter streamlines that either pass through or do not pass through some\nregion of the brain, <code class=\"docutils literal\"><span class=\"pre\">connectivity_matrix</span></code> groups and counts streamlines\nbased on where in the brain they begin and end, and finally, density map counts\nthe number of streamlines that pass though every voxel of some image.</p>\n<p>To get started we&#8217;ll need to have a set of streamlines to work with. We&#8217;ll use\nEuDX along with the CsaOdfModel to make some streamlines. Let&#8217;s import the\nmodules and download the data we&#8217;ll be using.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.eudx</span> <span class=\"k\">import</span> <span class=\"n\">EuDX</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst</span> <span class=\"k\">import</span> <span class=\"n\">peaks</span><span class=\"p\">,</span> <span class=\"n\">shm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"k\">import</span> <span class=\"n\">utils</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">,</span> <span class=\"n\">fetch_stanford_t1</span><span class=\"p\">,</span> <span class=\"n\">read_stanford_t1</span>\n\n<span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">labels_img</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">fetch_stanford_t1</span><span class=\"p\">()</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_t1</span><span class=\"p\">()</span>\n<span class=\"n\">t1_data</span> <span class=\"o\">=</span> <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We&#8217;ve loaded an image called <code class=\"docutils literal\"><span class=\"pre\">labels_img</span></code> which is a map of tissue types such\nthat every integer value in the array <code class=\"docutils literal\"><span class=\"pre\">labels</span></code> represents an anatomical\nstructure or tissue type <a class=\"footnote-reference\" href=\"#id140\" id=\"id1\">[1]</a>. For this example, the image was created so that\nwhite matter voxels have values of either 1 or 2. We&#8217;ll use\n<code class=\"docutils literal\"><span class=\"pre\">peaks_from_model</span></code> to apply the <code class=\"docutils literal\"><span class=\"pre\">CsaOdfModel</span></code> to each white matter voxel\nand estimate fiber orientations which we can use for tracking.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">shm</span><span class=\"o\">.</span><span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                                  <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                  <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                  <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                                  <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span>\n                                  <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we can use EuDX to track all of the white matter. To keep things reasonably\nfast we use <code class=\"docutils literal\"><span class=\"pre\">density=2</span></code> which will result in 8 seeds per voxel. We&#8217;ll set\n<code class=\"docutils literal\"><span class=\"pre\">a_low</span></code> (the parameter which determines the threshold of FA/QA under which\ntracking stops) to be very low because we&#8217;ve already applied a white matter\nmask.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">white_matter</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">EuDX</span><span class=\"p\">(</span><span class=\"n\">csapeaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span><span class=\"p\">,</span> <span class=\"n\">csapeaks</span><span class=\"o\">.</span><span class=\"n\">peak_indices</span><span class=\"p\">,</span>\n                            <span class=\"n\">odf_vertices</span><span class=\"o\">=</span><span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">default_sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span>\n                            <span class=\"n\">a_low</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">step_sz</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"o\">=</span><span class=\"n\">seeds</span><span class=\"p\">)</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">streamline_generator</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">streamline_generator</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The first of the tracking utilities we&#8217;ll cover here is <code class=\"docutils literal\"><span class=\"pre\">target</span></code>. This\nfunction takes a set of streamlines and a region of interest (ROI) and returns\nonly those streamlines that pass though the ROI. The ROI should be an array\nsuch that the voxels that belong to the ROI are <code class=\"docutils literal\"><span class=\"pre\">True</span></code> and all other voxels\nare <code class=\"docutils literal\"><span class=\"pre\">False</span></code> (this type of binary array is sometimes called a mask). This\nfunction can also exclude all the streamlines that pass though an ROI by\nsetting the <code class=\"docutils literal\"><span class=\"pre\">include</span></code> flag to <code class=\"docutils literal\"><span class=\"pre\">False</span></code>. In this example we&#8217;ll target the\nstreamlines of the corpus callosum. Our <code class=\"docutils literal\"><span class=\"pre\">labels</span></code> array has a sagittal slice\nof the corpus callosum identified by the label value 2. We&#8217;ll create an ROI\nmask from that label and create two sets of streamlines, those that intersect\nwith the ROI and those that don&#8217;t.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc_slice</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">cc_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">cc_streamlines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span>\n\n<span class=\"n\">other_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n                                 <span class=\"n\">include</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">other_streamlines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">other_streamlines</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_streamlines</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can use some of dipy&#8217;s visualization tools to display the ROI we targeted\nabove and all the streamlines that pass though that ROI. The ROI is the yellow\nregion near the center of the axial image.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">fvtk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz.colormap</span> <span class=\"k\">import</span> <span class=\"n\">line_colors</span>\n\n<span class=\"c1\"># Make display objects</span>\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span>\n<span class=\"n\">cc_streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">,</span> <span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">))</span>\n<span class=\"n\">cc_ROI_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">contour</span><span class=\"p\">(</span><span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">)],</span>\n                            <span class=\"n\">opacities</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">])</span>\n\n<span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add display objects to canvas</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">ren</span><span class=\"p\">()</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">cc_streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save figures</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;corpuscallosum_axial.png&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">viewup</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">fvtk</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;corpuscallosum_sagittal.png&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id142\">\n<img alt=\"examples_built/corpuscallosum_axial.png\" src=\"examples_built/corpuscallosum_axial.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Axial</strong></span></p>\n</div>\n<div class=\"figure align-center\" id=\"id143\">\n<img alt=\"examples_built/corpuscallosum_sagittal.png\" src=\"examples_built/corpuscallosum_sagittal.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Sagittal</strong></span></p>\n</div>\n<p>Once we&#8217;ve targeted on the corpus callosum ROI, we might want to find out which\nregions of the brain are connected by these streamlines. To do this we can use\nthe <code class=\"docutils literal\"><span class=\"pre\">connectivity_matrix</span></code> function. This function takes a set of streamlines\nand an array of labels as arguments. It returns the number of streamlines that\nstart and end at each pair of labels and it can return the streamlines grouped\nby their endpoints. Notice that this function only considers the endpoints of\neach streamline.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">grouping</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">connectivity_matrix</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n                                        <span class=\"n\">return_mapping</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                        <span class=\"n\">mapping_as_streamlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>We&#8217;ve set <code class=\"docutils literal\"><span class=\"pre\">return_mapping</span></code> and <code class=\"docutils literal\"><span class=\"pre\">mapping_as_streamlines</span></code> to <code class=\"docutils literal\"><span class=\"pre\">True</span></code> so that\n<code class=\"docutils literal\"><span class=\"pre\">connectivity_matrix</span></code> returns all the streamlines in <code class=\"docutils literal\"><span class=\"pre\">cc_streamlines</span></code>\ngrouped by their endpoint.</p>\n<p>Because we&#8217;re typically only interested in connections between gray matter\nregions, and because the label 0 represents background and the labels 1 and 2\nrepresent white matter, we discard the first three rows and columns of the\nconnectivity matrix.</p>\n<p>We can now display this matrix using matplotlib, we display it using a log\nscale to make small values in the matrix easier to see.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log1p</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">),</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;connectivity.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id144\">\n<img alt=\"examples_built/connectivity.png\" src=\"examples_built/connectivity.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Connectivity of Corpus Callosum</strong></span></p>\n</div>\n<p>In our example track there are more streamlines connecting regions 11 and\n54 than any other pair of regions. These labels represent the left and right\nsuperior frontal gyrus respectively. These two regions are large, close\ntogether, have lots of corpus callosum fibers and are easy to track so this\nresult should not be a surprise to anyone.</p>\n<p>However, the interpretation of streamline counts can be tricky. The\nrelationship between the underlying biology and the streamline counts will\ndepend on several factors, including how the tracking was done, and the correct\nway to interpret these kinds of connectivity matrices is still an open question\nin the diffusion imaging literature.</p>\n<p>The next function we&#8217;ll demonstrate is <code class=\"docutils literal\"><span class=\"pre\">density_map</span></code>. This function allows\none to represent the spatial distribution of a track by counting the density of\nstreamlines in each voxel. For example, let&#8217;s take the track connecting the\nleft and right superior frontal gyrus.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">lr_superiorfrontal_track</span> <span class=\"o\">=</span> <span class=\"n\">grouping</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">]</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">dm</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">density_map</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_track</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let&#8217;s save this density map and the streamlines so that they can be\nvisualized together. In order to save the streamlines in a &#8221;.trk&#8221; file we&#8217;ll\nneed to move them to &#8220;trackvis space&#8221;, or the representation of streamlines\nspecified by the trackvis Track File format.</p>\n<p>To do that, we will use tools available in [nibabel](<a class=\"reference external\" href=\"http://nipy.org/nibabel\">http://nipy.org/nibabel</a>)</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n\n<span class=\"c1\"># Save density map</span>\n<span class=\"n\">dm_img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">dm</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s2\">&quot;int16&quot;</span><span class=\"p\">),</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_affine</span><span class=\"p\">())</span>\n<span class=\"n\">dm_img</span><span class=\"o\">.</span><span class=\"n\">to_filename</span><span class=\"p\">(</span><span class=\"s2\">&quot;lr-superiorfrontal-dm.nii.gz&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make a trackvis header so we can save streamlines</span>\n<span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_header</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()</span>\n<span class=\"n\">trackvis_header</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">empty_header</span><span class=\"p\">()</span>\n<span class=\"n\">trackvis_header</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">voxel_size</span>\n<span class=\"n\">trackvis_header</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">shape</span>\n<span class=\"n\">trackvis_header</span><span class=\"p\">[</span><span class=\"s1\">&#39;voxel_order&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RAS&quot;</span>\n\n<span class=\"c1\"># Move streamlines to &quot;trackvis space&quot;</span>\n<span class=\"n\">trackvis_point_space</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">affine_for_trackvis</span><span class=\"p\">(</span><span class=\"n\">voxel_size</span><span class=\"p\">)</span>\n<span class=\"n\">lr_sf_trk</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">move_streamlines</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_track</span><span class=\"p\">,</span>\n                                   <span class=\"n\">trackvis_point_space</span><span class=\"p\">,</span> <span class=\"n\">input_space</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">lr_sf_trk</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lr_sf_trk</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save streamlines</span>\n<span class=\"n\">for_save</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">sl</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">sl</span> <span class=\"ow\">in</span> <span class=\"n\">lr_sf_trk</span><span class=\"p\">]</span>\n<span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">trackvis</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;lr-superiorfrontal.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">for_save</span><span class=\"p\">,</span> <span class=\"n\">trackvis_header</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let&#8217;s take a moment here to consider the representation of streamlines used in\ndipy. Streamlines are a path though the 3d space of an image represented by a\nset of points. For these points to have a meaningful interpretation, these\npoints must be given in a known coordinate system. The <code class=\"docutils literal\"><span class=\"pre\">affine</span></code> attribute of\nthe <code class=\"docutils literal\"><span class=\"pre\">streamline_generator</span></code> object specifies the coordinate system of the\npoints with respect to the voxel indices of the input data.\n<code class=\"docutils literal\"><span class=\"pre\">trackvis_point_space</span></code> specifies the trackvis coordinate system with respect\nto the same indices. The <code class=\"docutils literal\"><span class=\"pre\">move_streamlines</span></code> function returns a new set of\nstreamlines from an existing set of streamlines in the target space. The\ntarget space and the input space must be specified as affine transformations\nwith respect to the same reference <a class=\"footnote-reference\" href=\"#id141\" id=\"id139\">[2]</a>. If no input space is given, the input\nspace will be the same as the current representation of the streamlines, in\nother words the input space is assumed to be <code class=\"docutils literal\"><span class=\"pre\">np.eye(4)</span></code>, the 4-by-4 identity\nmatrix.</p>\n<p>All of the functions above that allow streamlines to interact with volumes take\nan affine argument. This argument allows these functions to work with\nstreamlines regardless of their coordinate system. For example even though we\nmoved our streamlines to &#8220;trackvis space&#8221;, we can still compute the density map\nas long as we specify the right coordinate system.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dm_trackvis</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">density_map</span><span class=\"p\">(</span><span class=\"n\">lr_sf_trk</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">trackvis_point_space</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">dm</span> <span class=\"o\">==</span> <span class=\"n\">dm_trackvis</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This means that streamlines can interact with any image volume, for example a\nhigh resolution structural image, as long as one can register that image to\nthe diffusion images and calculate the coordinate system with respect to that\nimage.</p>\n<p class=\"rubric\">Footnotes</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id140\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td><td>The image <cite>aparc-reduced.nii.gz</cite>, which we load as <code class=\"docutils literal\"><span class=\"pre\">labels_img</span></code>, is a\nmodified version of label map <cite>aparc+aseg.mgz</cite> created by freesurfer.  The\ncorpus callosum region is a combination of the freesurfer labels 251-255.\nThe remaining freesurfer labels were re-mapped and reduced so that they lie\nbetween 0 and 88. To see the freesurfer region, label and name, represented\nby each value see <cite>label_info.txt</cite> in <cite>~/.dipy/stanford_hardi</cite>.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id141\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id139\">[2]</a></td><td>An affine transformation is a mapping between two coordinate systems\nthat can represent scaling, rotation, sheer, translation and reflection.\nAffine transformations are often represented using a 4x4 matrix where the\nlast row of the matrix is <code class=\"docutils literal\"><span class=\"pre\">[0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1]</span></code>.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/streamline_tools.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Connectivity Matrices, ROI Intersections and Density Maps", "sourcename": "examples_built/streamline_tools.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/streamline_tools", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["np-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Connectivity Matrices, ROI Intersections and Density Maps</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}